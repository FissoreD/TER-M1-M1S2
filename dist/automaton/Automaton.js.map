{"version":3,"sources":["../../src/automaton/Automaton.ts"],"names":["State","constructor","name","isAccepting","isInitial","alphabet","outTransitions","Map","inTransitions","successors","Set","predecessor","symbol","set","addTransition","state","get","includes","push","add","getSuccessor","getPredecessor","Automaton","stateList","allStates","Array","from","initialStates","filter","s","acceptingStates","currentStates","states","forEach","e","states_rename","set_state_rename","counter_init","length","size","_name","next_step","next_char","newCurrentState","cs","nextStates","nextState","accept_word","word","restart","letter","is_accepted","some","accept_word_nfa","index","nextStates2","findTransition","draw_next_step","color_node","initiate_graph","automatonHTML","$","removeAttribute","innerHTML","matrix_to_mermaid","mermaid","init","n","circle","get_current_graph_node","style","strokeWidth","stroke","smaller_circle","cloneNode","attributes","value","parentNode","insertBefore","nextSibling","after","height","node","find","id","split","firstChild","mermaidTxt","concat","triples","j","stateA_concat_stateB","Object","keys","map","x","create_triple","join","_","toFill","currentState","current_circle","next_circle","textDecoration","fill","transition","A","B","A_rename","get_state_rename","B_rename","create_entering_arrow","state_number","transition_number","flat","reduce","a","b","minimize","toExplore","newState","shift","successor","P","p","pLength","W","X","succ","Y","S1","S2","has","y","splice","indexOf","oldStateToNewState","newStates","partition","pos","representant","oldState"],"mappings":"AAEA,MAAO,MAAMA,CAAAA,KAAM,CAUjBC,WAAW,CAACC,IAAD,CAAeC,WAAf,CAAqCC,SAArC,CAAyDC,QAAzD,CAA6E,CACtF,KAAKH,IAAL,CAAYA,IAAZ,CACA,KAAKC,WAAL,CAAmBA,WAAnB,CACA,KAAKC,SAAL,CAAiBA,SAAjB,CACA,KAAKC,QAAL,CAAgBA,QAAhB,CACA,KAAKC,cAAL,CAAsB,GAAIC,CAAAA,GAA1B,CACA,KAAKC,aAAL,CAAqB,GAAID,CAAAA,GAAzB,CACA,KAAKE,UAAL,CAAkB,GAAIC,CAAAA,GAAtB,CACA,KAAKC,WAAL,CAAmB,GAAID,CAAAA,GAAvB,CACA,IAAK,KAAME,CAAAA,MAAX,GAAqBP,CAAAA,QAArB,CAA+B,CAC7B,KAAKC,cAAL,CAAoBO,GAApB,CAAwBD,MAAxB,CAAgC,EAAhC,EACA,KAAKJ,aAAL,CAAmBK,GAAnB,CAAuBD,MAAvB,CAA+B,EAA/B,CACD,CACF,CAEDE,aAAa,CAACF,MAAD,CAAiBG,KAAjB,CAA+B,CAC1C,GAAI,KAAKT,cAAL,CAAoBU,GAApB,CAAwBJ,MAAxB,EAAiCK,QAAjC,CAA0CF,KAA1C,CAAJ,CAAsD,OACtD,KAAKT,cAAL,CAAoBU,GAApB,CAAwBJ,MAAxB,EAAiCM,IAAjC,CAAsCH,KAAtC,EACA,KAAKN,UAAL,CAAgBU,GAAhB,CAAoBJ,KAApB,EACAA,KAAK,CAACJ,WAAN,CAAkBQ,GAAlB,CAAsB,IAAtB,EACAJ,KAAK,CAACP,aAAN,CAAoBQ,GAApB,CAAwBJ,MAAxB,EAAiCM,IAAjC,CAAsC,IAAtC,CACD,CAEDE,YAAY,CAACR,MAAD,CAAiB,CAC3B,MAAO,MAAKN,cAAL,CAAoBU,GAApB,CAAwBJ,MAAxB,CACR,CAEDS,cAAc,CAACT,MAAD,CAAiB,CAC7B,MAAO,MAAKJ,aAAL,CAAmBQ,GAAnB,CAAuBJ,MAAvB,CACR,CAvCgB,CA+ClB,CAED,MAAO,MAAMU,CAAAA,SAAmC,CAS9CrB,WAAW,CAACsB,SAAD,CAAwB,CACjC,KAAKC,SAAL,CAAiBC,KAAK,CAACC,IAAN,CAAWH,SAAX,CAAjB,CACA,KAAKI,aAAL,CAAqB,KAAKH,SAAL,CAAeI,MAAf,CAAsBC,CAAC,EAAIA,CAAC,CAACzB,SAA7B,CAArB,CACA,KAAK0B,eAAL,CAAuB,KAAKN,SAAL,CAAeI,MAAf,CAAsBC,CAAC,EAAIA,CAAC,CAAC1B,WAA7B,CAAvB,CACA,KAAK4B,aAAL,CAAqB,KAAKJ,aAA1B,CACA,KAAKtB,QAAL,CAAgB,KAAKsB,aAAL,CAAmB,CAAnB,EAAsBtB,QAAtC,CACA,KAAK2B,MAAL,CAAc,GAAIzB,CAAAA,GAAlB,CACAgB,SAAS,CAACU,OAAV,CAAkBC,CAAC,EAAI,KAAKF,MAAL,CAAYnB,GAAZ,CAAgBqB,CAAC,CAAChC,IAAlB,CAAwBgC,CAAxB,CAAvB,EACA,KAAKC,aAAL,CAAqB,GAAI5B,CAAAA,GAAzB,CACA,KAAK6B,gBAAL,EACD,CAEDA,gBAAgB,EAAG,CACjB,GAAIC,CAAAA,YAAY,CAAG,CAAC,CAAD,CAAI,KAAKV,aAAL,CAAmBW,MAAvB,CAA+B,KAAKN,MAAL,CAAYO,IAAZ,CAAmB,KAAKT,eAAL,CAAqBQ,MAAxC,CAAiD,CAAhF,CAAnB,CACA,IAAK,KAAM,CAACE,KAAD,CAAQzB,KAAR,CAAX,EAA6B,MAAKiB,MAAlC,CAA0C,CACxC,GAAI,KAAKL,aAAL,CAAmBV,QAAnB,CAA4BF,KAA5B,CAAJ,CAAwC,CACtC,KAAKoB,aAAL,CAAmBtB,GAAnB,CAAuBE,KAAK,CAACb,IAA7B,CAAmC,IAAMmC,YAAY,CAAC,CAAD,CAAZ,EAAzC,CACD,CAFD,IAEO,IAAI,KAAKP,eAAL,CAAqBb,QAArB,CAA8BF,KAA9B,CAAJ,CAA0C,CAC/C,KAAKoB,aAAL,CAAmBtB,GAAnB,CAAuBE,KAAK,CAACb,IAA7B,CAAmC,IAAMmC,YAAY,CAAC,CAAD,CAAZ,EAAzC,CACD,CAFM,IAEA,CACL,KAAKF,aAAL,CAAmBtB,GAAnB,CAAuBE,KAAK,CAACb,IAA7B,CAAmC,IAAMmC,YAAY,CAAC,CAAD,CAAZ,EAAzC,CACD,CACF,CACF,CAEDI,SAAS,CAACC,SAAD,CAAoB,CAC3B,GAAIC,CAAAA,eAAwB,CAAG,EAA/B,CACA,KAAKZ,aAAL,CAAmBE,OAAnB,CAA2BW,EAAE,EAAI,CAC/B,GAAIC,CAAAA,UAAU,CAAGD,EAAE,CAACtC,cAAH,CAAkBU,GAAlB,CAAsB0B,SAAtB,CAAjB,CACAG,UAAU,CAACZ,OAAX,CAAmBa,SAAS,EAAI,CAC9B,GAAI,CAACH,eAAe,CAAC1B,QAAhB,CAAyB6B,SAAzB,CAAL,CAA0C,CACxCH,eAAe,CAACzB,IAAhB,CAAqB4B,SAArB,CACD,CACF,CAJD,CAKD,CAPD,EAQA,KAAKf,aAAL,CAAqBY,eACtB,CAEDI,WAAW,CAACC,IAAD,CAAwB,CACjC,KAAKC,OAAL,GACAxB,KAAK,CAACC,IAAN,CAAWsB,IAAX,EAAiBf,OAAjB,CACEiB,MAAM,EAAI,KAAKT,SAAL,CAAeS,MAAf,CADZ,EAGA,GAAIC,CAAAA,WAAW,CAAG,KAAKrB,eAAL,CAAqBsB,IAArB,CAA0BlB,CAAC,EAAI,KAAKH,aAAL,CAAmBd,QAAnB,CAA4BiB,CAA5B,CAA/B,CAAlB,CACA,KAAKe,OAAL,GACA,MAAOE,CAAAA,WACR,CAGDE,eAAe,CAACL,IAAD,CAAwB,CACrC,GAAIA,IAAI,CAACV,MAAL,EAAe,CAAnB,CACE,MAAO,MAAKX,aAAL,CAAmByB,IAAnB,CAAwBlB,CAAC,EAAIA,CAAC,CAAC/B,WAA/B,CAAP,CACF,GAAI0C,CAAAA,UAAsB,CAAG,GAAInC,CAAAA,GAAJ,CAAQ,KAAKiB,aAAb,CAA7B,CACA,IAAK,GAAI2B,CAAAA,KAAK,CAAG,CAAjB,CAAoBA,KAAK,CAAGN,IAAI,CAACV,MAAb,EAAuBO,UAAU,CAACN,IAAX,CAAkB,CAA7D,CAAgEe,KAAK,EAArE,CAAyE,CACvE,GAAIC,CAAAA,WAAuB,CAAG,GAAI7C,CAAAA,GAAlC,CACA,KAAME,CAAAA,MAAM,CAAGoC,IAAI,CAACM,KAAD,CAAnB,CACA,IAAK,KAAMvC,CAAAA,KAAX,GAAoB8B,CAAAA,UAApB,CAAgC,CAC9B,IAAK,KAAMC,CAAAA,SAAX,GAAwB,MAAKU,cAAL,CAAoBzC,KAApB,CAA2BH,MAA3B,CAAxB,CAA4D,CAC1D2C,WAAW,CAACpC,GAAZ,CAAgB2B,SAAhB,EACA,GAAIQ,KAAK,EAAIN,IAAI,CAACV,MAAL,CAAc,CAAvB,EAA4BQ,SAAS,CAAC3C,WAA1C,CACE,MAAO,KACV,CAEF,CACD0C,UAAU,CAAGU,WACd,CACD,MAAO,MACR,CAEDC,cAAc,CAACzC,KAAD,CAAeH,MAAf,CAA+B,CAC3C,MAAO,MAAKoB,MAAL,CAAYhB,GAAZ,CAAgBD,KAAK,CAACb,IAAtB,EAA6BI,cAA7B,CAA4CU,GAA5C,CAAgDJ,MAAhD,CACR,CAEDqC,OAAO,EAAG,CACR,KAAKlB,aAAL,CAAqB,KAAKJ,aAC3B,CAID8B,cAAc,CAACf,SAAD,CAAoB,CAChC,KAAKgB,UAAL,CAAgB,KAAhB,EACA,KAAKjB,SAAL,CAAeC,SAAf,EACA,KAAKgB,UAAL,CAAgB,IAAhB,CACD,CAEDC,cAAc,EAAG,CACf,GAAIC,CAAAA,aAAa,CAAGC,CAAC,CAAC,oBAAD,CAAD,CAAwB,CAAxB,CAApB,CACAD,aAAa,CAACE,eAAd,CAA8B,gBAA9B,EACAF,aAAa,CAACG,SAAd,CAA0B,KAAKC,iBAAL,EAA1B,CAGAC,OAAO,CAACC,IAAR,CAAaL,CAAC,CAAC,UAAD,CAAd,EAGA,KAAK/B,eAAL,CAAqBG,OAArB,CAA6BkC,CAAC,EAAI,CAChC,GAAIC,CAAAA,MAAM,CAAG,KAAKC,sBAAL,CAA4BF,CAA5B,CAAb,CACAC,MAAM,CAACE,KAAP,CAAaC,WAAb,CAA2B,KAA3B,CACAH,MAAM,CAACE,KAAP,CAAaE,MAAb,CAAsB,OAAtB,CACA,GAAIC,CAAAA,cAAc,CAAGL,MAAM,CAACM,SAAP,EAArB,CAEAD,cAAc,CAACE,UAAf,CAA0B,GAA1B,EAA+BC,KAA/B,EAAwC,CAAxC,CACAR,MAAM,CAACS,UAAP,CAAmBC,YAAnB,CAAgCL,cAAhC,CAAgDL,MAAM,CAACW,WAAvD,CACD,CARD,EAWA,KAAKrB,UAAL,CAAgB,IAAhB,EACAG,CAAC,CAAC,UAAD,CAAD,CAAc,CAAd,EAAiBmB,KAAjB,CAAuBnB,CAAC,CAAC,iBAAD,CAAD,CAAqB,CAArB,CAAvB,EACAA,CAAC,CAAC,KAAD,CAAD,CAAS,CAAT,EAAYS,KAAZ,CAAkBW,MAAlB,CAA2B,MAC5B,CAEDZ,sBAAsB,CAACa,IAAD,CAAc,CAClC,MAAOzD,CAAAA,KAAK,CAACC,IAAN,CAAWmC,CAAC,CAAC,OAAD,CAAZ,EAAuBsB,IAAvB,CAA4BjD,CAAC,EAAIA,CAAC,CAACkD,EAAF,CAAKC,KAAL,CAAW,GAAX,EAAgB,CAAhB,GAAsBH,IAAI,CAAChF,IAA5D,EAAmEoF,UAC3E,CAEDtB,iBAAiB,EAAW,CAC1B,GAAIuB,CAAAA,UAAU,CAAG,gBAAjB,CACAA,UAAU,CAAGA,UAAU,CAACC,MAAX,CAAkB,oCAAlB,CAAb,CAEA,GAAIC,CAAAA,OAAmC,CAAG,EAA1C,CACA,IAAK,KAAM,CAACvF,IAAD,CAAOa,KAAP,CAAX,EAA4B,MAAKiB,MAAjC,CAAyC,CACvC,IAAK,GAAI0D,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAG,KAAKrF,QAAL,CAAciC,MAAlC,CAA0CoD,CAAC,EAA3C,CAA+C,CAC7C,IAAK,KAAM5C,CAAAA,SAAX,GAAwB,MAAKU,cAAL,CAAoBzC,KAApB,CAA2B,KAAKV,QAAL,CAAcqF,CAAd,CAA3B,CAAxB,CAAsE,CACpE,GAAIC,CAAAA,oBAAoB,CAAGzF,IAAI,CAAG,GAAP,CAAa4C,SAAS,CAAC5C,IAAlD,CACA,GAAIuF,OAAO,CAACE,oBAAD,CAAX,CAAmC,CACjCF,OAAO,CAACE,oBAAD,CAAP,CAA8BzE,IAA9B,CAAmC,KAAKb,QAAL,CAAcqF,CAAd,CAAnC,CACD,CAFD,IAEO,CACLD,OAAO,CAACE,oBAAD,CAAP,CAAgC,CAAC,KAAKtF,QAAL,CAAcqF,CAAd,CAAD,CACjC,CACF,CACF,CACF,CACDH,UAAU,CAAGA,UAAU,CAACC,MAAX,CAAkBI,MAAM,CAACC,IAAP,CAAYJ,OAAZ,EAAqBK,GAArB,CAAyBC,CAAC,EAAI,KAAKC,aAAL,CAAmBD,CAAnB,CAAsBN,OAAO,CAACM,CAAD,CAAP,CAAWE,IAAX,CAAgB,GAAhB,CAAtB,CAA9B,EAA2EA,IAA3E,CAAgF,IAAhF,CAAlB,CAAb,CAEAV,UAAU,EAAI,IAAd,CACAA,UAAU,EAAI,4BAAd,CACAA,UAAU,EAAI,KAAK5D,aAAL,CAAmBmE,GAAnB,CAAuB5D,CAAC,EAAIA,CAAC,CAAChC,IAA9B,EAAoC+F,IAApC,CAAyC,IAAzC,CAAd,CACAV,UAAU,EAAI,OAAd,CACAA,UAAU,EAAI,IAAd,CACAA,UAAU,EAAI,OAAd,CACAA,UAAU,CAAGA,UAAU,CAACC,MAAX,CAAkB,KAAK1D,eAAL,CAAqBgE,GAArB,CAAyB5D,CAAC,EAAK,SAAQA,CAAC,CAAChC,IAAK,kCAA9C,EAAiF+F,IAAjF,CAAsF,EAAtF,CAAlB,CAAb,CACAV,UAAU,EAAI,IAAd,CAEAA,UAAU,CAAGA,UAAU,CAACC,MAAX,CAAkB/D,KAAK,CAACC,IAAN,CAAW,KAAKM,MAAhB,EAAwB8D,GAAxB,CAA4B,CAAC,CAAC5F,IAAD,CAAOgG,CAAP,CAAD,GAAgB,SAAQhG,IAAK,0BAAyBA,IAAK,IAAvF,EAA4F+F,IAA5F,CAAiG,IAAjG,CAAlB,CAAb,CAEA,MAAOV,CAAAA,UACR,CAGD7B,UAAU,CAACyC,MAAD,CAAkB,CAC1B,KAAKpE,aAAL,CAAmBE,OAAnB,CAA2BmE,YAAY,EAAI,CACzC,GAAIC,CAAAA,cAAc,CAAG,KAAKhC,sBAAL,CAA4B+B,YAA5B,CAArB,CACA,GAAIE,CAAAA,WAAW,CAAGD,cAAc,CAACtB,WAAjC,CACA,GAAIoB,MAAJ,CAAY,CACVG,WAAW,CAAChC,KAAZ,CAAkBiC,cAAlB,CAAmC,WAAnC,CACA,GAAI,KAAKzE,eAAL,CAAqBb,QAArB,CAA8BmF,YAA9B,CAAJ,CACEE,WAAW,CAAChC,KAAZ,CAAkBkC,IAAlB,CAAyB,SAAzB,CADF,IAEKH,CAAAA,cAAc,CAAC/B,KAAf,CAAqBkC,IAArB,CAA4B,SAClC,CALD,IAKO,CACL,GAAI,KAAK1E,eAAL,CAAqBb,QAArB,CAA8BmF,YAA9B,CAAJ,CACEE,WAAW,CAACxC,eAAZ,CAA4B,OAA5B,EADF,IAEKuC,CAAAA,cAAc,CAACvC,eAAf,CAA+B,OAA/B,CACN,CACF,CAbD,CAqBD,CAEDkC,aAAa,CAAChE,MAAD,CAAiByE,UAAjB,CAA6C,CACxD,GAAIpB,CAAAA,KAAK,CAAGrD,MAAM,CAACqD,KAAP,CAAa,GAAb,CAAZ,CACA,GAAIqB,CAAAA,CAAC,CAAGrB,KAAK,CAAC,CAAD,CAAb,CAAkBsB,CAAC,CAAGtB,KAAK,CAAC,CAAD,CAA3B,CACA,GAAIuB,CAAAA,QAAQ,CAAG,KAAKC,gBAAL,CAAsBH,CAAtB,CAAf,CACA,GAAII,CAAAA,QAAQ,CAAG,KAAKD,gBAAL,CAAsBF,CAAtB,CAAf,CACA,MAAQ,GAAED,CAAE,KAAIE,QAAS,WAAUH,UAAW,MAAKE,CAAE,KAAIG,QAAS,IACnE,CAEDC,qBAAqB,EAAW,CAC9B,MAAQ,eAAc,KAAKpF,aAAc,EAC1C,CAEDkF,gBAAgB,CAAC3G,IAAD,CAAe,CAC7B,MAAO,MAAKiC,aAAL,CAAmBnB,GAAnB,CAAuBd,IAAvB,CACR,CAED8G,YAAY,EAAG,CACb,MAAO,MAAKhF,MAAL,CAAYO,IACpB,CAED0E,iBAAiB,EAAG,CAClB,MAAOxF,CAAAA,KAAK,CAACC,IAAN,CAAW,KAAKM,MAAhB,EAAwB8D,GAAxB,CAA4B5D,CAAC,EAAIT,KAAK,CAACC,IAAN,CAAWQ,CAAC,CAAC,CAAD,CAAD,CAAK5B,cAAhB,CAAjC,EAAkE4G,IAAlE,GAAyEC,MAAzE,CAAgF,CAACC,CAAD,CAAIC,CAAJ,GAAUD,CAAC,CAAGC,CAAC,CAAC,CAAD,CAAD,CAAK/E,MAAnG,CAA2G,CAA3G,CACR,CAODgF,QAAQ,EAAG,CAET,GAAI/F,CAAAA,SAAkB,CAAG,CAAC,KAAKI,aAAL,CAAmB,CAAnB,CAAD,CAAzB,CAGA,GAAI4F,CAAAA,SAAS,CAAG,CAAC,KAAK5F,aAAL,CAAmB,CAAnB,CAAD,CAAhB,CACA,MAAO4F,SAAS,CAACjF,MAAV,CAAmB,CAA1B,CAA6B,CAC3B,GAAIkF,CAAAA,QAAQ,CAAGD,SAAS,CAACE,KAAV,EAAf,CACA,IAAK,KAAMC,CAAAA,SAAX,GAAwBF,CAAAA,QAAQ,CAAC/G,UAAjC,CAA6C,CAC3C,GAAI,CAACc,SAAS,CAACN,QAAV,CAAmByG,SAAnB,CAAL,CAAoC,CAClCH,SAAS,CAACrG,IAAV,CAAewG,SAAf,EACAnG,SAAS,CAACL,IAAV,CAAewG,SAAf,CACD,CACF,CACF,CAED,GAAIC,CAAAA,CAAe,CAAG,CAAC,GAAIjH,CAAAA,GAAL,CAAY,GAAIA,CAAAA,GAAhB,CAAtB,CACAa,SAAS,CAACU,OAAV,CAAkBJ,CAAC,EAAI,CAACA,CAAC,CAAC1B,WAAF,CAAgBwH,CAAC,CAAC,CAAD,CAAjB,CAAuBA,CAAC,CAAC,CAAD,CAAzB,EAA8BxG,GAA9B,CAAkCU,CAAlC,CAAvB,EACA8F,CAAC,CAAGA,CAAC,CAAC/F,MAAF,CAASgG,CAAC,EAAIA,CAAC,CAACrF,IAAF,CAAS,CAAvB,CAAJ,CAEA,GAAIsF,CAAAA,OAAO,CAAG,IAAMF,CAAC,CAACR,MAAF,CAAS,CAACC,CAAD,CAAIQ,CAAJ,GAAUR,CAAC,CAAGQ,CAAC,CAACrF,IAAzB,CAA+B,CAA/B,CAApB,CAEA,GAAIuF,CAAAA,CAAe,CAAGrG,KAAK,CAACC,IAAN,CAAWiG,CAAX,CAAtB,CACA,MAAOG,CAAC,CAACxF,MAAF,CAAW,CAAlB,CAAqB,CACnB,GAAIoE,CAAAA,CAAC,CAAGoB,CAAC,CAACL,KAAF,EAAR,CACA,IAAK,KAAMvE,CAAAA,MAAX,GAAqB,MAAK7C,QAA1B,CAAoC,CAElC,GAAI0H,CAAAA,CAAa,CAAG,GAAIrH,CAAAA,GAAxB,CACAgG,CAAC,CAACzE,OAAF,CAAUC,CAAC,EAAI,CACb,GAAI8F,CAAAA,IAAI,CAAG9F,CAAC,CAAC1B,aAAF,CAAgBQ,GAAhB,CAAoBkC,MAApB,CAAX,CACA,GAAI8E,IAAJ,CAAUA,IAAI,CAAC/F,OAAL,CAAaJ,CAAC,EAAIkG,CAAC,CAAC5G,GAAF,CAAMU,CAAN,CAAlB,CACX,CAHD,EAMA,GAAIoG,CAAAA,CAAC,CAAGN,CAAC,CAAC7B,GAAF,CAAM8B,CAAC,EAAI,CACjB,GAAIM,CAAAA,EAAc,CAAG,GAAIxH,CAAAA,GAAzB,CACEyH,EAAc,CAAG,GAAIzH,CAAAA,GADvB,CAEA,IAAK,KAAMK,CAAAA,KAAX,GAAoB6G,CAAAA,CAApB,CAAuB,CACrB,GAAIG,CAAC,CAACK,GAAF,CAAMrH,KAAN,CAAJ,CAAkBmH,EAAE,CAAC/G,GAAH,CAAOJ,KAAP,EAAlB,IACKoH,CAAAA,EAAE,CAAChH,GAAH,CAAOJ,KAAP,CACN,CACD,MAAO,CAAEsH,CAAC,CAAET,CAAL,CAAQM,EAAE,CAAEA,EAAZ,CAAgBC,EAAE,CAAEA,EAApB,CACR,CARO,EAQLvG,MARK,CAQE,CAAC,CAAEsG,EAAF,CAAMC,EAAN,CAAD,GAAgBD,EAAE,CAAC3F,IAAH,CAAU,CAAV,EAAe4F,EAAE,CAAC5F,IAAH,CAAU,CAR3C,CAAR,CASA,IAAK,KAAM,CAAE8F,CAAF,CAAKH,EAAL,CAASC,EAAT,CAAX,EAA4BF,CAAAA,CAA5B,CAA+B,CAE7BN,CAAC,CAACW,MAAF,CAASX,CAAC,CAACY,OAAF,CAAUF,CAAV,CAAT,CAAuB,CAAvB,EACAV,CAAC,CAACzG,IAAF,CAAOgH,EAAP,EACAP,CAAC,CAACzG,IAAF,CAAOiH,EAAP,EACA,GAAIN,OAAO,IAAMtG,SAAS,CAACe,MAA3B,CAAmC,KAAO,UAASf,SAAS,CAACe,MAAO,QAAOuF,OAAO,EAAG,EAAlD,CACnC,GAAIC,CAAC,CAAC7G,QAAF,CAAWoH,CAAX,CAAJ,CAAmB,CACjBP,CAAC,CAACQ,MAAF,CAASR,CAAC,CAACS,OAAF,CAAUF,CAAV,CAAT,CAAuB,CAAvB,EACAP,CAAC,CAAC5G,IAAF,CAAOgH,EAAP,EACAJ,CAAC,CAAC5G,IAAF,CAAOiH,EAAP,CACD,CAJD,IAIO,CACL,GAAID,EAAE,CAAC3F,IAAH,EAAW4F,EAAE,CAAC5F,IAAlB,CAAwB,CACtBuF,CAAC,CAAC5G,IAAF,CAAOgH,EAAP,CACD,CAFD,IAEO,CACLJ,CAAC,CAAC5G,IAAF,CAAOiH,EAAP,CACD,CACF,CACF,CACF,CACF,CAED,GAAIK,CAAAA,kBAAqC,CAAG,GAAIjI,CAAAA,GAAhD,CAEA,GAAIkI,CAAAA,SAAS,CAAG,GAAI/H,CAAAA,GAAJ,CAAQe,KAAK,CAACC,IAAN,CAAWiG,CAAX,EAAc/F,MAAd,CAAqB8G,SAAS,EAAIA,SAAS,CAACnG,IAAV,CAAiB,CAAnD,EAAsDuD,GAAtD,CAA0D,CAAC4C,SAAD,CAAYC,GAAZ,GAAoB,CACpG,GAAIC,CAAAA,YAAY,CAAGnH,KAAK,CAACC,IAAN,CAAWgH,SAAX,CAAnB,CACA,GAAIlB,CAAAA,QAAQ,CAAG,GAAIxH,CAAAA,KAAJ,CAAU2I,GAAG,CAAG,EAAhB,CACbC,YAAY,CAACxF,IAAb,CAAkBlB,CAAC,EAAIA,CAAC,CAAC/B,WAAzB,CADa,CAEbyI,YAAY,CAACxF,IAAb,CAAkBlB,CAAC,EAAIA,CAAC,CAAC9B,SAAzB,CAFa,CAGbwI,YAAY,CAAC,CAAD,CAAZ,CAAgBvI,QAHH,CAAf,CAKAqI,SAAS,CAACzG,OAAV,CAAkBlB,KAAK,EAAIyH,kBAAkB,CAAC3H,GAAnB,CAAuBE,KAAvB,CAA8ByG,QAA9B,CAA3B,EACA,MAAOA,CAAAA,QACR,CATuB,CAAR,CAAhB,CAWA,IAAK,KAAMkB,CAAAA,SAAX,GAAwBf,CAAAA,CAAxB,CAA2B,CACzB,IAAK,KAAMkB,CAAAA,QAAX,GAAuBH,CAAAA,SAAvB,CAAkC,CAChC,IAAK,KAAMxF,CAAAA,MAAX,GAAqB,MAAK7C,QAA1B,CAAoC,CAClC,IAAK,KAAMqH,CAAAA,SAAX,GAAwBmB,CAAAA,QAAQ,CAACzH,YAAT,CAAsB8B,MAAtB,CAAxB,CAAuD,CACrD,GAAI,CAACsF,kBAAkB,CAACxH,GAAnB,CAAuB6H,QAAvB,EAAkCvI,cAAlC,CAAiDU,GAAjD,CAAqDkC,MAArD,EAA8D,CAA9D,CAAD,EAAsEsF,kBAAkB,CAACxH,GAAnB,CAAuB6H,QAAvB,EAAkCvI,cAAlC,CAAiDU,GAAjD,CAAqDkC,MAArD,EAA8D,CAA9D,EAAiEhD,IAAjE,EAAyEsI,kBAAkB,CAACxH,GAAnB,CAAuB0G,SAAvB,EAAmCxH,IAAtL,CACEsI,kBAAkB,CAACxH,GAAnB,CAAuB6H,QAAvB,EAAkC/H,aAAlC,CAAgDoC,MAAhD,CAAwDsF,kBAAkB,CAACxH,GAAnB,CAAuB0G,SAAvB,CAAxD,CACH,CACF,CACF,CACF,CAED,MAAO,IAAIpG,CAAAA,SAAJ,CAAcmH,SAAd,CACR,CA3S6C","sourcesContent":["import { strict } from \"assert\";\r\n\r\nexport class State {\r\n  isAccepting: boolean;\r\n  isInitial: boolean;\r\n  alphabet: string[];\r\n  outTransitions: Map<string, State[]>;\r\n  inTransitions: Map<string, State[]>;\r\n  successors: Set<State>;\r\n  predecessor: Set<State>;\r\n  name: string;\r\n\r\n  constructor(name: string, isAccepting: boolean, isInitial: boolean, alphabet: string[]) {\r\n    this.name = name;\r\n    this.isAccepting = isAccepting;\r\n    this.isInitial = isInitial;\r\n    this.alphabet = alphabet;\r\n    this.outTransitions = new Map();\r\n    this.inTransitions = new Map();\r\n    this.successors = new Set();\r\n    this.predecessor = new Set();\r\n    for (const symbol of alphabet) {\r\n      this.outTransitions.set(symbol, []);\r\n      this.inTransitions.set(symbol, []);\r\n    }\r\n  }\r\n\r\n  addTransition(symbol: string, state: State) {\r\n    if (this.outTransitions.get(symbol)!.includes(state)) return\r\n    this.outTransitions.get(symbol)!.push(state);\r\n    this.successors.add(state);\r\n    state.predecessor.add(this);\r\n    state.inTransitions.get(symbol)!.push(this);\r\n  }\r\n\r\n  getSuccessor(symbol: string) {\r\n    return this.outTransitions.get(symbol)!\r\n  }\r\n\r\n  getPredecessor(symbol: string) {\r\n    return this.inTransitions.get(symbol)!\r\n  }\r\n}\r\n\r\nexport interface AutomatonJson {\r\n  states: Map<string, State>;\r\n  initialStates: State[];\r\n  acceptingStates: State[];\r\n  alphabet: string[];\r\n};\r\n\r\nexport class Automaton implements AutomatonJson {\r\n  states: Map<string, State>;\r\n  initialStates: State[];\r\n  acceptingStates: State[];\r\n  allStates: State[];\r\n  alphabet: string[];\r\n  currentStates: State[];\r\n  states_rename: Map<string, string>;\r\n\r\n  constructor(stateList: Set<State>) {\r\n    this.allStates = Array.from(stateList);\r\n    this.initialStates = this.allStates.filter(s => s.isInitial);\r\n    this.acceptingStates = this.allStates.filter(s => s.isAccepting);\r\n    this.currentStates = this.initialStates;\r\n    this.alphabet = this.initialStates[0].alphabet;\r\n    this.states = new Map();\r\n    stateList.forEach(e => this.states.set(e.name, e));\r\n    this.states_rename = new Map();\r\n    this.set_state_rename()\r\n  }\r\n\r\n  set_state_rename() {\r\n    let counter_init = [0, this.initialStates.length, this.states.size - this.acceptingStates.length + 1];\r\n    for (const [_name, state] of this.states) {\r\n      if (this.initialStates.includes(state)) {\r\n        this.states_rename.set(state.name, \"q\" + counter_init[0]++)\r\n      } else if (this.acceptingStates.includes(state)) {\r\n        this.states_rename.set(state.name, \"q\" + counter_init[2]++)\r\n      } else {\r\n        this.states_rename.set(state.name, \"q\" + counter_init[1]++)\r\n      }\r\n    }\r\n  }\r\n\r\n  next_step(next_char: string) {\r\n    let newCurrentState: State[] = []\r\n    this.currentStates.forEach(cs => {\r\n      let nextStates = cs.outTransitions.get(next_char)!;\r\n      nextStates.forEach(nextState => {\r\n        if (!newCurrentState.includes(nextState)) {\r\n          newCurrentState.push(nextState)\r\n        }\r\n      })\r\n    })\r\n    this.currentStates = newCurrentState;\r\n  }\r\n\r\n  accept_word(word: string): boolean {\r\n    this.restart()\r\n    Array.from(word).forEach(\r\n      letter => this.next_step(letter)\r\n    )\r\n    let is_accepted = this.acceptingStates.some(e => this.currentStates.includes(e));\r\n    this.restart()\r\n    return is_accepted;\r\n  }\r\n\r\n\r\n  accept_word_nfa(word: string): boolean {\r\n    if (word.length == 0)\r\n      return this.initialStates.some(e => e.isAccepting);\r\n    let nextStates: Set<State> = new Set(this.initialStates);\r\n    for (let index = 0; index < word.length && nextStates.size > 0; index++) {\r\n      let nextStates2: Set<State> = new Set();\r\n      const symbol = word[index];\r\n      for (const state of nextStates) {\r\n        for (const nextState of this.findTransition(state, symbol)) {\r\n          nextStates2.add(nextState)\r\n          if (index == word.length - 1 && nextState.isAccepting)\r\n            return true\r\n        }\r\n        // Array.from(this.findTransition(state, symbol)).forEach(e => nextStates2.add(e))\r\n      }\r\n      nextStates = nextStates2;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  findTransition(state: State, symbol: string) {\r\n    return this.states.get(state.name)!.outTransitions.get(symbol)!\r\n  }\r\n\r\n  restart() {\r\n    this.currentStates = this.initialStates;\r\n  }\r\n\r\n  /** GRAPHIC PART */\r\n\r\n  draw_next_step(next_char: string) {\r\n    this.color_node(false);\r\n    this.next_step(next_char);\r\n    this.color_node(true);\r\n  }\r\n\r\n  initiate_graph() {\r\n    let automatonHTML = $(\"#automaton-mermaid\")[0];\r\n    automatonHTML.removeAttribute('data-processed')\r\n    automatonHTML.innerHTML = this.matrix_to_mermaid();\r\n\r\n    // @ts-ignore\r\n    mermaid.init($(\".mermaid\"));\r\n\r\n    // Mark end nodes\r\n    this.acceptingStates.forEach(n => {\r\n      let circle = this.get_current_graph_node(n) as HTMLElement;\r\n      circle.style.strokeWidth = \"1.1\";\r\n      circle.style.stroke = \"black\"\r\n      let smaller_circle = circle.cloneNode() as HTMLElement;\r\n      // @ts-ignore\r\n      smaller_circle.attributes['r'].value -= 4\r\n      circle.parentNode!.insertBefore(smaller_circle, circle.nextSibling)\r\n    });\r\n\r\n    // Mark current node = initial state\r\n    this.color_node(true);\r\n    $(\".mermaid\")[0].after($(\".mermaidTooltip\")[0])\r\n    $('svg')[0].style.height = 'auto'\r\n  }\r\n\r\n  get_current_graph_node(node: State) {\r\n    return Array.from($(\".node\")).find(e => e.id.split(\"-\")[1] == node.name)!.firstChild!;\r\n  }\r\n\r\n  matrix_to_mermaid(): string {\r\n    let mermaidTxt = \"flowchart LR\\n\";\r\n    mermaidTxt = mermaidTxt.concat(\"subgraph Automaton\\ndirection LR\\n\")\r\n    // res = res.concat(\"\\n\" + this.create_entering_arrow() + \"\\n\");\r\n    let triples: { [id: string]: string[] } = {}\r\n    for (const [name, state] of this.states) {\r\n      for (let j = 0; j < this.alphabet.length; j++) {\r\n        for (const nextState of this.findTransition(state, this.alphabet[j])) {\r\n          let stateA_concat_stateB = name + '&' + nextState.name;\r\n          if (triples[stateA_concat_stateB]) {\r\n            triples[stateA_concat_stateB].push(this.alphabet[j])\r\n          } else {\r\n            triples[stateA_concat_stateB] = [this.alphabet[j]]\r\n          }\r\n        }\r\n      }\r\n    }\r\n    mermaidTxt = mermaidTxt.concat(Object.keys(triples).map(x => this.create_triple(x, triples[x].join(\",\"))).join(\"\\n\"));\r\n    // res = res.concat(\"\\nstyle START fill:#FFFFFF, stroke:#FFFFFF;\")\r\n    mermaidTxt += \"\\n\"\r\n    mermaidTxt += \"\\nsubgraph InitialStates\\n\";\r\n    mermaidTxt += this.initialStates.map(e => e.name).join(\"\\n\")\r\n    mermaidTxt += \"\\nend\"\r\n    mermaidTxt += \"\\n\"\r\n    mermaidTxt += \"end\\n\"\r\n    mermaidTxt = mermaidTxt.concat(this.acceptingStates.map(e => `style ${e.name} fill:#FFFF00, stroke:#FF00FF;\\n`).join(\"\"));\r\n    mermaidTxt += \"\\n\"\r\n    // Callback for tooltip on mouse over\r\n    mermaidTxt = mermaidTxt.concat(Array.from(this.states).map(([name, _]) => `click ${name} undnamefinedCallback \"${name}\";`).join(\"\\n\"))\r\n    // console.log(mermaidTxt);\r\n    return mermaidTxt;\r\n  }\r\n\r\n\r\n  color_node(toFill: boolean) {\r\n    this.currentStates.forEach(currentState => {\r\n      let current_circle = this.get_current_graph_node(currentState) as HTMLElement;\r\n      let next_circle = current_circle.nextSibling as HTMLElement;\r\n      if (toFill) {\r\n        next_circle.style.textDecoration = \"underline\";\r\n        if (this.acceptingStates.includes(currentState))\r\n          next_circle.style.fill = '#009879';\r\n        else current_circle.style.fill = '#009879';\r\n      } else {\r\n        if (this.acceptingStates.includes(currentState))\r\n          next_circle.removeAttribute('style');\r\n        else current_circle.removeAttribute('style');\r\n      }\r\n    })\r\n    // let currentNode = this.get_current_graph_node(this.currentState).parentElement as HTMLElement;\r\n    // let spanWithText = currentNode.getElementsByClassName(\"nodeLabel\")![0] as HTMLElement;\r\n    // if (toFill) {\r\n    //   spanWithText.style.textDecoration = \"underline\";\r\n    // } else {\r\n    //   spanWithText.removeAttribute('style');\r\n    // }\r\n  }\r\n\r\n  create_triple(states: string, transition: string): string {\r\n    let split = states.split(\"&\");\r\n    let A = split[0], B = split[1];\r\n    let A_rename = this.get_state_rename(A);\r\n    let B_rename = this.get_state_rename(B);\r\n    return `${A}((${A_rename})) -->| ${transition} | ${B}((${B_rename}))`;\r\n  }\r\n\r\n  create_entering_arrow(): string {\r\n    return `START[ ]--> ${this.initialStates}`\r\n  }\r\n\r\n  get_state_rename(name: string) {\r\n    return this.states_rename.get(name)!\r\n  }\r\n\r\n  state_number() {\r\n    return this.states.size;\r\n  }\r\n\r\n  transition_number() {\r\n    return Array.from(this.states).map(e => Array.from(e[1].outTransitions)).flat().reduce((a, b) => a + b[1].length, 0)\r\n  }\r\n\r\n\r\n  /**\r\n   * Usage of Filling table algorithm for Automaton Minimisation\r\n   * The automaton should be in DFA form else the algorithm won't work\r\n   */\r\n  minimize() {\r\n\r\n    let stateList: State[] = [this.initialStates[0]];\r\n\r\n    // BFS to remove not reachable node from initial state\r\n    let toExplore = [this.initialStates[0]]\r\n    while (toExplore.length > 0) {\r\n      let newState = toExplore.shift()!\r\n      for (const successor of newState.successors) {\r\n        if (!stateList.includes(successor)) {\r\n          toExplore.push(successor)\r\n          stateList.push(successor)\r\n        }\r\n      }\r\n    }\r\n\r\n    let P: Set<State>[] = [new Set(), new Set()]; // P := {F, Q \\ F}\r\n    stateList.forEach(s => (s.isAccepting ? P[0] : P[1]).add(s))\r\n    P = P.filter(p => p.size > 0)\r\n\r\n    let pLength = () => P.reduce((a, p) => a + p.size, 0)\r\n\r\n    let W: Set<State>[] = Array.from(P) // W := {F, Q \\ F}\r\n    while (W.length > 0) {\r\n      let A = W.shift()!\r\n      for (const letter of this.alphabet) {\r\n        // X = the set of states for which a transition on letter leads to a state in A\r\n        let X: Set<State> = new Set()\r\n        A.forEach(e => {\r\n          let succ = e.inTransitions.get(letter)\r\n          if (succ) succ.forEach(s => X.add(s))\r\n        })\r\n\r\n        // let S1 = X ∩ Y and S2 = Y \\ X and S3 = X \\ Y and Y in P\r\n        let Y = P.map(p => {\r\n          let S1: Set<State> = new Set(),\r\n            S2: Set<State> = new Set();\r\n          for (const state of p) {\r\n            if (X.has(state)) S1.add(state)\r\n            else S2.add(state)\r\n          }\r\n          return { y: p, S1: S1, S2: S2 }\r\n        }).filter(({ S1, S2 }) => S1.size > 0 && S2.size > 0)\r\n        for (const { y, S1, S2 } of Y) {\r\n          // replace Y in P by the two sets X ∩ Y and Y \\ X\r\n          P.splice(P.indexOf(y), 1)\r\n          P.push(S1)\r\n          P.push(S2)\r\n          if (pLength() != stateList.length) throw `Wanted ${stateList.length} had ${pLength()}`\r\n          if (W.includes(y)) {\r\n            W.splice(W.indexOf(y), 1)\r\n            W.push(S1)\r\n            W.push(S2)\r\n          } else {\r\n            if (S1.size <= S2.size) {\r\n              W.push(S1)\r\n            } else {\r\n              W.push(S2)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    let oldStateToNewState: Map<State, State> = new Map();\r\n\r\n    let newStates = new Set(Array.from(P).filter(partition => partition.size > 0).map((partition, pos) => {\r\n      let representant = Array.from(partition)\r\n      let newState = new State(pos + \"\",\r\n        representant.some(e => e.isAccepting),\r\n        representant.some(e => e.isInitial),\r\n        representant[0].alphabet\r\n      )\r\n      partition.forEach(state => oldStateToNewState.set(state, newState))\r\n      return newState;\r\n    }));\r\n\r\n    for (const partition of P) {\r\n      for (const oldState of partition) {\r\n        for (const letter of this.alphabet) {\r\n          for (const successor of oldState.getSuccessor(letter)) {\r\n            if (!oldStateToNewState.get(oldState)!.outTransitions.get(letter)![0] || (oldStateToNewState.get(oldState)!.outTransitions.get(letter)![0].name != oldStateToNewState.get(successor)!.name))\r\n              oldStateToNewState.get(oldState)!.addTransition(letter, oldStateToNewState.get(successor)!)\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return new Automaton(newStates)\r\n  }\r\n}"],"file":"Automaton.js"}