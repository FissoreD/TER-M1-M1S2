{"version":3,"sources":["../../src/automaton/Automaton.ts"],"names":["State","constructor","name","isAccepting","isInitial","alphabet","Array","from","outTransitions","Map","inTransitions","successors","Set","predecessor","symbol","set","addTransition","state","get","includes","push","add","getSuccessor","getPredecessor","bottom","Automaton","stateList","complete","allStates","initialStates","filter","s","acceptingStates","currentStates","states","forEach","e","states_rename","set_state_rename","values","next","value","findTransition","length","counter_init","size","_name","next_step","next_char","newCurrentState","cs","nextStates","nextState","accept_word","word","restart","letter","is_accepted","some","accept_word_nfa","index","nextStates2","draw_next_step","color_node","initiate_graph","document","getElementById","classList","remove","automatonHTML","$","removeAttribute","innerHTML","matrix_to_mermaid","mermaid","init","n","circle","get_current_graph_node","style","strokeWidth","stroke","smaller_circle","cloneNode","attributes","fill","parentNode","insertBefore","nextSibling","after","height","node","find","id","split","firstChild","mermaidTxt","concat","triples","j","stateA_concat_stateB","Object","keys","map","x","create_triple","join","_","console","log","automatonToDot","txt","transition","A","B","A_rename","get_state_rename","B_rename","rename","d3","select","graphviz","renderDot","toFill","currentState","current_circle","next_circle","textDecoration","create_entering_arrow","state_number","transition_number","flat","reduce","a","b","minimize","toExplore","newState","shift","successor","P","p","pLength","W","X","succ","Y","S1","S2","has","y","splice","indexOf","oldStateToNewState","newStates","partition","pos","representant","oldState","strToAutomaton","content","SYMBOL_LIST","sContent","IN_INITIAL","IN_TRANSITION","IN_ACCEPTING","statePhase","initalState","transitions","statesName","alphabetSet","line","stateName","substring","match","current","alphabetOneLetter","stateMap","stateSet","automaton","toString"],"mappings":"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","sourcesContent":["export class State {\r\n  isAccepting: boolean;\r\n  isInitial: boolean;\r\n  alphabet: string[];\r\n  outTransitions: Map<string, State[]>;\r\n  inTransitions: Map<string, State[]>;\r\n  successors: Set<State>;\r\n  predecessor: Set<State>;\r\n  name: string;\r\n\r\n  constructor(name: string, isAccepting: boolean, isInitial: boolean, alphabet: string[] | string) {\r\n    this.name = name;\r\n    this.isAccepting = isAccepting;\r\n    this.isInitial = isInitial;\r\n    this.alphabet = Array.from(alphabet);\r\n    this.outTransitions = new Map();\r\n    this.inTransitions = new Map();\r\n    this.successors = new Set();\r\n    this.predecessor = new Set();\r\n    for (const symbol of alphabet) {\r\n      this.outTransitions.set(symbol, []);\r\n      this.inTransitions.set(symbol, []);\r\n    }\r\n  }\r\n\r\n  addTransition(symbol: string, state: State) {\r\n    if (this.outTransitions.get(symbol)!.includes(state)) return\r\n    this.outTransitions.get(symbol)!.push(state);\r\n    this.successors.add(state);\r\n    state.predecessor.add(this);\r\n    state.inTransitions.get(symbol)!.push(this);\r\n  }\r\n\r\n  getSuccessor(symbol: string) {\r\n    return this.outTransitions.get(symbol)!\r\n  }\r\n\r\n  getPredecessor(symbol: string) {\r\n    return this.inTransitions.get(symbol)!\r\n  }\r\n\r\n  static bottom(alphabet: string[]) {\r\n    return new State(\"bottom\", false, false, alphabet)\r\n  }\r\n}\r\n\r\nexport interface AutomatonJson {\r\n  states: Map<string, State>;\r\n  initialStates: State[];\r\n  acceptingStates: State[];\r\n  alphabet: string[];\r\n};\r\n\r\nexport class Automaton implements AutomatonJson {\r\n  states: Map<string, State>;\r\n  initialStates: State[];\r\n  acceptingStates: State[];\r\n  allStates: State[];\r\n  alphabet: string[];\r\n  currentStates: State[];\r\n  states_rename: Map<string, string>;\r\n\r\n  constructor(stateList: Set<State> | State[]) {\r\n    stateList = new Set(stateList);\r\n    this.complete(stateList)\r\n    this.allStates = Array.from(stateList);\r\n    this.initialStates = this.allStates.filter(s => s.isInitial);\r\n    this.acceptingStates = this.allStates.filter(s => s.isAccepting);\r\n    this.currentStates = this.initialStates;\r\n    this.alphabet = this.initialStates[0].alphabet;\r\n    this.states = new Map();\r\n    stateList.forEach(e => this.states.set(e.name, e));\r\n    this.states_rename = new Map();\r\n    this.set_state_rename()\r\n  }\r\n\r\n  complete(stateList: Set<State>) {\r\n    let alphabet = stateList.values().next().value.alphabet\r\n    let bottom = State.bottom(alphabet)\r\n    for (const state of stateList) {\r\n      for (const symbol of alphabet) {\r\n        if (this.findTransition(state, symbol).length == 0) {\r\n          stateList.add(bottom);\r\n          state.addTransition(symbol, bottom);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  set_state_rename() {\r\n    let counter_init = [0, this.initialStates.length, this.states.size - this.acceptingStates.length + 1];\r\n    for (const [_name, state] of this.states) {\r\n      if (this.initialStates.includes(state)) {\r\n        this.states_rename.set(state.name, \"q\" + counter_init[0]++)\r\n      } else if (this.acceptingStates.includes(state)) {\r\n        this.states_rename.set(state.name, \"q\" + counter_init[2]++)\r\n      } else {\r\n        this.states_rename.set(state.name, \"q\" + counter_init[1]++)\r\n      }\r\n    }\r\n  }\r\n\r\n  next_step(next_char: string) {\r\n    let newCurrentState: State[] = []\r\n    this.currentStates.forEach(cs => {\r\n      let nextStates = cs.outTransitions.get(next_char)!;\r\n      nextStates.forEach(nextState => {\r\n        if (!newCurrentState.includes(nextState)) {\r\n          newCurrentState.push(nextState)\r\n        }\r\n      })\r\n    })\r\n    this.currentStates = newCurrentState;\r\n  }\r\n\r\n  accept_word(word: string): boolean {\r\n    this.restart()\r\n    Array.from(word).forEach(\r\n      letter => this.next_step(letter)\r\n    )\r\n    let is_accepted = this.acceptingStates.some(e => this.currentStates.includes(e));\r\n    this.restart()\r\n    return is_accepted;\r\n  }\r\n\r\n\r\n  accept_word_nfa(word: string): boolean {\r\n    if (word.length == 0)\r\n      return this.initialStates.some(e => e.isAccepting);\r\n    let nextStates: Set<State> = new Set(this.initialStates);\r\n    for (let index = 0; index < word.length && nextStates.size > 0; index++) {\r\n      let nextStates2: Set<State> = new Set();\r\n      const symbol = word[index];\r\n      for (const state of nextStates) {\r\n        for (const nextState of this.findTransition(state, symbol)) {\r\n          nextStates2.add(nextState)\r\n          if (index == word.length - 1 && nextState.isAccepting)\r\n            return true\r\n        }\r\n        // Array.from(this.findTransition(state, symbol)).forEach(e => nextStates2.add(e))\r\n      }\r\n      nextStates = nextStates2;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  findTransition(state: State, symbol: string) {\r\n    return state!.outTransitions.get(symbol)!\r\n  }\r\n\r\n  restart() {\r\n    this.currentStates = this.initialStates;\r\n  }\r\n\r\n  /** GRAPHIC PART */\r\n\r\n  draw_next_step(next_char: string) {\r\n    this.color_node(false);\r\n    this.next_step(next_char);\r\n    this.color_node(true);\r\n  }\r\n\r\n  initiate_graph() {\r\n    document.getElementById('automatonHead')?.classList.remove('up');\r\n    let automatonHTML = $(\"#automaton-mermaid\")[0];\r\n    automatonHTML.removeAttribute('data-processed')\r\n    automatonHTML.innerHTML = this.matrix_to_mermaid();\r\n\r\n    // @ts-ignore\r\n    mermaid.init($(\".mermaid\"));\r\n\r\n    // Mark end nodes\r\n    this.acceptingStates.forEach(n => {\r\n      let circle = this.get_current_graph_node(n) as HTMLElement;\r\n      circle.style.strokeWidth = \"1.1\";\r\n      circle.style.stroke = \"black\"\r\n      let smaller_circle = circle.cloneNode() as HTMLElement;\r\n      // @ts-ignore\r\n      smaller_circle.attributes['r'].value -= 4;\r\n      smaller_circle.style.fill = \"#ECECFF\"\r\n      circle.parentNode!.insertBefore(smaller_circle, circle.nextSibling);\r\n    });\r\n\r\n    // Mark current node = initial state\r\n    this.color_node(true);\r\n    $(\".mermaid\")[0].after($(\".mermaidTooltip\")[0]);\r\n    $('svg')[0].style.height = 'auto';\r\n  }\r\n\r\n  get_current_graph_node(node: State) {\r\n    return Array.from($(\".node\")).find(e => e.id.split(\"-\")[1] == node.name)!.firstChild!;\r\n  }\r\n\r\n  matrix_to_mermaid(): string {\r\n    let mermaidTxt = \"flowchart LR\\n\";\r\n    mermaidTxt = mermaidTxt.concat(\"\\ndirection LR\\n\")\r\n    // res = res.concat(\"\\n\" + this.create_entering_arrow() + \"\\n\");\r\n    let triples: { [id: string]: string[] } = {}\r\n    for (const [name, state] of this.states) {\r\n      for (let j = 0; j < this.alphabet.length; j++) {\r\n        for (const nextState of this.findTransition(state, this.alphabet[j])) {\r\n          let stateA_concat_stateB = name + '&' + nextState.name;\r\n          if (triples[stateA_concat_stateB]) {\r\n            triples[stateA_concat_stateB].push(this.alphabet[j])\r\n          } else {\r\n            triples[stateA_concat_stateB] = [this.alphabet[j]]\r\n          }\r\n        }\r\n      }\r\n    }\r\n    mermaidTxt = mermaidTxt.concat(Object.keys(triples).map(x => this.create_triple(x, triples[x].join(\",\"))).join(\"\\n\"));\r\n    // res = res.concat(\"\\nstyle START fill:#FFFFFF, stroke:#FFFFFF;\")\r\n    mermaidTxt += \"\\n\"\r\n    mermaidTxt += \"\\nsubgraph InitialStates\\n\";\r\n    mermaidTxt += this.initialStates.map(e => e.name).join(\"\\n\")\r\n    mermaidTxt += \"\\nend\"\r\n    mermaidTxt += \"\\n\"\r\n    mermaidTxt = mermaidTxt.concat(this.acceptingStates.map(e => `style ${e.name} fill:#FFFF00, stroke:#FF00FF;\\n`).join(\"\"));\r\n    mermaidTxt += \"\\n\"\r\n    // Callback for tooltip on mouse over\r\n    mermaidTxt = mermaidTxt.concat(Array.from(this.states).map(([name, _]) => `click ${name} undnamefinedCallback \"${name}\";`).join(\"\\n\"))\r\n    console.log(mermaidTxt);\r\n\r\n    this.automatonToDot()\r\n    return mermaidTxt;\r\n  }\r\n\r\n  automatonToDot() {\r\n    let txt = \"digraph {rankdir = LR\\n\"\r\n    let triples: { [id: string]: string[] } = {}\r\n    for (const [name, state] of this.states) {\r\n      for (let j = 0; j < this.alphabet.length; j++) {\r\n        for (const nextState of this.findTransition(state, this.alphabet[j])) {\r\n          let stateA_concat_stateB = name + '&' + nextState.name;\r\n          if (triples[stateA_concat_stateB]) {\r\n            triples[stateA_concat_stateB].push(this.alphabet[j])\r\n          } else {\r\n            triples[stateA_concat_stateB] = [this.alphabet[j]]\r\n          }\r\n        }\r\n      }\r\n    }\r\n    txt = txt.concat(Object.keys(triples).map(x => {\r\n      let [states, transition] = [x, triples[x].join(\",\")]\r\n      let split = states.split(\"&\");\r\n      let A = split[0], B = split[1];\r\n      let A_rename = this.get_state_rename(A);\r\n      let B_rename = this.get_state_rename(B);\r\n      return `${A_rename} -> ${B_rename} [label = \"${transition}\"]\\n${A_rename} [shape=circle]`\r\n    }).join(\"\\n\"));\r\n\r\n    this.initialStates.forEach(s => {\r\n      let rename = this.get_state_rename(s.name);\r\n      txt = txt.concat(`\\nI${rename} [label=\"\", style=invis, width=0]\\nI${rename} -> ${rename}`);\r\n    });\r\n\r\n    this.acceptingStates.forEach(s => {\r\n      let rename = this.get_state_rename(s.name);\r\n      txt = txt.concat(`\\n${rename} [shape=doublecircle]`)\r\n      console.log(\"here\");\r\n\r\n    })\r\n\r\n    txt += \"\\n}\"\r\n    try {\r\n      //@ts-ignore\r\n      d3.select(\"#graph\").graphviz()\r\n        .renderDot(txt)\r\n    } catch { }\r\n    return txt\r\n  }\r\n\r\n\r\n  color_node(toFill: boolean) {\r\n    this.currentStates.forEach(currentState => {\r\n      let current_circle = this.get_current_graph_node(currentState) as HTMLElement;\r\n      let next_circle = current_circle.nextSibling as HTMLElement;\r\n      if (toFill) {\r\n        next_circle.style.textDecoration = \"underline\";\r\n        if (this.acceptingStates.includes(currentState))\r\n          next_circle.style.fill = '#009879';\r\n        else current_circle.style.fill = '#009879';\r\n      } else {\r\n        if (this.acceptingStates.includes(currentState))\r\n          next_circle.removeAttribute('style');\r\n        else current_circle.removeAttribute('style');\r\n      }\r\n    })\r\n    // let currentNode = this.get_current_graph_node(this.currentState).parentElement as HTMLElement;\r\n    // let spanWithText = currentNode.getElementsByClassName(\"nodeLabel\")![0] as HTMLElement;\r\n    // if (toFill) {\r\n    //   spanWithText.style.textDecoration = \"underline\";\r\n    // } else {\r\n    //   spanWithText.removeAttribute('style');\r\n    // }\r\n  }\r\n\r\n  create_triple(states: string, transition: string): string {\r\n    let split = states.split(\"&\");\r\n    let A = split[0], B = split[1];\r\n    let A_rename = this.get_state_rename(A);\r\n    let B_rename = this.get_state_rename(B);\r\n    return `${A}((${A_rename})) -->| ${transition} | ${B}((${B_rename}))`;\r\n  }\r\n\r\n  create_entering_arrow(): string {\r\n    return `START[ ]--> ${this.initialStates}`\r\n  }\r\n\r\n  get_state_rename(name: string) {\r\n    return this.states_rename.get(name)!\r\n  }\r\n\r\n  state_number() {\r\n    return this.states.size;\r\n  }\r\n\r\n  transition_number() {\r\n    return Array.from(this.states).map(e => Array.from(e[1].outTransitions)).flat().reduce((a, b) => a + b[1].length, 0)\r\n  }\r\n\r\n\r\n  /**\r\n   * Usage of Filling table algorithm for Automaton Minimisation\r\n   * The automaton should be in DFA form else the algorithm won't work\r\n   */\r\n  minimize() {\r\n\r\n    let stateList: State[] = [this.initialStates[0]];\r\n\r\n    // BFS to remove not reachable node from initial state\r\n    let toExplore = [this.initialStates[0]]\r\n    while (toExplore.length > 0) {\r\n      let newState = toExplore.shift()!\r\n      for (const successor of newState.successors) {\r\n        if (!stateList.includes(successor)) {\r\n          toExplore.push(successor)\r\n          stateList.push(successor)\r\n        }\r\n      }\r\n    }\r\n\r\n    let P: Set<State>[] = [new Set(), new Set()]; // P := {F, Q \\ F}\r\n    stateList.forEach(s => (s.isAccepting ? P[0] : P[1]).add(s))\r\n    P = P.filter(p => p.size > 0)\r\n\r\n    let pLength = () => P.reduce((a, p) => a + p.size, 0)\r\n\r\n    let W: Set<State>[] = Array.from(P) // W := {F, Q \\ F}\r\n    while (W.length > 0) {\r\n      let A = W.shift()!\r\n      for (const letter of this.alphabet) {\r\n        // X = the set of states for which a transition on letter leads to a state in A\r\n        let X: Set<State> = new Set()\r\n        A.forEach(e => {\r\n          let succ = e.inTransitions.get(letter)\r\n          if (succ) succ.forEach(s => X.add(s))\r\n        })\r\n\r\n        // let S1 = X ∩ Y and S2 = Y \\ X and S3 = X \\ Y and Y in P\r\n        let Y = P.map(p => {\r\n          let S1: Set<State> = new Set(),\r\n            S2: Set<State> = new Set();\r\n          for (const state of p) {\r\n            if (X.has(state)) S1.add(state)\r\n            else S2.add(state)\r\n          }\r\n          return { y: p, S1: S1, S2: S2 }\r\n        }).filter(({ S1, S2 }) => S1.size > 0 && S2.size > 0)\r\n        for (const { y, S1, S2 } of Y) {\r\n          // replace Y in P by the two sets X ∩ Y and Y \\ X\r\n          P.splice(P.indexOf(y), 1)\r\n          P.push(S1)\r\n          P.push(S2)\r\n          if (pLength() != stateList.length) throw `Wanted ${stateList.length} had ${pLength()}`\r\n          if (W.includes(y)) {\r\n            W.splice(W.indexOf(y), 1)\r\n            W.push(S1)\r\n            W.push(S2)\r\n          } else {\r\n            if (S1.size <= S2.size) {\r\n              W.push(S1)\r\n            } else {\r\n              W.push(S2)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    let oldStateToNewState: Map<State, State> = new Map();\r\n\r\n    let newStates = new Set(Array.from(P).filter(partition => partition.size > 0).map((partition, pos) => {\r\n      let representant = Array.from(partition)\r\n      let newState = new State(pos + \"\",\r\n        representant.some(e => e.isAccepting),\r\n        representant.some(e => e.isInitial),\r\n        representant[0].alphabet\r\n      )\r\n      partition.forEach(state => oldStateToNewState.set(state, newState))\r\n      return newState;\r\n    }));\r\n\r\n    for (const partition of P) {\r\n      for (const oldState of partition) {\r\n        for (const letter of this.alphabet) {\r\n          for (const successor of oldState.getSuccessor(letter)) {\r\n            if (!oldStateToNewState.get(oldState)!.outTransitions.get(letter)![0] || (oldStateToNewState.get(oldState)!.outTransitions.get(letter)![0].name != oldStateToNewState.get(successor)!.name))\r\n              oldStateToNewState.get(oldState)!.addTransition(letter, oldStateToNewState.get(successor)!)\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return new Automaton(newStates)\r\n  }\r\n\r\n  static strToAutomaton(content: String) {\r\n    const SYMBOL_LIST = Array.from(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\r\n\r\n    let sContent = content.split(\"\\n\");\r\n    let IN_INITIAL = 0, IN_TRANSITION = 1, IN_ACCEPTING = 2;\r\n    let statePhase = IN_INITIAL;\r\n    const initalState: string[] = [], acceptingStates: string[] = [],\r\n      transitions: { current: string, symbol: string, next: string }[] = [],\r\n      statesName: Set<string> = new Set(), alphabetSet: Set<string> = new Set();\r\n    for (const line of sContent) {\r\n      if (!line.includes(\"-\")) {\r\n        let stateName = line.substring(line.indexOf('[') + 1, line.indexOf(']'));\r\n        statesName.add(stateName)\r\n        if (statePhase == IN_INITIAL) {\r\n          initalState.push(stateName);\r\n        } else {\r\n          statePhase = IN_ACCEPTING;\r\n          acceptingStates.push(stateName)\r\n        }\r\n      } else if (line.match(/[a-zA-Z0-9]+/)) {\r\n        statePhase = IN_TRANSITION;\r\n        let split = line.match(/[A-Za-z0-9]+/g)!;\r\n        let current = split[1];\r\n        let symbol = split[0];\r\n        let next = split[2];\r\n        transitions.push({\r\n          current: current,\r\n          next: next,\r\n          symbol: symbol\r\n        })\r\n        statesName.add(current);\r\n        statesName.add(next);\r\n        alphabetSet.add(symbol);\r\n      }\r\n    }\r\n    let alphabet = Array.from(alphabetSet);\r\n    let alphabetOneLetter = SYMBOL_LIST.splice(0, alphabet.length)\r\n    let stateMap: Map<string, State> = new Map();\r\n    let stateSet: Set<State> = new Set();\r\n    statesName.forEach(e => {\r\n      let state = new State(e, acceptingStates.includes(e), initalState.includes(e), alphabetOneLetter)\r\n      stateMap.set(e, state);\r\n      stateSet.add(state)\r\n    });\r\n    transitions.forEach(({ current, symbol, next }) =>\r\n      stateMap.get(current)!.addTransition(\r\n        alphabetOneLetter[alphabet.indexOf(symbol)],\r\n        stateMap.get(next)!)\r\n    )\r\n\r\n    let automaton = new Automaton(stateSet);\r\n    return automaton;\r\n\r\n  }\r\n\r\n  toString() {\r\n    let txt: String[] = [];\r\n    this.initialStates.forEach(e => txt.push('[' + e.name + \"]\"));\r\n    this.allStates.forEach(state =>\r\n      state.outTransitions.forEach((nextStates, symbol) => nextStates.forEach(next => txt.push(`${symbol},[${state.name}]->[${next.name}]`))));\r\n    this.acceptingStates.forEach(e => txt.push(\"[\" + e.name + \"]\"));\r\n    return txt.join('\\n');\r\n  }\r\n}"],"file":"Automaton.js"}