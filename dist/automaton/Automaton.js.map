{"version":3,"sources":["../../src/automaton/Automaton.ts"],"names":["State","constructor","name","isAccepting","isInitial","alphabet","outTransitions","Map","inTransitions","successors","Set","predecessor","symbol","set","addTransition","state","get","includes","push","add","getSuccessor","getPredecessor","bottom","Automaton","stateList","complete","allStates","Array","from","initialStates","filter","s","acceptingStates","currentStates","states","forEach","e","states_rename","set_state_rename","values","next","value","findTransition","length","counter_init","size","_name","next_step","next_char","newCurrentState","cs","nextStates","nextState","accept_word","word","restart","letter","is_accepted","some","accept_word_nfa","index","nextStates2","draw_next_step","color_node","initiate_graph","automatonHTML","$","removeAttribute","innerHTML","matrix_to_mermaid","mermaid","init","n","circle","get_current_graph_node","style","strokeWidth","stroke","smaller_circle","cloneNode","attributes","parentNode","insertBefore","nextSibling","after","height","document","getElementById","classList","remove","node","find","id","split","firstChild","mermaidTxt","concat","triples","j","stateA_concat_stateB","Object","keys","map","x","create_triple","join","_","console","log","toFill","currentState","current_circle","next_circle","textDecoration","fill","transition","A","B","A_rename","get_state_rename","B_rename","create_entering_arrow","state_number","transition_number","flat","reduce","a","b","minimize","toExplore","newState","shift","successor","P","p","pLength","W","X","succ","Y","S1","S2","has","y","splice","indexOf","oldStateToNewState","newStates","partition","pos","representant","oldState"],"mappings":"AAAA,MAAO,MAAMA,CAAAA,KAAM,CAUjBC,WAAW,CAACC,IAAD,CAAeC,WAAf,CAAqCC,SAArC,CAAyDC,QAAzD,CAA6E,CACtF,KAAKH,IAAL,CAAYA,IAAZ,CACA,KAAKC,WAAL,CAAmBA,WAAnB,CACA,KAAKC,SAAL,CAAiBA,SAAjB,CACA,KAAKC,QAAL,CAAgBA,QAAhB,CACA,KAAKC,cAAL,CAAsB,GAAIC,CAAAA,GAA1B,CACA,KAAKC,aAAL,CAAqB,GAAID,CAAAA,GAAzB,CACA,KAAKE,UAAL,CAAkB,GAAIC,CAAAA,GAAtB,CACA,KAAKC,WAAL,CAAmB,GAAID,CAAAA,GAAvB,CACA,IAAK,KAAME,CAAAA,MAAX,GAAqBP,CAAAA,QAArB,CAA+B,CAC7B,KAAKC,cAAL,CAAoBO,GAApB,CAAwBD,MAAxB,CAAgC,EAAhC,EACA,KAAKJ,aAAL,CAAmBK,GAAnB,CAAuBD,MAAvB,CAA+B,EAA/B,CACD,CACF,CAEDE,aAAa,CAACF,MAAD,CAAiBG,KAAjB,CAA+B,CAC1C,GAAI,KAAKT,cAAL,CAAoBU,GAApB,CAAwBJ,MAAxB,EAAiCK,QAAjC,CAA0CF,KAA1C,CAAJ,CAAsD,OACtD,KAAKT,cAAL,CAAoBU,GAApB,CAAwBJ,MAAxB,EAAiCM,IAAjC,CAAsCH,KAAtC,EACA,KAAKN,UAAL,CAAgBU,GAAhB,CAAoBJ,KAApB,EACAA,KAAK,CAACJ,WAAN,CAAkBQ,GAAlB,CAAsB,IAAtB,EACAJ,KAAK,CAACP,aAAN,CAAoBQ,GAApB,CAAwBJ,MAAxB,EAAiCM,IAAjC,CAAsC,IAAtC,CACD,CAEDE,YAAY,CAACR,MAAD,CAAiB,CAC3B,MAAO,MAAKN,cAAL,CAAoBU,GAApB,CAAwBJ,MAAxB,CACR,CAEDS,cAAc,CAACT,MAAD,CAAiB,CAC7B,MAAO,MAAKJ,aAAL,CAAmBQ,GAAnB,CAAuBJ,MAAvB,CACR,CAEY,MAANU,CAAAA,MAAM,CAACjB,QAAD,CAAqB,CAChC,MAAO,IAAIL,CAAAA,KAAJ,CAAU,QAAV,CAAoB,KAApB,CAA2B,KAA3B,CAAkCK,QAAlC,CACR,CA3CgB,CAmDlB,CAED,MAAO,MAAMkB,CAAAA,SAAmC,CAS9CtB,WAAW,CAACuB,SAAD,CAAwB,CACjC,KAAKC,QAAL,CAAcD,SAAd,EACA,KAAKE,SAAL,CAAiBC,KAAK,CAACC,IAAN,CAAWJ,SAAX,CAAjB,CACA,KAAKK,aAAL,CAAqB,KAAKH,SAAL,CAAeI,MAAf,CAAsBC,CAAC,EAAIA,CAAC,CAAC3B,SAA7B,CAArB,CACA,KAAK4B,eAAL,CAAuB,KAAKN,SAAL,CAAeI,MAAf,CAAsBC,CAAC,EAAIA,CAAC,CAAC5B,WAA7B,CAAvB,CACA,KAAK8B,aAAL,CAAqB,KAAKJ,aAA1B,CACA,KAAKxB,QAAL,CAAgB,KAAKwB,aAAL,CAAmB,CAAnB,EAAsBxB,QAAtC,CACA,KAAK6B,MAAL,CAAc,GAAI3B,CAAAA,GAAlB,CACAiB,SAAS,CAACW,OAAV,CAAkBC,CAAC,EAAI,KAAKF,MAAL,CAAYrB,GAAZ,CAAgBuB,CAAC,CAAClC,IAAlB,CAAwBkC,CAAxB,CAAvB,EACA,KAAKC,aAAL,CAAqB,GAAI9B,CAAAA,GAAzB,CACA,KAAK+B,gBAAL,EACD,CAEDb,QAAQ,CAACD,SAAD,CAAwB,CAC9B,GAAInB,CAAAA,QAAQ,CAAGmB,SAAS,CAACe,MAAV,GAAmBC,IAAnB,GAA0BC,KAA1B,CAAgCpC,QAA/C,CACA,GAAIiB,CAAAA,MAAM,CAAGtB,KAAK,CAACsB,MAAN,CAAajB,QAAb,CAAb,CACA,IAAK,KAAMU,CAAAA,KAAX,GAAoBS,CAAAA,SAApB,CAA+B,CAC7B,IAAK,KAAMZ,CAAAA,MAAX,GAAqBP,CAAAA,QAArB,CAA+B,CAC7B,GAAI,KAAKqC,cAAL,CAAoB3B,KAApB,CAA2BH,MAA3B,EAAmC+B,MAAnC,EAA6C,CAAjD,CAAoD,CAClDnB,SAAS,CAACL,GAAV,CAAcG,MAAd,EACAP,KAAK,CAACD,aAAN,CAAoBF,MAApB,CAA4BU,MAA5B,CACD,CACF,CACF,CACF,CAEDgB,gBAAgB,EAAG,CACjB,GAAIM,CAAAA,YAAY,CAAG,CAAC,CAAD,CAAI,KAAKf,aAAL,CAAmBc,MAAvB,CAA+B,KAAKT,MAAL,CAAYW,IAAZ,CAAmB,KAAKb,eAAL,CAAqBW,MAAxC,CAAiD,CAAhF,CAAnB,CACA,IAAK,KAAM,CAACG,KAAD,CAAQ/B,KAAR,CAAX,EAA6B,MAAKmB,MAAlC,CAA0C,CACxC,GAAI,KAAKL,aAAL,CAAmBZ,QAAnB,CAA4BF,KAA5B,CAAJ,CAAwC,CACtC,KAAKsB,aAAL,CAAmBxB,GAAnB,CAAuBE,KAAK,CAACb,IAA7B,CAAmC,IAAM0C,YAAY,CAAC,CAAD,CAAZ,EAAzC,CACD,CAFD,IAEO,IAAI,KAAKZ,eAAL,CAAqBf,QAArB,CAA8BF,KAA9B,CAAJ,CAA0C,CAC/C,KAAKsB,aAAL,CAAmBxB,GAAnB,CAAuBE,KAAK,CAACb,IAA7B,CAAmC,IAAM0C,YAAY,CAAC,CAAD,CAAZ,EAAzC,CACD,CAFM,IAEA,CACL,KAAKP,aAAL,CAAmBxB,GAAnB,CAAuBE,KAAK,CAACb,IAA7B,CAAmC,IAAM0C,YAAY,CAAC,CAAD,CAAZ,EAAzC,CACD,CACF,CACF,CAEDG,SAAS,CAACC,SAAD,CAAoB,CAC3B,GAAIC,CAAAA,eAAwB,CAAG,EAA/B,CACA,KAAKhB,aAAL,CAAmBE,OAAnB,CAA2Be,EAAE,EAAI,CAC/B,GAAIC,CAAAA,UAAU,CAAGD,EAAE,CAAC5C,cAAH,CAAkBU,GAAlB,CAAsBgC,SAAtB,CAAjB,CACAG,UAAU,CAAChB,OAAX,CAAmBiB,SAAS,EAAI,CAC9B,GAAI,CAACH,eAAe,CAAChC,QAAhB,CAAyBmC,SAAzB,CAAL,CAA0C,CACxCH,eAAe,CAAC/B,IAAhB,CAAqBkC,SAArB,CACD,CACF,CAJD,CAKD,CAPD,EAQA,KAAKnB,aAAL,CAAqBgB,eACtB,CAEDI,WAAW,CAACC,IAAD,CAAwB,CACjC,KAAKC,OAAL,GACA5B,KAAK,CAACC,IAAN,CAAW0B,IAAX,EAAiBnB,OAAjB,CACEqB,MAAM,EAAI,KAAKT,SAAL,CAAeS,MAAf,CADZ,EAGA,GAAIC,CAAAA,WAAW,CAAG,KAAKzB,eAAL,CAAqB0B,IAArB,CAA0BtB,CAAC,EAAI,KAAKH,aAAL,CAAmBhB,QAAnB,CAA4BmB,CAA5B,CAA/B,CAAlB,CACA,KAAKmB,OAAL,GACA,MAAOE,CAAAA,WACR,CAGDE,eAAe,CAACL,IAAD,CAAwB,CACrC,GAAIA,IAAI,CAACX,MAAL,EAAe,CAAnB,CACE,MAAO,MAAKd,aAAL,CAAmB6B,IAAnB,CAAwBtB,CAAC,EAAIA,CAAC,CAACjC,WAA/B,CAAP,CACF,GAAIgD,CAAAA,UAAsB,CAAG,GAAIzC,CAAAA,GAAJ,CAAQ,KAAKmB,aAAb,CAA7B,CACA,IAAK,GAAI+B,CAAAA,KAAK,CAAG,CAAjB,CAAoBA,KAAK,CAAGN,IAAI,CAACX,MAAb,EAAuBQ,UAAU,CAACN,IAAX,CAAkB,CAA7D,CAAgEe,KAAK,EAArE,CAAyE,CACvE,GAAIC,CAAAA,WAAuB,CAAG,GAAInD,CAAAA,GAAlC,CACA,KAAME,CAAAA,MAAM,CAAG0C,IAAI,CAACM,KAAD,CAAnB,CACA,IAAK,KAAM7C,CAAAA,KAAX,GAAoBoC,CAAAA,UAApB,CAAgC,CAC9B,IAAK,KAAMC,CAAAA,SAAX,GAAwB,MAAKV,cAAL,CAAoB3B,KAApB,CAA2BH,MAA3B,CAAxB,CAA4D,CAC1DiD,WAAW,CAAC1C,GAAZ,CAAgBiC,SAAhB,EACA,GAAIQ,KAAK,EAAIN,IAAI,CAACX,MAAL,CAAc,CAAvB,EAA4BS,SAAS,CAACjD,WAA1C,CACE,MAAO,KACV,CAEF,CACDgD,UAAU,CAAGU,WACd,CACD,MAAO,MACR,CAEDnB,cAAc,CAAC3B,KAAD,CAAeH,MAAf,CAA+B,CAC3C,MAAOG,CAAAA,KAAK,CAAET,cAAP,CAAsBU,GAAtB,CAA0BJ,MAA1B,CACR,CAED2C,OAAO,EAAG,CACR,KAAKtB,aAAL,CAAqB,KAAKJ,aAC3B,CAIDiC,cAAc,CAACd,SAAD,CAAoB,CAChC,KAAKe,UAAL,CAAgB,KAAhB,EACA,KAAKhB,SAAL,CAAeC,SAAf,EACA,KAAKe,UAAL,CAAgB,IAAhB,CACD,CAEDC,cAAc,EAAG,CACf,GAAIC,CAAAA,aAAa,CAAGC,CAAC,CAAC,oBAAD,CAAD,CAAwB,CAAxB,CAApB,CACAD,aAAa,CAACE,eAAd,CAA8B,gBAA9B,EACAF,aAAa,CAACG,SAAd,CAA0B,KAAKC,iBAAL,EAA1B,CAGAC,OAAO,CAACC,IAAR,CAAaL,CAAC,CAAC,UAAD,CAAd,EAGA,KAAKlC,eAAL,CAAqBG,OAArB,CAA6BqC,CAAC,EAAI,CAChC,GAAIC,CAAAA,MAAM,CAAG,KAAKC,sBAAL,CAA4BF,CAA5B,CAAb,CACAC,MAAM,CAACE,KAAP,CAAaC,WAAb,CAA2B,KAA3B,CACAH,MAAM,CAACE,KAAP,CAAaE,MAAb,CAAsB,OAAtB,CACA,GAAIC,CAAAA,cAAc,CAAGL,MAAM,CAACM,SAAP,EAArB,CAEAD,cAAc,CAACE,UAAf,CAA0B,GAA1B,EAA+BvC,KAA/B,EAAwC,CAAxC,CACAgC,MAAM,CAACQ,UAAP,CAAmBC,YAAnB,CAAgCJ,cAAhC,CAAgDL,MAAM,CAACU,WAAvD,CACD,CARD,EAWA,KAAKpB,UAAL,CAAgB,IAAhB,EACAG,CAAC,CAAC,UAAD,CAAD,CAAc,CAAd,EAAiBkB,KAAjB,CAAuBlB,CAAC,CAAC,iBAAD,CAAD,CAAqB,CAArB,CAAvB,EACAA,CAAC,CAAC,KAAD,CAAD,CAAS,CAAT,EAAYS,KAAZ,CAAkBU,MAAlB,CAA2B,MAA3B,CACAC,QAAQ,CAACC,cAAT,CAAwB,eAAxB,GAA0CC,SAA1C,CAAoDC,MAApD,CAA2D,IAA3D,CACD,CAEDf,sBAAsB,CAACgB,IAAD,CAAc,CAClC,MAAO/D,CAAAA,KAAK,CAACC,IAAN,CAAWsC,CAAC,CAAC,OAAD,CAAZ,EAAuByB,IAAvB,CAA4BvD,CAAC,EAAIA,CAAC,CAACwD,EAAF,CAAKC,KAAL,CAAW,GAAX,EAAgB,CAAhB,GAAsBH,IAAI,CAACxF,IAA5D,EAAmE4F,UAC3E,CAEDzB,iBAAiB,EAAW,CAC1B,GAAI0B,CAAAA,UAAU,CAAG,gBAAjB,CACAA,UAAU,CAAGA,UAAU,CAACC,MAAX,CAAkB,oCAAlB,CAAb,CAEA,GAAIC,CAAAA,OAAmC,CAAG,EAA1C,CACA,IAAK,KAAM,CAAC/F,IAAD,CAAOa,KAAP,CAAX,EAA4B,MAAKmB,MAAjC,CAAyC,CACvC,IAAK,GAAIgE,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAG,KAAK7F,QAAL,CAAcsC,MAAlC,CAA0CuD,CAAC,EAA3C,CAA+C,CAC7C,IAAK,KAAM9C,CAAAA,SAAX,GAAwB,MAAKV,cAAL,CAAoB3B,KAApB,CAA2B,KAAKV,QAAL,CAAc6F,CAAd,CAA3B,CAAxB,CAAsE,CACpE,GAAIC,CAAAA,oBAAoB,CAAGjG,IAAI,CAAG,GAAP,CAAakD,SAAS,CAAClD,IAAlD,CACA,GAAI+F,OAAO,CAACE,oBAAD,CAAX,CAAmC,CACjCF,OAAO,CAACE,oBAAD,CAAP,CAA8BjF,IAA9B,CAAmC,KAAKb,QAAL,CAAc6F,CAAd,CAAnC,CACD,CAFD,IAEO,CACLD,OAAO,CAACE,oBAAD,CAAP,CAAgC,CAAC,KAAK9F,QAAL,CAAc6F,CAAd,CAAD,CACjC,CACF,CACF,CACF,CACDH,UAAU,CAAGA,UAAU,CAACC,MAAX,CAAkBI,MAAM,CAACC,IAAP,CAAYJ,OAAZ,EAAqBK,GAArB,CAAyBC,CAAC,EAAI,KAAKC,aAAL,CAAmBD,CAAnB,CAAsBN,OAAO,CAACM,CAAD,CAAP,CAAWE,IAAX,CAAgB,GAAhB,CAAtB,CAA9B,EAA2EA,IAA3E,CAAgF,IAAhF,CAAlB,CAAb,CAEAV,UAAU,EAAI,IAAd,CACAA,UAAU,EAAI,4BAAd,CACAA,UAAU,EAAI,KAAKlE,aAAL,CAAmByE,GAAnB,CAAuBlE,CAAC,EAAIA,CAAC,CAAClC,IAA9B,EAAoCuG,IAApC,CAAyC,IAAzC,CAAd,CACAV,UAAU,EAAI,OAAd,CACAA,UAAU,EAAI,IAAd,CACAA,UAAU,EAAI,OAAd,CACAA,UAAU,CAAGA,UAAU,CAACC,MAAX,CAAkB,KAAKhE,eAAL,CAAqBsE,GAArB,CAAyBlE,CAAC,EAAK,SAAQA,CAAC,CAAClC,IAAK,kCAA9C,EAAiFuG,IAAjF,CAAsF,EAAtF,CAAlB,CAAb,CACAV,UAAU,EAAI,IAAd,CAEAA,UAAU,CAAGA,UAAU,CAACC,MAAX,CAAkBrE,KAAK,CAACC,IAAN,CAAW,KAAKM,MAAhB,EAAwBoE,GAAxB,CAA4B,CAAC,CAACpG,IAAD,CAAOwG,CAAP,CAAD,GAAgB,SAAQxG,IAAK,0BAAyBA,IAAK,IAAvF,EAA4FuG,IAA5F,CAAiG,IAAjG,CAAlB,CAAb,CACAE,OAAO,CAACC,GAAR,CAAYb,UAAZ,EACA,MAAOA,CAAAA,UACR,CAGDhC,UAAU,CAAC8C,MAAD,CAAkB,CAC1B,KAAK5E,aAAL,CAAmBE,OAAnB,CAA2B2E,YAAY,EAAI,CACzC,GAAIC,CAAAA,cAAc,CAAG,KAAKrC,sBAAL,CAA4BoC,YAA5B,CAArB,CACA,GAAIE,CAAAA,WAAW,CAAGD,cAAc,CAAC5B,WAAjC,CACA,GAAI0B,MAAJ,CAAY,CACVG,WAAW,CAACrC,KAAZ,CAAkBsC,cAAlB,CAAmC,WAAnC,CACA,GAAI,KAAKjF,eAAL,CAAqBf,QAArB,CAA8B6F,YAA9B,CAAJ,CACEE,WAAW,CAACrC,KAAZ,CAAkBuC,IAAlB,CAAyB,SAAzB,CADF,IAEKH,CAAAA,cAAc,CAACpC,KAAf,CAAqBuC,IAArB,CAA4B,SAClC,CALD,IAKO,CACL,GAAI,KAAKlF,eAAL,CAAqBf,QAArB,CAA8B6F,YAA9B,CAAJ,CACEE,WAAW,CAAC7C,eAAZ,CAA4B,OAA5B,EADF,IAEK4C,CAAAA,cAAc,CAAC5C,eAAf,CAA+B,OAA/B,CACN,CACF,CAbD,CAqBD,CAEDqC,aAAa,CAACtE,MAAD,CAAiBiF,UAAjB,CAA6C,CACxD,GAAItB,CAAAA,KAAK,CAAG3D,MAAM,CAAC2D,KAAP,CAAa,GAAb,CAAZ,CACA,GAAIuB,CAAAA,CAAC,CAAGvB,KAAK,CAAC,CAAD,CAAb,CAAkBwB,CAAC,CAAGxB,KAAK,CAAC,CAAD,CAA3B,CACA,GAAIyB,CAAAA,QAAQ,CAAG,KAAKC,gBAAL,CAAsBH,CAAtB,CAAf,CACA,GAAII,CAAAA,QAAQ,CAAG,KAAKD,gBAAL,CAAsBF,CAAtB,CAAf,CACA,MAAQ,GAAED,CAAE,KAAIE,QAAS,WAAUH,UAAW,MAAKE,CAAE,KAAIG,QAAS,IACnE,CAEDC,qBAAqB,EAAW,CAC9B,MAAQ,eAAc,KAAK5F,aAAc,EAC1C,CAED0F,gBAAgB,CAACrH,IAAD,CAAe,CAC7B,MAAO,MAAKmC,aAAL,CAAmBrB,GAAnB,CAAuBd,IAAvB,CACR,CAEDwH,YAAY,EAAG,CACb,MAAO,MAAKxF,MAAL,CAAYW,IACpB,CAED8E,iBAAiB,EAAG,CAClB,MAAOhG,CAAAA,KAAK,CAACC,IAAN,CAAW,KAAKM,MAAhB,EAAwBoE,GAAxB,CAA4BlE,CAAC,EAAIT,KAAK,CAACC,IAAN,CAAWQ,CAAC,CAAC,CAAD,CAAD,CAAK9B,cAAhB,CAAjC,EAAkEsH,IAAlE,GAAyEC,MAAzE,CAAgF,CAACC,CAAD,CAAIC,CAAJ,GAAUD,CAAC,CAAGC,CAAC,CAAC,CAAD,CAAD,CAAKpF,MAAnG,CAA2G,CAA3G,CACR,CAODqF,QAAQ,EAAG,CAET,GAAIxG,CAAAA,SAAkB,CAAG,CAAC,KAAKK,aAAL,CAAmB,CAAnB,CAAD,CAAzB,CAGA,GAAIoG,CAAAA,SAAS,CAAG,CAAC,KAAKpG,aAAL,CAAmB,CAAnB,CAAD,CAAhB,CACA,MAAOoG,SAAS,CAACtF,MAAV,CAAmB,CAA1B,CAA6B,CAC3B,GAAIuF,CAAAA,QAAQ,CAAGD,SAAS,CAACE,KAAV,EAAf,CACA,IAAK,KAAMC,CAAAA,SAAX,GAAwBF,CAAAA,QAAQ,CAACzH,UAAjC,CAA6C,CAC3C,GAAI,CAACe,SAAS,CAACP,QAAV,CAAmBmH,SAAnB,CAAL,CAAoC,CAClCH,SAAS,CAAC/G,IAAV,CAAekH,SAAf,EACA5G,SAAS,CAACN,IAAV,CAAekH,SAAf,CACD,CACF,CACF,CAED,GAAIC,CAAAA,CAAe,CAAG,CAAC,GAAI3H,CAAAA,GAAL,CAAY,GAAIA,CAAAA,GAAhB,CAAtB,CACAc,SAAS,CAACW,OAAV,CAAkBJ,CAAC,EAAI,CAACA,CAAC,CAAC5B,WAAF,CAAgBkI,CAAC,CAAC,CAAD,CAAjB,CAAuBA,CAAC,CAAC,CAAD,CAAzB,EAA8BlH,GAA9B,CAAkCY,CAAlC,CAAvB,EACAsG,CAAC,CAAGA,CAAC,CAACvG,MAAF,CAASwG,CAAC,EAAIA,CAAC,CAACzF,IAAF,CAAS,CAAvB,CAAJ,CAEA,GAAI0F,CAAAA,OAAO,CAAG,IAAMF,CAAC,CAACR,MAAF,CAAS,CAACC,CAAD,CAAIQ,CAAJ,GAAUR,CAAC,CAAGQ,CAAC,CAACzF,IAAzB,CAA+B,CAA/B,CAApB,CAEA,GAAI2F,CAAAA,CAAe,CAAG7G,KAAK,CAACC,IAAN,CAAWyG,CAAX,CAAtB,CACA,MAAOG,CAAC,CAAC7F,MAAF,CAAW,CAAlB,CAAqB,CACnB,GAAIyE,CAAAA,CAAC,CAAGoB,CAAC,CAACL,KAAF,EAAR,CACA,IAAK,KAAM3E,CAAAA,MAAX,GAAqB,MAAKnD,QAA1B,CAAoC,CAElC,GAAIoI,CAAAA,CAAa,CAAG,GAAI/H,CAAAA,GAAxB,CACA0G,CAAC,CAACjF,OAAF,CAAUC,CAAC,EAAI,CACb,GAAIsG,CAAAA,IAAI,CAAGtG,CAAC,CAAC5B,aAAF,CAAgBQ,GAAhB,CAAoBwC,MAApB,CAAX,CACA,GAAIkF,IAAJ,CAAUA,IAAI,CAACvG,OAAL,CAAaJ,CAAC,EAAI0G,CAAC,CAACtH,GAAF,CAAMY,CAAN,CAAlB,CACX,CAHD,EAMA,GAAI4G,CAAAA,CAAC,CAAGN,CAAC,CAAC/B,GAAF,CAAMgC,CAAC,EAAI,CACjB,GAAIM,CAAAA,EAAc,CAAG,GAAIlI,CAAAA,GAAzB,CACEmI,EAAc,CAAG,GAAInI,CAAAA,GADvB,CAEA,IAAK,KAAMK,CAAAA,KAAX,GAAoBuH,CAAAA,CAApB,CAAuB,CACrB,GAAIG,CAAC,CAACK,GAAF,CAAM/H,KAAN,CAAJ,CAAkB6H,EAAE,CAACzH,GAAH,CAAOJ,KAAP,EAAlB,IACK8H,CAAAA,EAAE,CAAC1H,GAAH,CAAOJ,KAAP,CACN,CACD,MAAO,CAAEgI,CAAC,CAAET,CAAL,CAAQM,EAAE,CAAEA,EAAZ,CAAgBC,EAAE,CAAEA,EAApB,CACR,CARO,EAQL/G,MARK,CAQE,CAAC,CAAE8G,EAAF,CAAMC,EAAN,CAAD,GAAgBD,EAAE,CAAC/F,IAAH,CAAU,CAAV,EAAegG,EAAE,CAAChG,IAAH,CAAU,CAR3C,CAAR,CASA,IAAK,KAAM,CAAEkG,CAAF,CAAKH,EAAL,CAASC,EAAT,CAAX,EAA4BF,CAAAA,CAA5B,CAA+B,CAE7BN,CAAC,CAACW,MAAF,CAASX,CAAC,CAACY,OAAF,CAAUF,CAAV,CAAT,CAAuB,CAAvB,EACAV,CAAC,CAACnH,IAAF,CAAO0H,EAAP,EACAP,CAAC,CAACnH,IAAF,CAAO2H,EAAP,EACA,GAAIN,OAAO,IAAM/G,SAAS,CAACmB,MAA3B,CAAmC,KAAO,UAASnB,SAAS,CAACmB,MAAO,QAAO4F,OAAO,EAAG,EAAlD,CACnC,GAAIC,CAAC,CAACvH,QAAF,CAAW8H,CAAX,CAAJ,CAAmB,CACjBP,CAAC,CAACQ,MAAF,CAASR,CAAC,CAACS,OAAF,CAAUF,CAAV,CAAT,CAAuB,CAAvB,EACAP,CAAC,CAACtH,IAAF,CAAO0H,EAAP,EACAJ,CAAC,CAACtH,IAAF,CAAO2H,EAAP,CACD,CAJD,IAIO,CACL,GAAID,EAAE,CAAC/F,IAAH,EAAWgG,EAAE,CAAChG,IAAlB,CAAwB,CACtB2F,CAAC,CAACtH,IAAF,CAAO0H,EAAP,CACD,CAFD,IAEO,CACLJ,CAAC,CAACtH,IAAF,CAAO2H,EAAP,CACD,CACF,CACF,CACF,CACF,CAED,GAAIK,CAAAA,kBAAqC,CAAG,GAAI3I,CAAAA,GAAhD,CAEA,GAAI4I,CAAAA,SAAS,CAAG,GAAIzI,CAAAA,GAAJ,CAAQiB,KAAK,CAACC,IAAN,CAAWyG,CAAX,EAAcvG,MAAd,CAAqBsH,SAAS,EAAIA,SAAS,CAACvG,IAAV,CAAiB,CAAnD,EAAsDyD,GAAtD,CAA0D,CAAC8C,SAAD,CAAYC,GAAZ,GAAoB,CACpG,GAAIC,CAAAA,YAAY,CAAG3H,KAAK,CAACC,IAAN,CAAWwH,SAAX,CAAnB,CACA,GAAIlB,CAAAA,QAAQ,CAAG,GAAIlI,CAAAA,KAAJ,CAAUqJ,GAAG,CAAG,EAAhB,CACbC,YAAY,CAAC5F,IAAb,CAAkBtB,CAAC,EAAIA,CAAC,CAACjC,WAAzB,CADa,CAEbmJ,YAAY,CAAC5F,IAAb,CAAkBtB,CAAC,EAAIA,CAAC,CAAChC,SAAzB,CAFa,CAGbkJ,YAAY,CAAC,CAAD,CAAZ,CAAgBjJ,QAHH,CAAf,CAKA+I,SAAS,CAACjH,OAAV,CAAkBpB,KAAK,EAAImI,kBAAkB,CAACrI,GAAnB,CAAuBE,KAAvB,CAA8BmH,QAA9B,CAA3B,EACA,MAAOA,CAAAA,QACR,CATuB,CAAR,CAAhB,CAWA,IAAK,KAAMkB,CAAAA,SAAX,GAAwBf,CAAAA,CAAxB,CAA2B,CACzB,IAAK,KAAMkB,CAAAA,QAAX,GAAuBH,CAAAA,SAAvB,CAAkC,CAChC,IAAK,KAAM5F,CAAAA,MAAX,GAAqB,MAAKnD,QAA1B,CAAoC,CAClC,IAAK,KAAM+H,CAAAA,SAAX,GAAwBmB,CAAAA,QAAQ,CAACnI,YAAT,CAAsBoC,MAAtB,CAAxB,CAAuD,CACrD,GAAI,CAAC0F,kBAAkB,CAAClI,GAAnB,CAAuBuI,QAAvB,EAAkCjJ,cAAlC,CAAiDU,GAAjD,CAAqDwC,MAArD,EAA8D,CAA9D,CAAD,EAAsE0F,kBAAkB,CAAClI,GAAnB,CAAuBuI,QAAvB,EAAkCjJ,cAAlC,CAAiDU,GAAjD,CAAqDwC,MAArD,EAA8D,CAA9D,EAAiEtD,IAAjE,EAAyEgJ,kBAAkB,CAAClI,GAAnB,CAAuBoH,SAAvB,EAAmClI,IAAtL,CACEgJ,kBAAkB,CAAClI,GAAnB,CAAuBuI,QAAvB,EAAkCzI,aAAlC,CAAgD0C,MAAhD,CAAwD0F,kBAAkB,CAAClI,GAAnB,CAAuBoH,SAAvB,CAAxD,CACH,CACF,CACF,CACF,CAED,MAAO,IAAI7G,CAAAA,SAAJ,CAAc4H,SAAd,CACR,CA1T6C","sourcesContent":["export class State {\r\n  isAccepting: boolean;\r\n  isInitial: boolean;\r\n  alphabet: string[];\r\n  outTransitions: Map<string, State[]>;\r\n  inTransitions: Map<string, State[]>;\r\n  successors: Set<State>;\r\n  predecessor: Set<State>;\r\n  name: string;\r\n\r\n  constructor(name: string, isAccepting: boolean, isInitial: boolean, alphabet: string[]) {\r\n    this.name = name;\r\n    this.isAccepting = isAccepting;\r\n    this.isInitial = isInitial;\r\n    this.alphabet = alphabet;\r\n    this.outTransitions = new Map();\r\n    this.inTransitions = new Map();\r\n    this.successors = new Set();\r\n    this.predecessor = new Set();\r\n    for (const symbol of alphabet) {\r\n      this.outTransitions.set(symbol, []);\r\n      this.inTransitions.set(symbol, []);\r\n    }\r\n  }\r\n\r\n  addTransition(symbol: string, state: State) {\r\n    if (this.outTransitions.get(symbol)!.includes(state)) return\r\n    this.outTransitions.get(symbol)!.push(state);\r\n    this.successors.add(state);\r\n    state.predecessor.add(this);\r\n    state.inTransitions.get(symbol)!.push(this);\r\n  }\r\n\r\n  getSuccessor(symbol: string) {\r\n    return this.outTransitions.get(symbol)!\r\n  }\r\n\r\n  getPredecessor(symbol: string) {\r\n    return this.inTransitions.get(symbol)!\r\n  }\r\n\r\n  static bottom(alphabet: string[]) {\r\n    return new State(\"bottom\", false, false, alphabet)\r\n  }\r\n}\r\n\r\nexport interface AutomatonJson {\r\n  states: Map<string, State>;\r\n  initialStates: State[];\r\n  acceptingStates: State[];\r\n  alphabet: string[];\r\n};\r\n\r\nexport class Automaton implements AutomatonJson {\r\n  states: Map<string, State>;\r\n  initialStates: State[];\r\n  acceptingStates: State[];\r\n  allStates: State[];\r\n  alphabet: string[];\r\n  currentStates: State[];\r\n  states_rename: Map<string, string>;\r\n\r\n  constructor(stateList: Set<State>) {\r\n    this.complete(stateList)\r\n    this.allStates = Array.from(stateList);\r\n    this.initialStates = this.allStates.filter(s => s.isInitial);\r\n    this.acceptingStates = this.allStates.filter(s => s.isAccepting);\r\n    this.currentStates = this.initialStates;\r\n    this.alphabet = this.initialStates[0].alphabet;\r\n    this.states = new Map();\r\n    stateList.forEach(e => this.states.set(e.name, e));\r\n    this.states_rename = new Map();\r\n    this.set_state_rename()\r\n  }\r\n\r\n  complete(stateList: Set<State>) {\r\n    let alphabet = stateList.values().next().value.alphabet\r\n    let bottom = State.bottom(alphabet)\r\n    for (const state of stateList) {\r\n      for (const symbol of alphabet) {\r\n        if (this.findTransition(state, symbol).length == 0) {\r\n          stateList.add(bottom);\r\n          state.addTransition(symbol, bottom);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  set_state_rename() {\r\n    let counter_init = [0, this.initialStates.length, this.states.size - this.acceptingStates.length + 1];\r\n    for (const [_name, state] of this.states) {\r\n      if (this.initialStates.includes(state)) {\r\n        this.states_rename.set(state.name, \"q\" + counter_init[0]++)\r\n      } else if (this.acceptingStates.includes(state)) {\r\n        this.states_rename.set(state.name, \"q\" + counter_init[2]++)\r\n      } else {\r\n        this.states_rename.set(state.name, \"q\" + counter_init[1]++)\r\n      }\r\n    }\r\n  }\r\n\r\n  next_step(next_char: string) {\r\n    let newCurrentState: State[] = []\r\n    this.currentStates.forEach(cs => {\r\n      let nextStates = cs.outTransitions.get(next_char)!;\r\n      nextStates.forEach(nextState => {\r\n        if (!newCurrentState.includes(nextState)) {\r\n          newCurrentState.push(nextState)\r\n        }\r\n      })\r\n    })\r\n    this.currentStates = newCurrentState;\r\n  }\r\n\r\n  accept_word(word: string): boolean {\r\n    this.restart()\r\n    Array.from(word).forEach(\r\n      letter => this.next_step(letter)\r\n    )\r\n    let is_accepted = this.acceptingStates.some(e => this.currentStates.includes(e));\r\n    this.restart()\r\n    return is_accepted;\r\n  }\r\n\r\n\r\n  accept_word_nfa(word: string): boolean {\r\n    if (word.length == 0)\r\n      return this.initialStates.some(e => e.isAccepting);\r\n    let nextStates: Set<State> = new Set(this.initialStates);\r\n    for (let index = 0; index < word.length && nextStates.size > 0; index++) {\r\n      let nextStates2: Set<State> = new Set();\r\n      const symbol = word[index];\r\n      for (const state of nextStates) {\r\n        for (const nextState of this.findTransition(state, symbol)) {\r\n          nextStates2.add(nextState)\r\n          if (index == word.length - 1 && nextState.isAccepting)\r\n            return true\r\n        }\r\n        // Array.from(this.findTransition(state, symbol)).forEach(e => nextStates2.add(e))\r\n      }\r\n      nextStates = nextStates2;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  findTransition(state: State, symbol: string) {\r\n    return state!.outTransitions.get(symbol)!\r\n  }\r\n\r\n  restart() {\r\n    this.currentStates = this.initialStates;\r\n  }\r\n\r\n  /** GRAPHIC PART */\r\n\r\n  draw_next_step(next_char: string) {\r\n    this.color_node(false);\r\n    this.next_step(next_char);\r\n    this.color_node(true);\r\n  }\r\n\r\n  initiate_graph() {\r\n    let automatonHTML = $(\"#automaton-mermaid\")[0];\r\n    automatonHTML.removeAttribute('data-processed')\r\n    automatonHTML.innerHTML = this.matrix_to_mermaid();\r\n\r\n    // @ts-ignore\r\n    mermaid.init($(\".mermaid\"));\r\n\r\n    // Mark end nodes\r\n    this.acceptingStates.forEach(n => {\r\n      let circle = this.get_current_graph_node(n) as HTMLElement;\r\n      circle.style.strokeWidth = \"1.1\";\r\n      circle.style.stroke = \"black\"\r\n      let smaller_circle = circle.cloneNode() as HTMLElement;\r\n      // @ts-ignore\r\n      smaller_circle.attributes['r'].value -= 4\r\n      circle.parentNode!.insertBefore(smaller_circle, circle.nextSibling)\r\n    });\r\n\r\n    // Mark current node = initial state\r\n    this.color_node(true);\r\n    $(\".mermaid\")[0].after($(\".mermaidTooltip\")[0]);\r\n    $('svg')[0].style.height = 'auto';\r\n    document.getElementById('automatonHead')?.classList.remove('up');\r\n  }\r\n\r\n  get_current_graph_node(node: State) {\r\n    return Array.from($(\".node\")).find(e => e.id.split(\"-\")[1] == node.name)!.firstChild!;\r\n  }\r\n\r\n  matrix_to_mermaid(): string {\r\n    let mermaidTxt = \"flowchart LR\\n\";\r\n    mermaidTxt = mermaidTxt.concat(\"subgraph Automaton\\ndirection LR\\n\")\r\n    // res = res.concat(\"\\n\" + this.create_entering_arrow() + \"\\n\");\r\n    let triples: { [id: string]: string[] } = {}\r\n    for (const [name, state] of this.states) {\r\n      for (let j = 0; j < this.alphabet.length; j++) {\r\n        for (const nextState of this.findTransition(state, this.alphabet[j])) {\r\n          let stateA_concat_stateB = name + '&' + nextState.name;\r\n          if (triples[stateA_concat_stateB]) {\r\n            triples[stateA_concat_stateB].push(this.alphabet[j])\r\n          } else {\r\n            triples[stateA_concat_stateB] = [this.alphabet[j]]\r\n          }\r\n        }\r\n      }\r\n    }\r\n    mermaidTxt = mermaidTxt.concat(Object.keys(triples).map(x => this.create_triple(x, triples[x].join(\",\"))).join(\"\\n\"));\r\n    // res = res.concat(\"\\nstyle START fill:#FFFFFF, stroke:#FFFFFF;\")\r\n    mermaidTxt += \"\\n\"\r\n    mermaidTxt += \"\\nsubgraph InitialStates\\n\";\r\n    mermaidTxt += this.initialStates.map(e => e.name).join(\"\\n\")\r\n    mermaidTxt += \"\\nend\"\r\n    mermaidTxt += \"\\n\"\r\n    mermaidTxt += \"end\\n\"\r\n    mermaidTxt = mermaidTxt.concat(this.acceptingStates.map(e => `style ${e.name} fill:#FFFF00, stroke:#FF00FF;\\n`).join(\"\"));\r\n    mermaidTxt += \"\\n\"\r\n    // Callback for tooltip on mouse over\r\n    mermaidTxt = mermaidTxt.concat(Array.from(this.states).map(([name, _]) => `click ${name} undnamefinedCallback \"${name}\";`).join(\"\\n\"))\r\n    console.log(mermaidTxt);\r\n    return mermaidTxt;\r\n  }\r\n\r\n\r\n  color_node(toFill: boolean) {\r\n    this.currentStates.forEach(currentState => {\r\n      let current_circle = this.get_current_graph_node(currentState) as HTMLElement;\r\n      let next_circle = current_circle.nextSibling as HTMLElement;\r\n      if (toFill) {\r\n        next_circle.style.textDecoration = \"underline\";\r\n        if (this.acceptingStates.includes(currentState))\r\n          next_circle.style.fill = '#009879';\r\n        else current_circle.style.fill = '#009879';\r\n      } else {\r\n        if (this.acceptingStates.includes(currentState))\r\n          next_circle.removeAttribute('style');\r\n        else current_circle.removeAttribute('style');\r\n      }\r\n    })\r\n    // let currentNode = this.get_current_graph_node(this.currentState).parentElement as HTMLElement;\r\n    // let spanWithText = currentNode.getElementsByClassName(\"nodeLabel\")![0] as HTMLElement;\r\n    // if (toFill) {\r\n    //   spanWithText.style.textDecoration = \"underline\";\r\n    // } else {\r\n    //   spanWithText.removeAttribute('style');\r\n    // }\r\n  }\r\n\r\n  create_triple(states: string, transition: string): string {\r\n    let split = states.split(\"&\");\r\n    let A = split[0], B = split[1];\r\n    let A_rename = this.get_state_rename(A);\r\n    let B_rename = this.get_state_rename(B);\r\n    return `${A}((${A_rename})) -->| ${transition} | ${B}((${B_rename}))`;\r\n  }\r\n\r\n  create_entering_arrow(): string {\r\n    return `START[ ]--> ${this.initialStates}`\r\n  }\r\n\r\n  get_state_rename(name: string) {\r\n    return this.states_rename.get(name)!\r\n  }\r\n\r\n  state_number() {\r\n    return this.states.size;\r\n  }\r\n\r\n  transition_number() {\r\n    return Array.from(this.states).map(e => Array.from(e[1].outTransitions)).flat().reduce((a, b) => a + b[1].length, 0)\r\n  }\r\n\r\n\r\n  /**\r\n   * Usage of Filling table algorithm for Automaton Minimisation\r\n   * The automaton should be in DFA form else the algorithm won't work\r\n   */\r\n  minimize() {\r\n\r\n    let stateList: State[] = [this.initialStates[0]];\r\n\r\n    // BFS to remove not reachable node from initial state\r\n    let toExplore = [this.initialStates[0]]\r\n    while (toExplore.length > 0) {\r\n      let newState = toExplore.shift()!\r\n      for (const successor of newState.successors) {\r\n        if (!stateList.includes(successor)) {\r\n          toExplore.push(successor)\r\n          stateList.push(successor)\r\n        }\r\n      }\r\n    }\r\n\r\n    let P: Set<State>[] = [new Set(), new Set()]; // P := {F, Q \\ F}\r\n    stateList.forEach(s => (s.isAccepting ? P[0] : P[1]).add(s))\r\n    P = P.filter(p => p.size > 0)\r\n\r\n    let pLength = () => P.reduce((a, p) => a + p.size, 0)\r\n\r\n    let W: Set<State>[] = Array.from(P) // W := {F, Q \\ F}\r\n    while (W.length > 0) {\r\n      let A = W.shift()!\r\n      for (const letter of this.alphabet) {\r\n        // X = the set of states for which a transition on letter leads to a state in A\r\n        let X: Set<State> = new Set()\r\n        A.forEach(e => {\r\n          let succ = e.inTransitions.get(letter)\r\n          if (succ) succ.forEach(s => X.add(s))\r\n        })\r\n\r\n        // let S1 = X ∩ Y and S2 = Y \\ X and S3 = X \\ Y and Y in P\r\n        let Y = P.map(p => {\r\n          let S1: Set<State> = new Set(),\r\n            S2: Set<State> = new Set();\r\n          for (const state of p) {\r\n            if (X.has(state)) S1.add(state)\r\n            else S2.add(state)\r\n          }\r\n          return { y: p, S1: S1, S2: S2 }\r\n        }).filter(({ S1, S2 }) => S1.size > 0 && S2.size > 0)\r\n        for (const { y, S1, S2 } of Y) {\r\n          // replace Y in P by the two sets X ∩ Y and Y \\ X\r\n          P.splice(P.indexOf(y), 1)\r\n          P.push(S1)\r\n          P.push(S2)\r\n          if (pLength() != stateList.length) throw `Wanted ${stateList.length} had ${pLength()}`\r\n          if (W.includes(y)) {\r\n            W.splice(W.indexOf(y), 1)\r\n            W.push(S1)\r\n            W.push(S2)\r\n          } else {\r\n            if (S1.size <= S2.size) {\r\n              W.push(S1)\r\n            } else {\r\n              W.push(S2)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    let oldStateToNewState: Map<State, State> = new Map();\r\n\r\n    let newStates = new Set(Array.from(P).filter(partition => partition.size > 0).map((partition, pos) => {\r\n      let representant = Array.from(partition)\r\n      let newState = new State(pos + \"\",\r\n        representant.some(e => e.isAccepting),\r\n        representant.some(e => e.isInitial),\r\n        representant[0].alphabet\r\n      )\r\n      partition.forEach(state => oldStateToNewState.set(state, newState))\r\n      return newState;\r\n    }));\r\n\r\n    for (const partition of P) {\r\n      for (const oldState of partition) {\r\n        for (const letter of this.alphabet) {\r\n          for (const successor of oldState.getSuccessor(letter)) {\r\n            if (!oldStateToNewState.get(oldState)!.outTransitions.get(letter)![0] || (oldStateToNewState.get(oldState)!.outTransitions.get(letter)![0].name != oldStateToNewState.get(successor)!.name))\r\n              oldStateToNewState.get(oldState)!.addTransition(letter, oldStateToNewState.get(successor)!)\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return new Automaton(newStates)\r\n  }\r\n}"],"file":"Automaton.js"}