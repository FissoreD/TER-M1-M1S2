{"version":3,"sources":["../../src/automaton/Automaton.ts"],"names":["State","constructor","name","isAccepting","isInitial","alphabet","transitions","Map","symbol","set","addTransition","state","get","push","Automaton","json","initialStates","acceptingStates","currentStates","Array","from","states","states_rename","set_state_rename","counter_init","length","size","_name","includes","next_step","next_char","newCurrentState","forEach","cs","nextStates","nextState","accept_word","word","restart","letter","is_accepted","some","e","accept_word_nfa","Set","index","nextStates2","findTransition","add","draw_next_step","color_node","initiate_graph","automatonHTML","$","removeAttribute","innerHTML","matrix_to_mermaid","mermaid","init","n","circle","get_current_graph_node","style","strokeWidth","stroke","smaller_circle","cloneNode","attributes","value","parentNode","insertBefore","nextSibling","after","height","node","find","id","split","firstChild","res","concat","triples","j","stateA_concat_stateB","Object","keys","map","x","create_triple","join","_","console","log","toFill","currentState","current_circle","next_circle","textDecoration","fill","transition","A","B","A_rename","get_state_rename","B_rename","create_entering_arrow","state_number","transition_number","flat","reduce","a","b"],"mappings":"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","sourcesContent":["export class State {\r\n  isAccepting: boolean;\r\n  isInitial: boolean;\r\n  alphabet: string[];\r\n  transitions: Map<string, State[]>\r\n  name: string;\r\n\r\n  constructor(name: string, isAccepting: boolean, isInitial: boolean, alphabet: string[]) {\r\n    this.name = name;\r\n    this.isAccepting = isAccepting;\r\n    this.isInitial = isInitial;\r\n    this.alphabet = alphabet;\r\n    this.transitions = new Map()\r\n    for (const symbol of alphabet) {\r\n      this.transitions.set(symbol, [])\r\n    }\r\n  }\r\n\r\n  addTransition(symbol: string, state: State) {\r\n    this.transitions.get(symbol)!.push(state);\r\n  }\r\n}\r\n\r\nexport interface AutomatonJson {\r\n  states: Map<string, State>;\r\n  initialStates: State[];\r\n  acceptingStates: State[];\r\n  alphabet: string[];\r\n};\r\n\r\nexport class Automaton implements AutomatonJson {\r\n  states: Map<string, State>;\r\n  initialStates: State[];\r\n  acceptingStates: State[];\r\n  alphabet: string[];\r\n  currentStates: State[];\r\n  states_rename: Map<string, string>;\r\n\r\n  constructor(json: AutomatonJson) {\r\n    this.initialStates = json.initialStates;\r\n    this.acceptingStates = json.acceptingStates;\r\n    this.currentStates = this.initialStates;\r\n    this.alphabet = Array.from(json.alphabet);\r\n    this.states = json.states;\r\n    this.states_rename = new Map();\r\n    this.set_state_rename()\r\n  }\r\n\r\n  set_state_rename() {\r\n    let counter_init = [0, this.initialStates.length, this.states.size - this.acceptingStates.length + 1];\r\n    for (const [_name, state] of this.states) {\r\n      if (this.initialStates.includes(state)) {\r\n        this.states_rename.set(state.name, \"q\" + counter_init[0]++)\r\n      } else if (this.acceptingStates.includes(state)) {\r\n        this.states_rename.set(state.name, \"q\" + counter_init[2]++)\r\n      } else {\r\n        this.states_rename.set(state.name, \"q\" + counter_init[1]++)\r\n      }\r\n    }\r\n  }\r\n\r\n  next_step(next_char: string) {\r\n    let newCurrentState: State[] = []\r\n    this.currentStates.forEach(cs => {\r\n      let nextStates = cs.transitions.get(next_char)!;\r\n      nextStates.forEach(nextState => {\r\n        if (!newCurrentState.includes(nextState)) {\r\n          newCurrentState.push(nextState)\r\n        }\r\n      })\r\n    })\r\n    this.currentStates = newCurrentState;\r\n  }\r\n\r\n  accept_word(word: string): boolean {\r\n    this.restart()\r\n    Array.from(word).forEach(\r\n      letter => this.next_step(letter)\r\n    )\r\n    let is_accepted = this.acceptingStates.some(e => this.currentStates.includes(e));\r\n    this.restart()\r\n    return is_accepted;\r\n  }\r\n\r\n  // find_transition(state: string, symbol: string) {\r\n  //   return this.transitions\r\n  //     .filter(e => e.fromState == state)\r\n  //     .find(e => e.symbol == symbol)!\r\n  // }\r\n\r\n\r\n  /* {TODO} */\r\n  accept_word_nfa(word: string): boolean {\r\n    // let path: string[] = [];\r\n    // let recursive_explore = (word: string, index: number, current_state: State, state_path: string): boolean => {\r\n    //   if (index < word.length) {\r\n    //     let next_states = this.find_transition(current_state, word[index]).toStates;\r\n    //     return next_states.some(next_state => recursive_explore(word, index + 1, next_state, state_path + \", \" + this.get_state_rename(next_state)))\r\n    //   } else {\r\n    //     if (this.acceptingStates.includes(current_state)) {\r\n    //       path = [state_path]\r\n    //       return true;\r\n    //     }\r\n    //     path.push(state_path)\r\n    //     return false;\r\n    //   }\r\n    // }\r\n    // console.log(1);\r\n\r\n    let nextStates: Set<State> = new Set(this.initialStates);\r\n    for (let index = 0; index < word.length && nextStates.size > 0; index++) {\r\n      let nextStates2: Set<State> = new Set();\r\n      const symbol = word[index];\r\n      for (const state of nextStates) {\r\n        Array.from(this.findTransition(state, symbol)).forEach(e => nextStates2.add(e))\r\n      }\r\n      nextStates = nextStates2;\r\n    }\r\n    // console.log(2);\r\n    return Array.from(nextStates).some(e => e.isAccepting);\r\n  }\r\n\r\n  findTransition(state: State, symbol: string) {\r\n    return this.states.get(state.name)!.transitions.get(symbol)!\r\n  }\r\n\r\n  restart() {\r\n    this.currentStates = this.initialStates;\r\n  }\r\n\r\n  /** GRAPHIC PART */\r\n\r\n  draw_next_step(next_char: string) {\r\n    this.color_node(false);\r\n    this.next_step(next_char);\r\n    this.color_node(true);\r\n  }\r\n\r\n  initiate_graph() {\r\n    let automatonHTML = $(\"#automaton-mermaid\")[0];\r\n    automatonHTML.removeAttribute('data-processed')\r\n    automatonHTML.innerHTML = this.matrix_to_mermaid();\r\n\r\n    // @ts-ignore\r\n    mermaid.init($(\".mermaid\"));\r\n\r\n    // Mark end nodes\r\n    this.acceptingStates.forEach(n => {\r\n      let circle = this.get_current_graph_node(n) as HTMLElement;\r\n      circle.style.strokeWidth = \"1.1\";\r\n      circle.style.stroke = \"black\"\r\n      let smaller_circle = circle.cloneNode() as HTMLElement;\r\n      // @ts-ignore\r\n      smaller_circle.attributes['r'].value -= 4\r\n      circle.parentNode!.insertBefore(smaller_circle, circle.nextSibling)\r\n    });\r\n\r\n    // Mark current node = initial state\r\n    this.color_node(true);\r\n    $(\".mermaid\")[0].after($(\".mermaidTooltip\")[0])\r\n    $('svg')[0].style.height = 'auto'\r\n  }\r\n\r\n  get_current_graph_node(node: State) {\r\n    return Array.from($(\".node\")).find(e => e.id.split(\"-\")[1] == node.name)!.firstChild!;\r\n  }\r\n\r\n  matrix_to_mermaid(): string {\r\n    let res = \"flowchart LR\\n\";\r\n    res = res.concat(\"subgraph Automaton\\ndirection LR\\n\")\r\n    // res = res.concat(\"\\n\" + this.create_entering_arrow() + \"\\n\");\r\n    let triples: { [id: string]: string[] } = {}\r\n    for (const [name, state] of this.states) {\r\n      for (let j = 0; j < this.alphabet.length; j++) {\r\n        for (const nextState of this.findTransition(state, this.alphabet[j])) {\r\n          let stateA_concat_stateB = name + '&' + nextState.name;\r\n          if (triples[stateA_concat_stateB]) {\r\n            triples[stateA_concat_stateB].push(this.alphabet[j])\r\n          } else {\r\n            triples[stateA_concat_stateB] = [this.alphabet[j]]\r\n          }\r\n        }\r\n      }\r\n    }\r\n    res = res.concat(Object.keys(triples).map(x => this.create_triple(x, triples[x].join(\",\"))).join(\"\\n\"));\r\n    // res = res.concat(\"\\nstyle START fill:#FFFFFF, stroke:#FFFFFF;\")\r\n    res += \"\\n\"\r\n    // res = res.concat(this.initialStates.map(e => `style ${e} fill:#FFFF00, stroke:#FF00FF;\\n`).join(\"\"));\r\n    res += \"subgraph InitialStates\\n\";\r\n    res += this.initialStates.map(e => e.name).join(\"\\n\")\r\n    res += \"\\nend\"\r\n    res += \"\\n\"\r\n    res += \"end\\n\"\r\n    // Callback for tooltip on mouse over\r\n    res = res.concat(Array.from(this.states).map(([name, _]) => `click ${name} undnamefinedCallback \"${name}\";`).join(\"\\n\"))\r\n    console.log(res);\r\n    return res;\r\n  }\r\n\r\n\r\n  color_node(toFill: boolean) {\r\n    this.currentStates.forEach(currentState => {\r\n      let current_circle = this.get_current_graph_node(currentState) as HTMLElement;\r\n      let next_circle = current_circle.nextSibling as HTMLElement;\r\n      if (toFill) {\r\n        next_circle.style.textDecoration = \"underline\";\r\n        if (this.acceptingStates.includes(currentState))\r\n          next_circle.style.fill = '#009879';\r\n        else current_circle.style.fill = '#009879';\r\n      } else {\r\n        if (this.acceptingStates.includes(currentState))\r\n          next_circle.removeAttribute('style');\r\n        else current_circle.removeAttribute('style');\r\n      }\r\n    })\r\n    // let currentNode = this.get_current_graph_node(this.currentState).parentElement as HTMLElement;\r\n    // let spanWithText = currentNode.getElementsByClassName(\"nodeLabel\")![0] as HTMLElement;\r\n    // if (toFill) {\r\n    //   spanWithText.style.textDecoration = \"underline\";\r\n    // } else {\r\n    //   spanWithText.removeAttribute('style');\r\n    // }\r\n  }\r\n\r\n  create_triple(states: string, transition: string): string {\r\n    let split = states.split(\"&\");\r\n    let A = split[0], B = split[1];\r\n    let A_rename = this.get_state_rename(A);\r\n    let B_rename = this.get_state_rename(B);\r\n    return `${A}((${A_rename})) -->| ${transition} | ${B}((${B_rename}))`;\r\n  }\r\n\r\n  create_entering_arrow(): string {\r\n    return `START[ ]--> ${this.initialStates}`\r\n  }\r\n\r\n  get_state_rename(name: string) {\r\n    return this.states_rename.get(name)!\r\n  }\r\n\r\n  state_number() {\r\n    return this.states.size;\r\n  }\r\n\r\n  transition_number() {\r\n    return Array.from(this.states).map(e => Array.from(e[1].transitions)).flat().reduce((a, b) => a + b[1].length, 0)\r\n  }\r\n\r\n  // minimize() {\r\n  //   let couples: string[][] = []\r\n  //   let separable = new Set();\r\n  //   for (let i1 = 0; i1 < this.states.size; i1++) {\r\n  //     for (let i2 = i1 + 1; i2 < this.states.size; i2++) {\r\n  //       if (this.acceptingStates.includes(this.states[i1]) != this.acceptingStates.includes(this.states[i2])) separable.add(`${this.states[i1]}-${this.states[i2]}`)\r\n  //       else couples.push([this.states[i1], this.states[i2]]);\r\n  //     }\r\n  //   }\r\n  //   while (true) {\r\n  //     let oldLength = couples.length;\r\n  //     couples = couples.filter(e => {\r\n  //       let fst = e[0], snd = e[1];\r\n  //       let tr0 = this.transitions.filter(t => t.fromState == fst);\r\n  //       let tr1 = this.transitions.filter(t => t.fromState == snd);\r\n  //       for (const letter of this.alphabet) {\r\n  //         let t1 = tr0.find(e => e.symbol == letter)?.toStates\r\n  //         let t2 = tr1.find(e => e.symbol == letter)?.toStates\r\n  //         if (t1 && t2) {\r\n  //           for (const x of t1) {\r\n  //             for (const y of t2) {\r\n  //               if (separable.has(`${x}-${y}`) || separable.has(`${y}-${x}`)) {\r\n  //                 separable.add(`${fst}-${snd}`)\r\n  //                 return false;\r\n  //               }\r\n  //             }\r\n  //           }\r\n  //         }\r\n  //       }\r\n  //       return true;\r\n  //     })\r\n  //     if (couples.length == oldLength) break\r\n  //   }\r\n\r\n  //   for (const couple of couples) {\r\n  //     this.transitions.filter(e => e.fromState == couple[1]).forEach(\r\n  //       s => {\r\n  //         let tr;\r\n  //         if (tr = this.transitions.find(t => t.fromState == couple[0] && t.symbol == s.symbol)) {\r\n  //           for (const next of s.toStates) {\r\n  //             if (!tr.toStates.includes(next)) tr.toStates.push(next)\r\n  //           }\r\n  //         } else {\r\n  //           this.transitions.push({ fromState: couple[0], symbol: s.symbol, toStates: s.toStates })\r\n  //         }\r\n  //       }\r\n  //     )\r\n  //     if (this.initialStates.includes(couple[1])) {\r\n  //       this.initialStates = this.initialStates.filter(e => e != couple[1])\r\n  //       if (!this.initialStates.includes(couple[0])) this.initialStates.push(couple[0])\r\n  //     }\r\n  //     this.acceptingStates = this.acceptingStates.filter(e => e != couple[1])\r\n  //     this.states = this.states.filter(e => e != couple[1])\r\n  //     this.transitions = this.transitions.filter(e => e.fromState != couple[1])\r\n  //     this.transitions.forEach(e => e.toStates = e.toStates.filter(x => x != couple[1]))\r\n  //     this.transitions = this.transitions.filter(t => t.toStates.length != 0)\r\n  //   }\r\n\r\n  //   this.set_state_rename()\r\n  //   console.log(Array.from(separable), couples);\r\n  //   return this;\r\n  // }\r\n}"],"file":"Automaton.js"}