{"version":3,"sources":["../../src/automaton/automaton_type.ts"],"names":["Automaton","State","noam","HisAutomaton2Mine","aut","states","map","e","acceptingStates","some","x","initialState","alphabet","statesMap","Map","statesSet","Set","state","set","name","add","transition","transitions","from","fromState","symbol","to","toStates","forEach","get","addTransition","MyAutomatonToHis","stateList","Array","state2int","indexOf","startState","length","outTransitions","flat","initialStates","push","res","regexToAutomaton","regex","re","string","toAutomaton","minimizeAutomaton","automatonInput","automaton","log","message","console","state_number","error","fsm","convertEnfaToNfa","convertNfaToDfa","numToList","elt","statesToNumbers","convertStatesToNumbers","minimized","minimize","intersectionAutomata","a1","a2","size","intersection","unionAutomata","A1","A2","U","union","complementAutomata","complement","differenceAutomata","c"],"mappings":"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","sourcesContent":["import { Automaton, AutomatonJson, State } from \"../automaton/Automaton.js\";\r\n// @ts-ignore\r\nimport { noam } from '../../public/noam.js';\r\n\r\ninterface HisTransition {\r\n  fromState: number | number[],\r\n  toStates: number[] | number[][],\r\n  symbol: string\r\n}\r\n\r\ninterface HisAutomaton {\r\n  alphabet: string[],\r\n  initialState?: number | number[],\r\n  states: number[],\r\n  transitions: HisTransition[],\r\n  acceptingStates: number[] | number[][]\r\n}\r\n\r\nexport function HisAutomaton2Mine(aut: HisAutomaton): Automaton {\r\n\r\n  let states: State[] = aut.states.map(\r\n    e => new State(\r\n      e + \"\",\r\n      aut.acceptingStates.some(x => x + \"\" == e + \"\"),\r\n      (typeof aut.initialState == \"number\" ? aut.initialState + \"\" == e + \"\" : aut.initialState?.some(x => x + \"\" == e + \"\")) || false,\r\n      aut.alphabet))\r\n\r\n  let statesMap: Map<string, State> = new Map(),\r\n    statesSet: Set<State> = new Set();\r\n  for (const state of states) {\r\n    statesMap.set(state.name, state)\r\n    statesSet.add(state)\r\n  }\r\n\r\n  for (const transition of aut.transitions) {\r\n    let from = transition.fromState\r\n    let symbol = transition.symbol\r\n    let to = transition.toStates\r\n    to.forEach(state =>\r\n      statesMap.get(from + \"\")?.addTransition(symbol, statesMap.get(state + \"\")!))\r\n  }\r\n\r\n  return new Automaton(statesSet);\r\n}\r\n\r\nexport function MyAutomatonToHis(aut: Automaton): HisAutomaton {\r\n  let stateList = Array.from(aut.states).map(e => e[1]);\r\n  let state2int = (state: State) => stateList.indexOf(state);\r\n  let states = stateList.map(e => state2int(e))\r\n  let startState = states.length;\r\n  let transitions: HisTransition[] = stateList.map(state => Array.from(state.outTransitions).map(transition =>\r\n  ({\r\n    fromState: state2int(state),\r\n    symbol: transition[0],\r\n    toStates: transition[1].map(e => state2int(e))\r\n  })).flat()).flat();\r\n  if (aut.initialStates.length > 1) {\r\n    transitions.push(({\r\n      fromState: startState,\r\n      symbol: \"$\",\r\n      toStates: aut.initialStates.map(e => state2int(e))\r\n    }));\r\n    states.push(startState)\r\n  } else startState = state2int(aut.initialStates[0])\r\n  let res: HisAutomaton = {\r\n    acceptingStates: aut.acceptingStates.map(e => state2int(e)),\r\n    alphabet: Array.from(aut.alphabet),\r\n    states: states,\r\n    initialState: startState,\r\n    transitions: transitions\r\n  }\r\n  return res;\r\n}\r\n\r\n/** Return the mDFA for a regex */\r\nexport function regexToAutomaton(regex: string): Automaton {\r\n  let res = noam.re.string.toAutomaton(regex);\r\n  return minimizeAutomaton(res);\r\n}\r\n\r\nexport function minimizeAutomaton(automatonInput: HisAutomaton | Automaton): Automaton {\r\n  let automaton = automatonInput instanceof Automaton ?\r\n    MyAutomatonToHis(automatonInput) : automatonInput\r\n\r\n  let log = (message: string, aut: HisAutomaton | Automaton) => {\r\n    console.log(message, automaton.states.length);\r\n    if ((aut instanceof Automaton ? aut.state_number() : aut.states.length) > 5000)\r\n      console.error(message, automaton.states.length);\r\n  }\r\n\r\n  log(\"1 - Converting Enfa to NFA\", automaton);\r\n  automaton = noam.fsm.convertEnfaToNfa(automaton);\r\n  log(\"2 - Converting NFA to DFA\", automaton);\r\n  automaton = noam.fsm.convertNfaToDfa(automaton);\r\n  log(\"3 - Converting state to numbers \", automaton);\r\n\r\n  let numToList = (elt: number | number[]) => typeof elt == 'number' ? [elt] : elt!\r\n  try {\r\n    let statesToNumbers = HisAutomaton2Mine(noam.fsm.convertStatesToNumbers(automaton))\r\n    log(\"4 - Minimizing automaton \", statesToNumbers);\r\n    let minimized = statesToNumbers.minimize()\r\n    log(\"5 - Minimization OK, \", minimized);\r\n    return minimized\r\n  } catch {\r\n    throw 'Error'\r\n  }\r\n}\r\n\r\nexport function intersectionAutomata(a1: Automaton, a2: Automaton): Automaton {\r\n  console.log(\"Intersection, \", a1.states.size, a2.states.size);\r\n  return minimizeAutomaton(noam.fsm.intersection(MyAutomatonToHis(a1), MyAutomatonToHis(a2)))\r\n}\r\n\r\nexport function unionAutomata(a1: Automaton, a2: Automaton): Automaton {\r\n  let A1 = MyAutomatonToHis(a1);\r\n  let A2 = MyAutomatonToHis(a2);\r\n  let U: HisAutomaton = noam.fsm.union(A1, A2);\r\n  let res = minimizeAutomaton(U)\r\n  return res\r\n}\r\n\r\nexport function complementAutomata(a1: Automaton): Automaton {\r\n  return HisAutomaton2Mine(noam.fsm.complement(MyAutomatonToHis(minimizeAutomaton(MyAutomatonToHis(a1)))))\r\n}\r\n\r\nexport function differenceAutomata(a1: Automaton, a2: Automaton): Automaton {\r\n  let c = complementAutomata(a2);\r\n  return intersectionAutomata(a1, c)\r\n}"],"file":"automaton_type.js"}