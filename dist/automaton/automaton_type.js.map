{"version":3,"sources":["../../src/automaton/automaton_type.ts"],"names":["Automaton","State","noam","HisAutomaton2Mine","aut","states","map","e","acceptingStates","includes","initialState","alphabet","statesMap","Map","state","set","name","transition","transitions","from","fromState","symbol","to","toStates","forEach","get","addTransition","res","Array","initialStates","filter","s","isInitial","isAccepting","MyAutomatonToHis","stateList","state2int","indexOf","startState","length","flat","push","regexToAutomaton","regex","fsm","minimize","re","string","toAutomaton","minimizeAutomaton","automaton","hisMinimized","statesToNumbers","convertStatesToNumbers","minimized","intersectionAutomata","a1","a2","intersection","unionAutomata","A1","A2","U","union","complementAutomata","complement","differenceAutomata","c"],"mappings":"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","sourcesContent":["import { Automaton, AutomatonJson, State } from \"../automaton/Automaton.js\";\r\n// @ts-ignore\r\nimport { noam } from '../../public/noam.js';\r\n\r\ninterface HisTransition {\r\n  fromState: number,\r\n  toStates: number[],\r\n  symbol: string\r\n}\r\n\r\ninterface HisAutomaton {\r\n  alphabet: string[],\r\n  initialState?: number | number[],\r\n  states: number[],\r\n  transitions: HisTransition[],\r\n  acceptingStates: number[]\r\n}\r\n\r\nexport function HisAutomaton2Mine(aut: HisAutomaton): Automaton {\r\n\r\n  let states: State[] = aut.states.map(\r\n    e => new State(\r\n      e + \"\",\r\n      aut.acceptingStates.map(e => e + \"\").includes(e + \"\"),\r\n      (typeof aut.initialState == \"number\" ? aut.initialState + \"\" == e + \"\" : aut.initialState?.map(e => e + \"\").includes(e + \"\")) || false,\r\n      aut.alphabet))\r\n\r\n  let statesMap: Map<string, State> = new Map()\r\n  for (const state of states) {\r\n    statesMap.set(state.name, state)\r\n  }\r\n\r\n  for (const transition of aut.transitions) {\r\n    let from = transition.fromState\r\n    let symbol = transition.symbol\r\n    let to = transition.toStates\r\n    to.forEach(state =>\r\n      statesMap.get(from + \"\")?.addTransition(symbol, statesMap.get(state + \"\")!))\r\n  }\r\n\r\n  let res: AutomatonJson = {\r\n    alphabet: Array.from(aut.alphabet),\r\n    initialStates: states.filter(s => s.isInitial),\r\n    acceptingStates: states.filter(s => s.isAccepting),\r\n    states: statesMap,\r\n  }\r\n  return new Automaton(res);\r\n}\r\n\r\nexport function MyAutomatonToHis(aut: Automaton): HisAutomaton {\r\n  let stateList = Array.from(aut.states).map(e => e[1]);\r\n  let state2int = (state: State) => stateList.indexOf(state);\r\n  let states = stateList.map(e => state2int(e))\r\n  let startState = states.length;\r\n  let transitions: HisTransition[] = stateList.map(state => Array.from(state.transitions).map(transition =>\r\n  ({\r\n    fromState: state2int(state),\r\n    symbol: transition[0],\r\n    toStates: transition[1].map(e => state2int(e))\r\n  })).flat()).flat();\r\n  //   )) aut.transitions.map(e => ({\r\n  //   fromState: state2int(e.fromState), symbol: e.symbol, toStates: e.toStates.map(e => state2int(e))\r\n  // }))\r\n  if (aut.initialStates.length > 1) {\r\n    transitions.push(({\r\n      fromState: startState,\r\n      symbol: \"$\",\r\n      toStates: aut.initialStates.map(e => state2int(e))\r\n    }));\r\n    states.push(startState)\r\n  } else startState = state2int(aut.initialStates[0])\r\n  let res: HisAutomaton = {\r\n    acceptingStates: aut.acceptingStates.map(e => state2int(e)),\r\n    alphabet: Array.from(aut.alphabet),\r\n    states: states,\r\n    initialState: startState,\r\n    transitions: transitions\r\n  }\r\n  return res;\r\n}\r\n\r\nexport function regexToAutomaton(regex: string): Automaton {\r\n  let res = noam.fsm.minimize(noam.re.string.toAutomaton(regex));\r\n  return HisAutomaton2Mine(res);\r\n}\r\n\r\nexport function minimizeAutomaton(automaton: HisAutomaton): Automaton {\r\n  // automaton = noam.fsm.convertEnfaToNfa(automaton);\r\n  // automaton = noam.fsm.convertNfaToDfa(automaton);\r\n  // // HELP PROFESSORI\r\n  // automaton = noam.fsm.minimize(automaton);\r\n  // let myAutomaton = HisAutomaton2Mine(noam.fsm.convertStatesToNumbers(automaton));\r\n  // console.log(myAutomaton.matrix_to_mermaid());\r\n  // let minimized = myAutomaton.minimize()\r\n  // console.log(\"-\".repeat(50));\r\n  // console.log(JSON.stringify(automaton, null, 4));\r\n\r\n  // console.log(minimized.matrix_to_mermaid());\r\n  // console.log(\"=\".repeat(50));\r\n  // console.log(\"1\");\r\n  let hisMinimized = noam.fsm.minimize(automaton)\r\n  // console.log(\"2\");\r\n  let statesToNumbers = noam.fsm.convertStatesToNumbers(hisMinimized)\r\n  // console.log(\"3\");\r\n  let minimized = HisAutomaton2Mine(statesToNumbers)\r\n  // console.log(\"4\");\r\n  return minimized\r\n}\r\n\r\nexport function intersectionAutomata(a1: Automaton, a2: Automaton): Automaton {\r\n  return minimizeAutomaton(noam.fsm.intersection(MyAutomatonToHis(a1), MyAutomatonToHis(a2)))\r\n}\r\n\r\nexport function unionAutomata(a1: Automaton, a2: Automaton): Automaton {\r\n  let A1 = MyAutomatonToHis(a1);\r\n  let A2 = MyAutomatonToHis(a2);\r\n  let U: HisAutomaton = noam.fsm.union(A1, A2);\r\n  let res = minimizeAutomaton(U)\r\n  return res\r\n}\r\n\r\nexport function complementAutomata(a1: Automaton): Automaton {\r\n  return minimizeAutomaton(noam.fsm.complement(MyAutomatonToHis(a1)))\r\n}\r\n\r\nexport function differenceAutomata(a1: Automaton, a2: Automaton): Automaton {\r\n  let c = complementAutomata(a2);\r\n  return intersectionAutomata(a1, c)\r\n}"],"file":"automaton_type.js"}