{"version":3,"sources":["../../src/tools/Utilities.ts"],"names":["Automaton","State","same_vector","v1","v2","map","elt","pos","every","e","generate_prefix_list","str","Array","length","fill","_","i","substring","reverse","generate_suffix_list","count_str_occurrences","obj","from","filter","f","boolToString","bool","allStringFromAlphabet","params","res","alphabet","sort","level","maxLength","res1","forEach","a","push","txtToAutomaton","content","SYMBOL_LIST","sContent","split","IN_INITIAL","IN_TRANSITION","IN_ACCEPTING","statePhase","initalState","acceptingStates","transitions","statesName","Set","alphabetSet","line","includes","stateName","indexOf","add","match","current","symbol","next","alphabetOneLetter","splice","stateMap","Map","stateSet","state","set","get","addTransition","automaton"],"mappings":"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","sourcesContent":["import { Automaton, State } from \"../automaton/Automaton.js\";\r\n\r\nexport type myFunction<S, T> = { (data: S): T; };\r\n\r\nexport function same_vector(v1: any[], v2: any[]): boolean {\r\n  return v1.map((elt, pos) => elt == v2[pos]).every(e => e);\r\n}\r\n\r\n/**\r\n * creates all generate_prefix_list from the str passed in input :\r\n * exemple for hello : ['', 'h', 'he', 'hel', 'hell', 'hello']\r\n */\r\nexport const generate_prefix_list = (str: string) =>\r\n  Array(str.length + 1).fill(0).map((_, i) => str.substring(0, i)).reverse();\r\n\r\n/**\r\n * creates all suffix from the str passed in input :\r\n * exemple for hello : ['hello', 'ello', 'llo', 'lo', 'o', '']\r\n */\r\nexport const generate_suffix_list = (str: string) =>\r\n  Array(str.length + 1).fill(\"\").map((_, i) => str.substring(i, str.length + 1));\r\n\r\nexport const count_str_occurrences = (str: string, obj: string) =>\r\n  Array.from(str).filter(f => f == obj).length\r\n\r\nexport function boolToString(bool: boolean): string {\r\n  return bool ? \"1\" : \"0\";\r\n}\r\n\r\nexport function allStringFromAlphabet(params: { alphabet: string[] | string, maxLength: number }) {\r\n  let res: string[] = [\"\"]\r\n  let alphabet = Array.from(params.alphabet).sort()\r\n  let level = [\"\"]\r\n  while (res[res.length - 1].length < params.maxLength) {\r\n    let res1: string[] = []\r\n    level.forEach(e => alphabet.forEach(a => {\r\n      res.push(e + a)\r\n      res1.push(e + a)\r\n    }))\r\n    level = res1\r\n  }\r\n  return res;\r\n}\r\n\r\nexport function txtToAutomaton(content: string) {\r\n  const SYMBOL_LIST = Array.from(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\r\n\r\n  let sContent = content.split(\"\\n\");\r\n  let IN_INITIAL = 0, IN_TRANSITION = 1, IN_ACCEPTING = 2;\r\n  let statePhase = IN_INITIAL;\r\n  const initalState: string[] = [], acceptingStates: string[] = [],\r\n    transitions: { current: string, symbol: string, next: string }[] = [],\r\n    statesName: Set<string> = new Set(), alphabetSet: Set<string> = new Set();\r\n  for (const line of sContent) {\r\n    if (!line.includes(\"-\")) {\r\n      let stateName = line.substring(line.indexOf('[') + 1, line.indexOf(']'));\r\n      statesName.add(stateName)\r\n      if (statePhase == IN_INITIAL) {\r\n        initalState.push(stateName);\r\n      } else {\r\n        statePhase = IN_ACCEPTING;\r\n        acceptingStates.push(stateName)\r\n      }\r\n    } else if (line.match(/[a-zA-Z0-9]+/)) {\r\n      statePhase = IN_TRANSITION;\r\n      let split = line.match(/[A-Za-z0-9]+/g)!;\r\n      let current = split[1];\r\n      let symbol = split[0];\r\n      let next = split[2];\r\n      transitions.push({\r\n        current: current,\r\n        next: next,\r\n        symbol: symbol\r\n      })\r\n      statesName.add(current);\r\n      statesName.add(next);\r\n      alphabetSet.add(symbol);\r\n    }\r\n  }\r\n  let alphabet = Array.from(alphabetSet);\r\n  let alphabetOneLetter = SYMBOL_LIST.splice(0, alphabet.length)\r\n  let stateMap: Map<string, State> = new Map();\r\n  let stateSet: Set<State> = new Set();\r\n  statesName.forEach(e => {\r\n    let state = new State(e, acceptingStates.includes(e), initalState.includes(e), alphabetOneLetter)\r\n    stateMap.set(e, state);\r\n    stateSet.add(state)\r\n  });\r\n  transitions.forEach(({ current, symbol, next }) =>\r\n    stateMap.get(current)!.addTransition(\r\n      alphabetOneLetter[alphabet.indexOf(symbol)],\r\n      stateMap.get(next)!)\r\n  )\r\n\r\n  let automaton = new Automaton(stateSet);\r\n  return automaton;\r\n}"],"file":"Utilities.js"}