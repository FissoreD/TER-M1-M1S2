{"version":3,"sources":["../../src/tools/Utilities.ts"],"names":["same_vector","v1","v2","map","elt","pos","every","e","generate_prefix_list","str","Array","length","fill","_","i","substring","reverse","generate_suffix_list","count_str_occurrences","obj","from","filter","f","boolToString","bool"],"mappings":"AAEA,MAAO,SAASA,CAAAA,WAAT,CAAqBC,EAArB,CAAgCC,EAAhC,CAAoD,CACzD,MAAOD,CAAAA,EAAE,CAACE,GAAH,CAAO,CAACC,GAAD,CAAMC,GAAN,GAAcD,GAAG,EAAIF,EAAE,CAACG,GAAD,CAA9B,EAAqCC,KAArC,CAA2CC,CAAC,EAAIA,CAAhD,CACR,CAMD,MAAO,MAAMC,CAAAA,oBAAoB,CAAIC,GAAD,EAClCC,KAAK,CAACD,GAAG,CAACE,MAAJ,CAAa,CAAd,CAAL,CAAsBC,IAAtB,CAA2B,CAA3B,EAA8BT,GAA9B,CAAkC,CAACU,CAAD,CAAIC,CAAJ,GAAUL,GAAG,CAACM,SAAJ,CAAc,CAAd,CAAiBD,CAAjB,CAA5C,EAAiEE,OAAjE,EADK,CAOP,MAAO,MAAMC,CAAAA,oBAAoB,CAAIR,GAAD,EAClCC,KAAK,CAACD,GAAG,CAACE,MAAJ,CAAa,CAAd,CAAL,CAAsBC,IAAtB,CAA2B,EAA3B,EAA+BT,GAA/B,CAAmC,CAACU,CAAD,CAAIC,CAAJ,GAAUL,GAAG,CAACM,SAAJ,CAAcD,CAAd,CAAiBL,GAAG,CAACE,MAAJ,CAAa,CAA9B,CAA7C,CADK,CAGP,MAAO,MAAMO,CAAAA,qBAAqB,CAAG,CAACT,GAAD,CAAcU,GAAd,GACnCT,KAAK,CAACU,IAAN,CAAWX,GAAX,EAAgBY,MAAhB,CAAuBC,CAAC,EAAIA,CAAC,EAAIH,GAAjC,EAAsCR,MADjC,CAGP,MAAO,SAASY,CAAAA,YAAT,CAAsBC,IAAtB,CAA6C,CAClD,MAAOA,CAAAA,IAAI,CAAG,GAAH,CAAS,GACrB","sourcesContent":["export type myFunction<S, T> = { (data: S): T; };\r\n\r\nexport function same_vector(v1: any[], v2: any[]): boolean {\r\n  return v1.map((elt, pos) => elt == v2[pos]).every(e => e);\r\n}\r\n\r\n/**\r\n * creates all generate_prefix_list from the str passed in input :\r\n * exemple for hello : ['', 'h', 'he', 'hel', 'hell', 'hello']\r\n */\r\nexport const generate_prefix_list = (str: string) =>\r\n  Array(str.length + 1).fill(0).map((_, i) => str.substring(0, i)).reverse();\r\n\r\n/**\r\n * creates all suffix from the str passed in input :\r\n * exemple for hello : ['hello', 'ello', 'llo', 'lo', 'o', '']\r\n */\r\nexport const generate_suffix_list = (str: string) =>\r\n  Array(str.length + 1).fill(\"\").map((_, i) => str.substring(i, str.length + 1));\r\n\r\nexport const count_str_occurrences = (str: string, obj: string) =>\r\n  Array.from(str).filter(f => f == obj).length\r\n\r\nexport function boolToString(bool: boolean): string {\r\n  return bool ? \"1\" : \"0\";\r\n}"],"file":"Utilities.js"}