{"version":3,"sources":["../../src/tools/Utilities.ts"],"names":["same_vector","v1","v2","map","elt","pos","every","e","generate_prefix_list","str","Array","length","fill","_","i","substring","reverse","generate_suffix_list","count_str_occurrences","obj","from","filter","f","boolToString","bool","allStringFromAlphabet","params","res","alphabet","sort","level","maxLength","res1","forEach","a","push","myLog","optionalParam","console","log"],"mappings":"AAEA,MAAO,SAASA,CAAAA,WAAT,CAAqBC,EAArB,CAAgCC,EAAhC,CAAoD,CACzD,MAAOD,CAAAA,EAAE,CAACE,GAAH,CAAO,CAACC,GAAD,CAAMC,GAAN,GAAcD,GAAG,EAAIF,EAAE,CAACG,GAAD,CAA9B,EAAqCC,KAArC,CAA2CC,CAAC,EAAIA,CAAhD,CACR,CAMD,MAAO,MAAMC,CAAAA,oBAAoB,CAAIC,GAAD,EAClCC,KAAK,CAACD,GAAG,CAACE,MAAJ,CAAa,CAAd,CAAL,CAAsBC,IAAtB,CAA2B,CAA3B,EAA8BT,GAA9B,CAAkC,CAACU,CAAD,CAAIC,CAAJ,GAAUL,GAAG,CAACM,SAAJ,CAAc,CAAd,CAAiBD,CAAjB,CAA5C,EAAiEE,OAAjE,EADK,CAOP,MAAO,MAAMC,CAAAA,oBAAoB,CAAIR,GAAD,EAClCC,KAAK,CAACD,GAAG,CAACE,MAAJ,CAAa,CAAd,CAAL,CAAsBC,IAAtB,CAA2B,EAA3B,EAA+BT,GAA/B,CAAmC,CAACU,CAAD,CAAIC,CAAJ,GAAUL,GAAG,CAACM,SAAJ,CAAcD,CAAd,CAAiBL,GAAG,CAACE,MAAJ,CAAa,CAA9B,CAA7C,CADK,CAGP,MAAO,MAAMO,CAAAA,qBAAqB,CAAG,CAACT,GAAD,CAAcU,GAAd,GACnCT,KAAK,CAACU,IAAN,CAAWX,GAAX,EAAgBY,MAAhB,CAAuBC,CAAC,EAAIA,CAAC,EAAIH,GAAjC,EAAsCR,MADjC,CAGP,MAAO,SAASY,CAAAA,YAAT,CAAsBC,IAAtB,CAA6C,CAClD,MAAOA,CAAAA,IAAI,CAAG,GAAH,CAAS,GACrB,CAED,MAAO,SAASC,CAAAA,qBAAT,CAA+BC,MAA/B,CAA2F,CAChG,GAAIC,CAAAA,GAAa,CAAG,CAAC,EAAD,CAApB,CACA,GAAIC,CAAAA,QAAQ,CAAGlB,KAAK,CAACU,IAAN,CAAWM,MAAM,CAACE,QAAlB,EAA4BC,IAA5B,EAAf,CACA,GAAIC,CAAAA,KAAK,CAAG,CAAC,EAAD,CAAZ,CACA,MAAOH,GAAG,CAACA,GAAG,CAAChB,MAAJ,CAAa,CAAd,CAAH,CAAoBA,MAApB,CAA6Be,MAAM,CAACK,SAA3C,CAAsD,CACpD,GAAIC,CAAAA,IAAc,CAAG,EAArB,CACAF,KAAK,CAACG,OAAN,CAAc1B,CAAC,EAAIqB,QAAQ,CAACK,OAAT,CAAiBC,CAAC,EAAI,CACvCP,GAAG,CAACQ,IAAJ,CAAS5B,CAAC,CAAG2B,CAAb,EACAF,IAAI,CAACG,IAAL,CAAU5B,CAAC,CAAG2B,CAAd,CACD,CAHkB,CAAnB,EAIAJ,KAAK,CAAGE,IACT,CACD,MAAOL,CAAAA,GACR,CAED,MAAO,IAAIS,CAAAA,KAAK,CAAG,CAACF,CAAD,CAAU,GAAGG,aAAb,GAAsC,CACvD,GAAI,KAAJ,CAAWC,OAAO,CAACC,GAAR,CAAYL,CAAZ,CAAe,GAAGG,aAAlB,CACZ,CAFM","sourcesContent":["export type myFunction<S, T> = { (data: S): T; };\r\n\r\nexport function same_vector(v1: any[], v2: any[]): boolean {\r\n  return v1.map((elt, pos) => elt == v2[pos]).every(e => e);\r\n}\r\n\r\n/**\r\n * creates all generate_prefix_list from the str passed in input :\r\n * exemple for hello : ['', 'h', 'he', 'hel', 'hell', 'hello']\r\n */\r\nexport const generate_prefix_list = (str: string) =>\r\n  Array(str.length + 1).fill(0).map((_, i) => str.substring(0, i)).reverse();\r\n\r\n/**\r\n * creates all suffix from the str passed in input :\r\n * exemple for hello : ['hello', 'ello', 'llo', 'lo', 'o', '']\r\n */\r\nexport const generate_suffix_list = (str: string) =>\r\n  Array(str.length + 1).fill(\"\").map((_, i) => str.substring(i, str.length + 1));\r\n\r\nexport const count_str_occurrences = (str: string, obj: string) =>\r\n  Array.from(str).filter(f => f == obj).length\r\n\r\nexport function boolToString(bool: boolean): string {\r\n  return bool ? \"1\" : \"0\";\r\n}\r\n\r\nexport function allStringFromAlphabet(params: { alphabet: string[] | string, maxLength: number }) {\r\n  let res: string[] = [\"\"]\r\n  let alphabet = Array.from(params.alphabet).sort()\r\n  let level = [\"\"]\r\n  while (res[res.length - 1].length < params.maxLength) {\r\n    let res1: string[] = []\r\n    level.forEach(e => alphabet.forEach(a => {\r\n      res.push(e + a)\r\n      res1.push(e + a)\r\n    }))\r\n    level = res1\r\n  }\r\n  return res;\r\n}\r\n\r\nexport let myLog = (a?: any, ...optionalParam: any[]) => {\r\n  if (false) console.log(a, ...optionalParam);\r\n}\r\n"],"file":"Utilities.js"}