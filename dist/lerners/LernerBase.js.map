{"version":3,"sources":["../../src/lerners/LernerBase.ts"],"names":["boolToString","generate_prefix_list","LernerBase","finish","constructor","teacher","alphabet","Array","from","member_number","equiv_number","E","S","SA","observation_table","add_row","forEach","elt","update_observation_table","key","value","old_value","undefined","make_member","pref","suff","word","answer","i","length","pref1","substring","suff1","includes","charAt","indexOf","member","make_equiv","a","equiv","add_elt_in_S","new_elt","after_member","added_list","prefix_list","prefix","move_from_SA_to_S","new_word","push","row_name","e","automaton","accept_word_nfa","index","splice","add_column","new_col","L","l","s","make_next_query","close_rep","consistence_rep","is_close","is_consistent","make_automaton","console","log","table_to_update_after_equiv","make_all_queries","same_row","b"],"mappings":"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","sourcesContent":["import { Automaton } from \"../automaton/Automaton.js\";\r\nimport { Teacher } from \"../teacher/Teacher.js\";\r\nimport { boolToString, generate_prefix_list } from \"../tools/Utilities.js\";\r\n\r\nexport type Map_string_string = { [key: string]: string };\r\n\r\nexport abstract class LernerBase {\r\n  alphabet: string[];\r\n  E: string[];\r\n  S: string[];\r\n  SA: string[];\r\n  observation_table: Map_string_string;\r\n  teacher: Teacher;\r\n  member_number: number;\r\n  equiv_number: number;\r\n  finish = false;\r\n  automaton: undefined | Automaton;\r\n\r\n  constructor(teacher: Teacher) {\r\n    this.alphabet = Array.from(teacher.alphabet);\r\n    this.teacher = teacher;\r\n    this.member_number = 0;\r\n    this.equiv_number = 0;\r\n    this.E = [\"\"];\r\n    this.S = [\"\"];\r\n    this.SA = Array.from(this.alphabet);\r\n    this.observation_table = {};\r\n    this.add_row(\"\")\r\n    this.SA.forEach(elt => this.add_row(elt));\r\n  }\r\n\r\n  update_observation_table(key: string, value: string) {\r\n    let old_value = this.observation_table[key];\r\n    if (old_value != undefined) value = old_value + value\r\n    this.observation_table[key] = value;\r\n  }\r\n\r\n  /**\r\n   * 1. Takes a string in parameter and s in {@link S} and e in {@link E}  \r\n   * 2. Asks to the {@link teacher} if question is accepted  \r\n   * 3. Updates {@link observation_table} wrt the answer  \r\n   * No modification is performed in {@link S}, {@link E} or {@link SA} sets\r\n   */\r\n  make_member(pref: string, suff: string) {\r\n    let word = pref + suff;\r\n    let answer: string;\r\n    // If we know already the answer, we do not query the teacher\r\n    for (let i = 0; i < word.length + 1; i++) {\r\n      let pref1 = word.substring(0, i);\r\n      let suff1 = word.substring(i);\r\n      if (pref1 == pref) continue;\r\n      if (this.E.includes(suff1)) {\r\n        if ((this.S.includes(pref1) || this.SA.includes(pref1)) && this.observation_table[pref1]) {\r\n          answer = this.observation_table[pref1].charAt(this.E.indexOf(suff1));\r\n          this.update_observation_table(pref, answer)\r\n          if (answer == undefined) throw 'Parameter is not a number!';\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    answer = this.teacher.member(word);\r\n    this.update_observation_table(pref, answer)\r\n    this.member_number++;\r\n  }\r\n\r\n  /**\r\n   * Takes in parameter an {@link Automaton} and ask \r\n   * to the teacher if the automaton knows the language.\r\n   * If so : the Lerner has learnt the language\r\n   * Else : it appends the counter-exemple to {@link S}\r\n   * @param a an Automaton\r\n   * @returns undefined if {@link a} recognize the teacher's language, a counter-exemple (as a string) otherwise.\r\n   */\r\n  make_equiv(a: Automaton) {\r\n    let answer = this.teacher.equiv(a);\r\n    this.equiv_number++;\r\n    return answer;\r\n  }\r\n\r\n  /**\r\n   * For all prefix p of {@link new_elt} if p is not in {@link S} :\r\n   * remove p from {@link SA} and add it to {@link S}\r\n   * @param new_elt the {@link new_elt} to add in {@link S}\r\n   * @returns the list of added elt in SA or S\r\n   */\r\n  add_elt_in_S(new_elt: string, after_member = false): string[] {\r\n    let added_list: string[] = [];\r\n    let prefix_list = generate_prefix_list(new_elt);\r\n    for (const prefix of prefix_list) {\r\n      if (this.S.includes(prefix)) return added_list;\r\n      if (this.SA.includes(prefix)) {\r\n        this.move_from_SA_to_S(prefix);\r\n        this.alphabet.forEach(a => {\r\n          const new_word = prefix + a;\r\n          if (!this.SA.includes(new_word) && !this.S.includes(new_word)) {\r\n            this.add_row(new_word, after_member);\r\n            this.SA.push(new_word);\r\n            added_list.push(new_word);\r\n          }\r\n        })\r\n      } else {\r\n        this.S.push(prefix);\r\n        this.add_row(prefix, after_member);\r\n        added_list.push(prefix);\r\n        this.alphabet.forEach(a => {\r\n          let new_word = prefix + a;\r\n          if (!this.SA.includes(new_word) && !this.S.includes(new_word)) {\r\n            this.SA.push(prefix + a);\r\n            this.add_row(prefix + a)\r\n            added_list.push(prefix + a)\r\n          }\r\n        });\r\n      }\r\n      after_member = false;\r\n    }\r\n    return added_list;\r\n  }\r\n\r\n  /**\r\n   * @param row_name \r\n   * adds a row to the {@link observation_table} \r\n   * querying the teacher for all tuple ({@link row_name}, e) where e is in {@link E}\r\n   * @see {@link make_member}\r\n   */\r\n  add_row(row_name: string, after_member = false) {\r\n    this.E.forEach(e => {\r\n      if (after_member && e == \"\")\r\n        this.observation_table[row_name] = boolToString(!this.automaton!.accept_word_nfa(row_name));\r\n      else this.make_member(row_name, e)\r\n    });\r\n  }\r\n\r\n  move_from_SA_to_S(elt: string) {\r\n    const index = this.SA.indexOf(elt);\r\n    if (index != -1) this.SA.splice(index, 1);\r\n    this.S.push(elt);\r\n  }\r\n\r\n  add_column(new_col: string) {\r\n    let L = [this.SA, this.S];\r\n    L.forEach(l => l.forEach(s => this.make_member(s, new_col)));\r\n    this.E.push(new_col);\r\n  }\r\n\r\n  /**\r\n   * The lerner finds the next question according to \r\n   * current context\r\n   */\r\n  make_next_query() {\r\n    if (this.finish) return;\r\n    var close_rep;\r\n    var consistence_rep;\r\n    // console.log(11);\r\n    if (close_rep = this.is_close()) {\r\n      // console.log(12);\r\n      this.add_elt_in_S(close_rep);\r\n    } else if (consistence_rep = this.is_consistent()) {\r\n      // console.log(13);\r\n      let new_col = consistence_rep[2]\r\n      this.add_column(new_col);\r\n    } else {\r\n      // console.log(14);\r\n      let automaton = this.make_automaton();\r\n      this.automaton = automaton;\r\n      let answer = this.make_equiv(automaton);\r\n      console.log(\"Here is a breakpoint : LernerBar, Line 168\");\r\n\r\n      if (answer != undefined) {\r\n        this.table_to_update_after_equiv(answer!)\r\n      } else {\r\n        this.finish = true;\r\n      }\r\n    }\r\n    // console.log(15);\r\n  }\r\n\r\n  make_all_queries() {\r\n    while (!this.finish) {\r\n      this.make_next_query()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Every lerner can update differently the observation table according to its implementation\r\n   * @param answer the answer of teacher after equiv question\r\n   */\r\n  abstract table_to_update_after_equiv(answer: string): void;\r\n\r\n  abstract make_automaton(): Automaton;\r\n\r\n  abstract is_close(): string | undefined;\r\n\r\n  abstract is_consistent(): string[] | undefined;\r\n\r\n  same_row(a: string, b: string) {\r\n    return this.observation_table[a] == this.observation_table[b];\r\n  }\r\n}"],"file":"LernerBase.js"}