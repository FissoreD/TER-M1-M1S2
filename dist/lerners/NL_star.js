import{Automaton,State}from"../automaton/Automaton.js";import{generate_suffix_list}from"../tools/Utilities.js";import{LernerBase}from"./LernerBase.js";export class NL_star extends LernerBase{constructor(teacher){super(teacher);this.prime_lines=Array.from(this.alphabet).concat("")}is_prime(row_key){if(this.prime_lines==undefined)this.prime_lines=[];let row_value=this.observation_table[row_key];if(row_value.length<2||parseInt(row_value)==0)return true;let res="0".repeat(row_value.length);Object.values(this.observation_table).forEach(value=>{if(value!=row_value&&this.is_covered(value,row_value)){res=this.row_union(res,value)}});return res!=row_value}row_union(row1,row2){return Array.from(row1).map((e,pos)=>[e,row2.charAt(pos)].includes("1")?"1":"0").join("")}is_covered(row1,row2){return Array.from(row1).every((e,pos)=>e<=row2.charAt(pos))}check_prime_lines(){this.prime_lines=[...this.S,...this.SA].filter(l=>this.is_prime(l));console.log(this.prime_lines)}add_elt_in_S(new_elt){let added_list=super.add_elt_in_S(new_elt);added_list.forEach(e=>{if(!this.prime_lines?.includes(e)&&this.is_prime(e)){this.prime_lines.push(e)}});console.log("In s before");this.check_prime_lines();console.log("In s aftere");return added_list}add_elt_in_E(new_elt){let suffix_list=generate_suffix_list(new_elt);for(const suffix of suffix_list){if(this.E.includes(suffix))break;this.SA.forEach(s=>this.make_member(s,suffix));this.S.forEach(s=>this.make_member(s,suffix));this.E.push(suffix)}console.log("I'm in Add in elt function ");this.check_prime_lines();console.log("Now I've made my check prime line")}is_close(){return this.SA.find(t=>!this.S.some(s=>this.same_row(s,t))&&this.prime_lines.includes(t))}is_consistent(){for(let s1_ind=0;s1_ind<this.S.length;s1_ind++){for(let s2_ind=s1_ind+1;s2_ind<this.S.length;s2_ind++){let s1=this.S[s1_ind];let s2=this.S[s2_ind];let value_s1=this.observation_table[s1];let value_s2=this.observation_table[s2];if(this.is_covered(value_s1,value_s2)){for(const a of this.alphabet){let value_s1_p=this.observation_table[s1+a];let value_s2_p=this.observation_table[s2+a];if(!this.is_covered(value_s1_p,value_s2_p)){for(let i=0;i<this.E.length;i++){if(this.observation_table[s1+a][i]<this.observation_table[s2+a][i]&&!this.E.includes(a+this.E[i])){return[s1,s2,a+this.E[i]]}}}}}else if(this.is_covered(value_s2,value_s1)){for(const a of this.alphabet){let value_s1_p=this.observation_table[s1+a];let value_s2_p=this.observation_table[s2+a];if(!this.is_covered(value_s2_p,value_s1_p))for(let i=0;i<this.E.length;i++){if(this.observation_table[s1+a][i]<this.observation_table[s2+a][i]&&!this.E.includes(a+this.E[i])){return[s2,s1,a+this.E[i]]}}}}}}}make_automaton(){let wordForState=[],statesMap=new Map,acceptingStates=[],initialStates=[],stateSet=new Set;this.prime_lines.forEach(s=>{if(this.S.includes(s)){let name=this.observation_table[s];if(!statesMap.get(name)){let state=new State(name,name[0]=="1",this.is_covered(name,this.observation_table[""]),this.alphabet);wordForState.push(s);if(state.isAccepting)acceptingStates.push(state);if(state.isInitial)initialStates.push(state);statesMap.set(name,state);stateSet.add(state)}}});for(const word of wordForState){let name=this.observation_table[word];for(const symbol of this.alphabet){let rowNext=this.observation_table[word+symbol];for(const[name1,state]of statesMap){if(this.is_covered(name1,rowNext))statesMap.get(name).outTransitions.get(symbol).push(state)}}}console.log();this.automaton=new Automaton(stateSet);return this.automaton}table_to_update_after_equiv(answer){this.add_elt_in_E(answer)}}
//# sourceMappingURL=NL_star.js.map