{"version":3,"sources":["../../src/teacher/TeacherAutomaton.ts"],"names":["differenceAutomata","minimizeAutomaton","MyAutomatonToHis","regexToAutomaton","boolToString","TeacherAutomaton","constructor","regex","description","automaton","alphabet","member","sentence","accept_word_nfa","equiv","counterExemple","automatonDiff","acceptingStates","length","undefined","toExplore","startState","explored","parent","Array","states","fill","symbol","current","shift","includes","push","transition","transitions","toStates","fromState","indexOf","id","res","reverse","join","automMinimized","diff1","diff2","counterEx1","counterEx2"],"mappings":"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","sourcesContent":["import { differenceAutomata, minimizeAutomaton, MyAutomatonToHis, regexToAutomaton } from \"../automaton/automaton_type.js\";\r\nimport { Automaton } from \"../automaton/Automaton.js\";\r\nimport { Teacher } from \"./Teacher.js\";\r\nimport { boolToString } from \"../tools/Utilities.js\";\r\n\r\nexport class TeacherAutomaton implements Teacher {\r\n\r\n  alphabet: string[] | string;\r\n  regex: string;\r\n  description: string;\r\n  automaton: Automaton;\r\n\r\n  constructor(regex: string, description?: string) {\r\n    this.automaton = regexToAutomaton(regex);\r\n    this.alphabet = this.automaton.alphabet;\r\n    this.regex = regex;\r\n    this.description = description || `Automata accepting \\\\(regex(${regex}$)\\\\)`;\r\n  }\r\n\r\n  /*\r\n  * @param sentence the sentence to test the appartenance\r\n  * @returns the string \"0\" if the sentence is accepted else \"1\"\r\n  */\r\n  member(sentence: string): string {\r\n    return boolToString(this.automaton!.accept_word_nfa(sentence)[0]);\r\n  }\r\n\r\n  equiv(automaton: Automaton): string | undefined {\r\n    let counterExemple = (automatonDiff: Automaton): string | undefined => {\r\n      if (automatonDiff.acceptingStates.length == 0) return undefined;\r\n      let toExplore = [automatonDiff.startState[0]]\r\n      let explored: string[] = []\r\n      type parentChild = { parent: string, symbol: string }\r\n      let parent: parentChild[] = new Array(automatonDiff.states.length).fill({ parent: \"\", symbol: \"\" });\r\n      while (toExplore.length > 0) {\r\n        let current = toExplore.shift()!\r\n        if (explored.includes(current)) continue;\r\n        explored.push(current)\r\n        for (const transition of automatonDiff.transitions) {\r\n          if (!explored.includes(transition.toStates[0]) && transition.fromState == current) {\r\n            parent[automatonDiff.states.indexOf(transition.toStates[0])] =\r\n              { parent: transition.fromState, symbol: transition.symbol }\r\n            toExplore.push(transition.toStates[0])\r\n          }\r\n        }\r\n\r\n        if (automatonDiff.acceptingStates.includes(current)) {\r\n          let id = automatonDiff.states.indexOf(current);\r\n          let res: string[] = [parent[id].symbol]\r\n          while (parent[id].parent != \"\") {\r\n            id = automatonDiff.states.indexOf(parent[id].parent)\r\n            res.push(parent[id].symbol)\r\n          }\r\n          return res.reverse().join(\"\");\r\n        }\r\n      }\r\n      return \"\";\r\n    }\r\n    let automMinimized = minimizeAutomaton(MyAutomatonToHis(automaton));\r\n    let diff1 = differenceAutomata(this.automaton!, automMinimized);\r\n    let diff2 = differenceAutomata(automMinimized, this.automaton!);\r\n    // BREAKPOINT AFTER DIFF \r\n    let counterEx1 = counterExemple(diff1);\r\n    let counterEx2 = counterExemple(diff2);\r\n    // AFTER COUNTEREXEMPLE\r\n    // console.log(`C1 = { ${counterEx1} }, C2 = { ${counterEx2} }`);\r\n\r\n    if (counterEx1 == undefined) return counterEx2;\r\n    if (counterEx2 == undefined) return counterEx1;\r\n    return counterEx1! < counterEx2! ? counterEx1 : counterEx2;\r\n  }\r\n\r\n}"],"file":"TeacherAutomaton.js"}