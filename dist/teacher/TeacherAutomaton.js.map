{"version":3,"sources":["../../src/teacher/TeacherAutomaton.ts"],"names":["differenceAutomata","minimizeAutomaton","MyAutomatonToHis","regexToAutomaton","boolToString","TeacherAutomaton","constructor","regex","description","automaton","alphabet","member","sentence","accept_word_nfa","equiv","counterExemple","automatonDiff","stateList","Array","from","states","map","e","acceptingStates","length","undefined","toExplore","initialStates","explored","parent","fill","symbol","current","shift","includes","push","state","transition","transitions","indexOf","id","res","reverse","join","automMinimized","diff1","diff2","counterEx1","counterEx2"],"mappings":"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","sourcesContent":["import { differenceAutomata, minimizeAutomaton, MyAutomatonToHis, regexToAutomaton } from \"../automaton/automaton_type.js\";\r\nimport { Automaton, State } from \"../automaton/Automaton.js\";\r\nimport { Teacher } from \"./Teacher.js\";\r\nimport { boolToString } from \"../tools/Utilities.js\";\r\n\r\nexport class TeacherAutomaton implements Teacher {\r\n\r\n  alphabet: string[] | string;\r\n  regex: string;\r\n  description: string;\r\n  automaton: Automaton;\r\n\r\n  constructor(regex: string, description?: string) {\r\n    this.automaton = regexToAutomaton(regex);\r\n    this.alphabet = this.automaton.alphabet;\r\n    this.regex = regex;\r\n    this.description = description || `Automaton accepting \\\\(regex(${regex})\\\\)`;\r\n  }\r\n\r\n  /*\r\n  * @param sentence the sentence to test the appartenance\r\n  * @returns the string \"0\" if the sentence is accepted else \"1\"\r\n  */\r\n  member(sentence: string): string {\r\n    return boolToString(this.automaton!.accept_word_nfa(sentence));\r\n  }\r\n\r\n  equiv(automaton: Automaton): string | undefined {\r\n    let counterExemple = (automatonDiff: Automaton): string | undefined => {\r\n      let stateList = Array.from(automatonDiff.states).map(e => e[1])\r\n      if (automatonDiff.acceptingStates.length == 0) return undefined;\r\n      let toExplore = [automatonDiff.initialStates[0]]\r\n      let explored: State[] = []\r\n      type parentChild = { parent: State | undefined, symbol: string }\r\n      let parent: parentChild[] = new Array(stateList.length).fill({ parent: undefined, symbol: \"\" });\r\n      while (toExplore.length > 0) {\r\n        let current = toExplore.shift()!\r\n        if (explored.includes(current)) continue;\r\n        explored.push(current)\r\n        for (const state of stateList) {\r\n          let transition = Array.from(state.transitions)\r\n          for (const [symbol, states] of transition) {\r\n            if (!explored.includes(states[0]) && state == current) {\r\n              parent[stateList.indexOf(states[0])] =\r\n                { parent: state, symbol: symbol }\r\n              toExplore.push(states[0])\r\n            }\r\n          }\r\n        }\r\n\r\n\r\n        if (automatonDiff.acceptingStates.includes(current)) {\r\n          let id = stateList.indexOf(current);\r\n          let res: string[] = [parent[id].symbol]\r\n          while (parent[id].parent) {\r\n            id = stateList.indexOf(parent[id].parent!)\r\n            res.push(parent[id].symbol)\r\n          }\r\n          return res.reverse().join(\"\");\r\n        }\r\n      }\r\n      return \"\";\r\n    }\r\n    let automMinimized = minimizeAutomaton(MyAutomatonToHis(automaton));\r\n    let diff1 = differenceAutomata(this.automaton!, automMinimized);\r\n    let diff2 = differenceAutomata(automMinimized, this.automaton!);\r\n    // BREAKPOINT AFTER DIFF \r\n    let counterEx1 = counterExemple(diff1);\r\n    let counterEx2 = counterExemple(diff2);\r\n    // AFTER COUNTEREXEMPLE\r\n    // console.log(`C1 = { ${counterEx1} }, C2 = { ${counterEx2} }`);\r\n\r\n    if (counterEx1 == undefined) return counterEx2;\r\n    if (counterEx2 == undefined) return counterEx1;\r\n    return counterEx1! < counterEx2! ? counterEx1 : counterEx2;\r\n  }\r\n\r\n}"],"file":"TeacherAutomaton.js"}