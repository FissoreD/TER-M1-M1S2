{"version":3,"sources":["../../src/teacher/TeacherNoAutomaton.ts"],"names":["boolToString","TeacherNoAutomaton","counter","max_word_length","constructor","params","description","check_function","regex","s","match","RegExp","undefined","counter_exemples","alphabet","toString","initiate_mapping","res","Array","from","sort","level","length","res1","forEach","e","a","push","member","sentence","equiv","automaton","acceptedByTeacher","filter","acceptedByLerner","accept_word_nfa","symetricDifference","includes","concat"],"mappings":"AACA,OAASA,YAAT,KAAyC,uBAAzC,CAGA,MAAO,MAAMC,CAAAA,kBAAsC,CACnC,MAAPC,CAAAA,OAAO,CAAG,CAAH,CAOdC,eAAe,CAAG,CAAH,CAGfC,WAAW,CAACC,MAAD,CAGRC,WAAmB,CAAG,EAHd,CAGkB,CAC3B,KAAKC,cAAL,CAAuB,MAAOF,CAAAA,MAAM,CAACG,KAAd,EAAuB,QAAxB,CAAoCC,CAAC,EAAIA,CAAC,CAACC,KAAF,CAAQ,GAAIC,CAAAA,MAAJ,CAAY,KAAIN,MAAM,CAACG,KAAM,IAA7B,CAAR,GAA8CI,SAAvF,CAAmGP,MAAM,CAACG,KAAhI,CACA,KAAKK,gBAAL,CAAwBR,MAAM,CAACQ,gBAA/B,CACA,KAAKX,OAAL,CAAe,CAAf,CACA,KAAKI,WAAL,CAAmBA,WAAnB,CACA,KAAKQ,QAAL,CAAgBT,MAAM,CAACS,QAAvB,CACA,KAAKN,KAAL,CAAaH,MAAM,CAACG,KAAP,CAAaO,QAAb,EACd,CAEDC,gBAAgB,EAAG,CACjB,GAAIC,CAAAA,GAAwB,CAAG,CAAC,CAAC,EAAD,CAAK,KAAKV,cAAL,CAAqB,EAArB,CAAL,CAAD,CAA/B,CACA,GAAIO,CAAAA,QAAQ,CAAGI,KAAK,CAACC,IAAN,CAAW,KAAKL,QAAhB,EAA0BM,IAA1B,EAAf,CACA,GAAIC,CAAAA,KAAK,CAAG,CAAC,EAAD,CAAZ,CACA,MAAOJ,GAAG,CAACA,GAAG,CAACK,MAAJ,CAAa,CAAd,CAAH,CAAoB,CAApB,EAAuBA,MAAvB,CAAgC,KAAKnB,eAA5C,CAA6D,CAC3D,GAAIoB,CAAAA,IAAc,CAAG,EAArB,CACAF,KAAK,CAACG,OAAN,CAAcC,CAAC,EAAIX,QAAQ,CAACU,OAAT,CAAiBE,CAAC,EAAI,CACvCT,GAAG,CAACU,IAAJ,CAAS,CAACF,CAAC,CAAGC,CAAL,CAAQ,KAAKnB,cAAL,CAAqBkB,CAAC,CAAGC,CAAzB,CAAR,CAAT,EACAH,IAAI,CAACI,IAAL,CAAUF,CAAC,CAAGC,CAAd,CACD,CAHkB,CAAnB,EAIAL,KAAK,CAAGE,IACT,CACD,MAAON,CAAAA,GACR,CAMDW,MAAM,CAACC,QAAD,CAA2B,CAC/B,MAAO7B,CAAAA,YAAY,CAAC,KAAKO,cAAL,CAAoBsB,QAApB,CAAD,CACpB,CAEDC,KAAK,CAACC,SAAD,CAA2C,CAC9C,GAAIC,CAAAA,iBAAiB,CAAG,KAAKnB,gBAAL,CAAsBoB,MAAtB,CAA6BR,CAAC,EAAI,KAAKlB,cAAL,CAAoBkB,CAApB,CAAlC,CAAxB,CACA,GAAIS,CAAAA,gBAAgB,CAAG,KAAKrB,gBAAL,CAAsBoB,MAAtB,CAA6BR,CAAC,EAAIM,SAAS,CAACI,eAAV,CAA0BV,CAA1B,EAA6B,CAA7B,CAAlC,CAAvB,CACA,GAAIW,CAAAA,kBAAkB,CAAGF,gBAAgB,CAACD,MAAjB,CAAwBR,CAAC,EAAI,CAACO,iBAAiB,CAACK,QAAlB,CAA2BZ,CAA3B,CAA9B,EACvBa,MADuB,CAChBN,iBAAiB,CAACC,MAAlB,CAAyBR,CAAC,EAAI,CAACS,gBAAgB,CAACG,QAAjB,CAA0BZ,CAA1B,CAA/B,CADgB,CAAzB,CAEA,MAAOW,CAAAA,kBAAkB,CAAGA,kBAAkB,CAAC,CAAD,CAArB,CAA2BxB,SACrD,CApDgD","sourcesContent":["import { Automaton } from \"../automaton/Automaton.js\";\r\nimport { boolToString, myFunction } from \"../tools/Utilities.js\";\r\nimport { Teacher } from \"./Teacher.js\";\r\n\r\nexport class TeacherNoAutomaton implements Teacher {\r\n  static counter = 0;\r\n\r\n  check_function: myFunction<string, boolean>;\r\n  counter_exemples: string[];\r\n  counter: number;\r\n  description: string;\r\n  alphabet: string[] | string;\r\n  max_word_length = 8;\r\n  regex: string;\r\n\r\n  constructor(params: {\r\n    regex: string | myFunction<string, boolean>, counter_exemples: string[], alphabet:\r\n    string[] | string\r\n  }, description: string = \"\") {\r\n    this.check_function = (typeof params.regex == 'string') ? s => s.match(new RegExp(`^(${params.regex})$`)) != undefined : params.regex as myFunction<string, boolean>;\r\n    this.counter_exemples = params.counter_exemples;\r\n    this.counter = 0;\r\n    this.description = description;\r\n    this.alphabet = params.alphabet;\r\n    this.regex = params.regex.toString()\r\n  }\r\n\r\n  initiate_mapping() {\r\n    let res: [string, boolean][] = [[\"\", this.check_function!(\"\")]]\r\n    let alphabet = Array.from(this.alphabet).sort()\r\n    let level = [\"\"]\r\n    while (res[res.length - 1][0].length < this.max_word_length) {\r\n      let res1: string[] = []\r\n      level.forEach(e => alphabet.forEach(a => {\r\n        res.push([e + a, this.check_function!(e + a)])\r\n        res1.push(e + a)\r\n      }))\r\n      level = res1\r\n    }\r\n    return res;\r\n  }\r\n\r\n  /*\r\n  * @param sentence the sentence to test the appartenance\r\n  * @returns the string \"0\" if the sentence is accepted else \"1\"\r\n  */\r\n  member(sentence: string): string {\r\n    return boolToString(this.check_function(sentence));\r\n  }\r\n\r\n  equiv(automaton: Automaton): string | undefined {\r\n    let acceptedByTeacher = this.counter_exemples.filter(e => this.check_function(e))\r\n    let acceptedByLerner = this.counter_exemples.filter(e => automaton.accept_word_nfa(e)[0])\r\n    let symetricDifference = acceptedByLerner.filter(e => !acceptedByTeacher.includes(e)).\r\n      concat(acceptedByTeacher.filter(e => !acceptedByLerner.includes(e)))\r\n    return symetricDifference ? symetricDifference[0] : undefined;\r\n  }\r\n\r\n}"],"file":"TeacherNoAutomaton.js"}