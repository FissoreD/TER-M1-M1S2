{"version":3,"sources":["../../src/teacher/TeacherNoAutomaton.ts"],"names":["boolToString","equivalenceFunction","TeacherNoAutomaton","counter","max_word_length","constructor","params","description","alphabet","Array","from","regex","check_function","s","match","RegExp","undefined","counter_examples","member","sentence","equiv","automaton"],"mappings":"AACA,OAASA,YAAT,KAAyC,uBAAzC,CACA,OAASC,mBAAT,KAAoC,YAApC,CAGA,MAAO,MAAMC,CAAAA,kBAAsC,CACnC,MAAPC,CAAAA,OAAO,CAAG,CAAH,CAOdC,eAAe,CAAG,CAAH,CAGfC,WAAW,CAACC,MAAD,CAGRC,WAAmB,CAAG,EAHd,CAGkB,CAE3B,KAAKJ,OAAL,CAAe,CAAf,CACA,KAAKI,WAAL,CAAmBA,WAAnB,CACA,KAAKC,QAAL,CAAgBC,KAAK,CAACC,IAAN,CAAWJ,MAAM,CAACE,QAAlB,CAAhB,CACA,KAAKG,KAAL,CAAc,MAAOL,CAAAA,MAAM,CAACK,KAAd,EAAuB,QAAxB,CAAoCL,MAAM,CAACK,KAA3C,CAAmD,uBAAhE,CAEA,KAAKC,cAAL,CACG,MAAON,CAAAA,MAAM,CAACK,KAAd,EAAuB,QAAxB,CACEE,CAAC,EAAIA,CAAC,CAACC,KAAF,CAAQ,GAAIC,CAAAA,MAAJ,CAAY,KAAIT,MAAM,CAACK,KAAM,IAA7B,CAAR,GAA8CK,SADrD,CAEEV,MAAM,CAACK,KAHX,CAKA,KAAKM,gBAAL,CAAwBX,MAAM,CAACW,gBAChC,CAMDC,MAAM,CAACC,QAAD,CAA2B,CAC/B,MAAOnB,CAAAA,YAAY,CAAC,KAAKY,cAAL,CAAoBO,QAApB,CAAD,CACpB,CAEDC,KAAK,CAACC,SAAD,CAA2C,CAC9C,MAAOpB,CAAAA,mBAAmB,CAAC,IAAD,CAAOoB,SAAP,CAC3B,CAvCgD","sourcesContent":["import { Automaton } from \"../automaton/Automaton.js\";\r\nimport { boolToString, myFunction } from \"../tools/Utilities.js\";\r\nimport { equivalenceFunction } from \"./Equiv.js\";\r\nimport { Teacher } from \"./Teacher.js\";\r\n\r\nexport class TeacherNoAutomaton implements Teacher {\r\n  static counter = 0;\r\n\r\n  check_function: myFunction<string, boolean>;\r\n  counter_examples: string[];\r\n  counter: number;\r\n  description: string;\r\n  alphabet: string[];\r\n  max_word_length = 8;\r\n  regex: string;\r\n\r\n  constructor(params: {\r\n    regex: string | myFunction<string, boolean>, counter_examples: string[], alphabet:\r\n    string[] | string\r\n  }, description: string = \"\") {\r\n\r\n    this.counter = 0;\r\n    this.description = description;\r\n    this.alphabet = Array.from(params.alphabet);\r\n    this.regex = (typeof params.regex == 'string') ? params.regex : \"Learner with function\"\r\n\r\n    this.check_function =\r\n      (typeof params.regex == 'string') ?\r\n        s => s.match(new RegExp(`^(${params.regex})$`)) != undefined :\r\n        params.regex as myFunction<string, boolean>;\r\n\r\n    this.counter_examples = params.counter_examples;\r\n  }\r\n\r\n  /*\r\n  * @param sentence the sentence to test the appartenance\r\n  * @returns the string \"0\" if the sentence is accepted else \"1\"\r\n  */\r\n  member(sentence: string): string {\r\n    return boolToString(this.check_function(sentence));\r\n  }\r\n\r\n  equiv(automaton: Automaton): string | undefined {\r\n    return equivalenceFunction(this, automaton);\r\n  }\r\n\r\n}"],"file":"TeacherNoAutomaton.js"}