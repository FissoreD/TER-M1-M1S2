{"version":3,"sources":["../../src/teacher/Teacher.ts"],"names":["TeacherAutomaton","TeacherNoAutomaton","allStringFromAlphabet","teacher_a_or_baStar","teacherPairZeroAndOne","teacherA3fromLast","teacherEvenAandThreeB","teacherNotAfourthPos","teacher_bStar_a_or_aStart_bStar","alphabet","regex","counter_examples","teacher_b_bStar_a__b_aOrb_star","binaryAddition","sentence","charToBin","char","parseInt","toString","padStart","sentenceAr","Array","from","map","e","fst_term","join","snd_term","trd_term","maxLength","teachers"],"mappings":"AACA,OAASA,gBAAT,KAAiC,uBAAjC,CACA,OAASC,kBAAT,KAAmC,yBAAnC,CACA,OAASC,qBAAT,KAAsC,uBAAtC,CAuBA,MAAO,IAAIC,CAAAA,mBAAmB,CAAG,GAAIH,CAAAA,gBAAJ,CAAqB,SAArB,CAA1B,CAMP,MAAO,IAAII,CAAAA,qBAAqB,CAAG,GAAIJ,CAAAA,gBAAJ,CACjC,iCADiC,CAEhC,iIAFgC,CAA5B,CASP,MAAO,IAAIK,CAAAA,iBAAiB,CAAG,GAAIL,CAAAA,gBAAJ,CAC7B,mBAD6B,CAE5B;AACH,gDAH+B,CAAxB,CASP,MAAO,IAAIM,CAAAA,qBAAqB,CAAG,GAAIN,CAAAA,gBAAJ,CACjC,kCADiC,CAEhC;AACH,wDAHmC,CAA5B,CAWP,MAAO,IAAIO,CAAAA,oBAAoB,CAAG,GAAIP,CAAAA,gBAAJ,CAChC,0CADgC,CAE/B;AACH,qDAHkC,CAA3B,CAQP,MAAO,IAAIQ,CAAAA,+BAA+B,CAAG,GAAIP,CAAAA,kBAAJ,CAC3C,CAAEQ,QAAQ,CAAE,IAAZ,CAAkBC,KAAK,CAAE,iBAAzB,CAA4CC,gBAAgB,CAAE,CAAC,KAAD,CAAQ,GAAR,CAAa,MAAb,CAAqB,KAArB,CAA4B,IAA5B,CAAkC,MAAlC,CAA9D,CAD2C,CAE1C,mDAF0C,CAAtC,CAOP,MAAO,IAAIC,CAAAA,8BAA8B,CAAG,GAAIZ,CAAAA,gBAAJ,CAAqB,mBAArB,CAArC,CAEP,MAAO,IAAIa,CAAAA,cAAc,CAAG,GAAIZ,CAAAA,kBAAJ,CAC1B,CACEQ,QAAQ,CAAE,WADZ,CAEEC,KAAK,CAAEI,QAAQ,EAAI,CACjB,GAAIC,CAAAA,SAAS,CAAIC,IAAD,EACd,CAACC,QAAQ,CAACD,IAAD,CAAR,GAAmB,CAApB,EAAuBE,QAAvB,CAAgC,CAAhC,EAAmCC,QAAnC,CAA4C,CAA5C,CAA+C,GAA/C,CADF,CAEA,GAAIC,CAAAA,UAAU,CAAGC,KAAK,CAACC,IAAN,CAAWR,QAAX,EAAqBS,GAArB,CAAyBC,CAAC,EAAIT,SAAS,CAACS,CAAD,CAAvC,CAAjB,CACA,GAAIC,CAAAA,QAAQ,CAAGR,QAAQ,CAACG,UAAU,CAACG,GAAX,CAAeC,CAAC,EAAIA,CAAC,CAAC,CAAD,CAArB,EAA0BE,IAA1B,CAA+B,EAA/B,CAAD,CAAqC,CAArC,CAAvB,CACA,GAAIC,CAAAA,QAAQ,CAAGV,QAAQ,CAACG,UAAU,CAACG,GAAX,CAAeC,CAAC,EAAIA,CAAC,CAAC,CAAD,CAArB,EAA0BE,IAA1B,CAA+B,EAA/B,CAAD,CAAqC,CAArC,CAAvB,CACA,GAAIE,CAAAA,QAAQ,CAAGX,QAAQ,CAACG,UAAU,CAACG,GAAX,CAAeC,CAAC,EAAIA,CAAC,CAAC,CAAD,CAArB,EAA0BE,IAA1B,CAA+B,EAA/B,CAAD,CAAqC,CAArC,CAAvB,CACA,MAAOD,CAAAA,QAAQ,CAAGE,QAAX,EAAuBC,QAC/B,CAVH,CAWEjB,gBAAgB,CAAET,qBAAqB,CAAC,CAAEO,QAAQ,CAAE,WAAZ,CAAyBoB,SAAS,CAAE,CAApC,CAAD,CAXzC,CAD0B,CAatB;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAvB4B,CAArB,CAyBP,MAAO,IAAIC,CAAAA,QAAQ,CAAG,CAAC3B,mBAAD,CAAsBS,8BAAtB,CAAsDC,cAAtD,CAAsER,iBAAtE,CAAyFC,qBAAzF,CAAgHC,oBAAhH,CAAsIH,qBAAtI,CAA6JI,+BAA7J,CAAf","sourcesContent":["import { Automaton, State } from \"../automaton/Automaton.js\";\r\nimport { TeacherAutomaton } from \"./TeacherAutomaton.js\";\r\nimport { TeacherNoAutomaton } from \"./TeacherNoAutomaton.js\";\r\nimport { allStringFromAlphabet } from \"../tools/Utilities.js\";\r\nimport { TeacherTakingAut } from \"./TeacherTakingAut.js\";\r\n\r\nexport interface Teacher {\r\n  description: string;\r\n  alphabet: string[];\r\n  counter_examples?: string[];\r\n  regex: string;\r\n  automaton?: Automaton;\r\n  /**\r\n   * @param sentence the sentence to test the appartenance\r\n   * @returns the string \"0\" if the sentence is accepted else \"1\"\r\n   */\r\n  member(sentence: string): string;\r\n  /**\r\n   * @param automaton\r\n   * @returns undifined if the automaton recognizes the teacher's language, a counter-exemple otherwise\r\n   */\r\n  equiv(automaton: Automaton): string | undefined;\r\n}\r\n/** \r\n * a teacher accepting a + (ba)*\r\n */\r\nexport let teacher_a_or_baStar = new TeacherAutomaton(\"a+(ba)*\");\r\n\r\n/** \r\n * a teacher accepting the language over {0, 1}\r\n * of strings with even number of 0 and even number of 1\r\n */\r\nexport let teacherPairZeroAndOne = new TeacherAutomaton(\r\n  \"(00+11+(01+10)(00+11)*(01+10))*\",\r\n  `Automaton accepting L = {w in (0, 1)* | #(w_0) % 2 = 0 and #(w_1) % 2 = 0} <br/> → words with even nb of '0' and even nb of '1'`);\r\n\r\n/**\r\n * a teacher accepting the language over {a, b}\r\n * of strings with an \"a\" in the third letter from end\r\n * (exemple abb, baab, bbabbaab)\r\n */\r\nexport let teacherA3fromLast = new TeacherAutomaton(\r\n  \"(a+b)*a(a+b)(a+b)\",\r\n  `Automaton accepting L = {w in (a, b)* | w[-3] = a} <br/>\r\n    → words with an 'a' in the 3rd pos from end`,\r\n)\r\n/**\r\n * a teacher accepting the language over {a, b}\r\n * of strings with any even number of \"a\" or at least three \"b\"\r\n */\r\nexport let teacherEvenAandThreeB = new TeacherAutomaton(\r\n  \"b*a(b+ab*a)*+(a+b)*ba*ba*b(a+b)*\",\r\n  `Automaton accepting L = {w in (a, b)* | #(w_b) ≥ 3 or #(w_a) % 2 = 1}\r\n  <br/> → words with at least 3 'b' or an odd nb of 'a'`\r\n);\r\n\r\n/**\r\n * a teacher accepting the language over {a, b}\r\n * of strings not having an a in a position multiple\r\n * of 4 \r\n */\r\nexport let teacherNotAfourthPos = new TeacherAutomaton(\r\n  \"((a+b)(a+b)(a+b)b)*(a+b+$)(a+b+$)(a+b+$)\",\r\n  `Automaton accepting L = {w ∈ (a,b)* and i ∈ 4ℕ | w[i] ≠ a and i ≤ len(w)} <br/>\r\n  → words without an 'a' in a position multiple of 4`)\r\n\r\n/**\r\n * a teacher accepting the regex bb*a + a*b*\r\n */\r\nexport let teacher_bStar_a_or_aStart_bStar = new TeacherNoAutomaton(\r\n  { alphabet: \"ab\", regex: \"((bb*a)|(a*b*))\", counter_examples: [\"bba\", \"b\", \"aabb\", \"aba\", \"aa\", \"bbaa\"] },\r\n  `Automaton accepting L = regex((bb^*a) + (a^*b^*))`)\r\n\r\n/**\r\n * a teacher accepting the regex bb*($ + a(b(a+b))*)\r\n */\r\nexport let teacher_b_bStar_a__b_aOrb_star = new TeacherAutomaton(\"bb*($+a(b(a+b))*)\")\r\n\r\nexport let binaryAddition = new TeacherNoAutomaton(\r\n  {\r\n    alphabet: \"012345678\",\r\n    regex: sentence => {\r\n      let charToBin = (char: string) =>\r\n        (parseInt(char) >>> 0).toString(2).padStart(3, \"0\")\r\n      let sentenceAr = Array.from(sentence).map(e => charToBin(e))\r\n      let fst_term = parseInt(sentenceAr.map(e => e[0]).join(''), 2);\r\n      let snd_term = parseInt(sentenceAr.map(e => e[1]).join(''), 2);\r\n      let trd_term = parseInt(sentenceAr.map(e => e[2]).join(''), 2);\r\n      return fst_term + snd_term == trd_term;\r\n    },\r\n    counter_examples: allStringFromAlphabet({ alphabet: '012345678', maxLength: 3 })\r\n  }, `  <pre>\r\n       /**\r\n       *  Automaton calculating addition between binary integers: \r\n       * exemple : \r\n       * 0101 + \r\n       * 1001 =\r\n       * 1110\r\n       * is a valid exemple that can be sent to the automaton with the encoding 3516\r\n       * 3 = 011 (the 1st col), 5 = 101 (the 2nd col), \r\n       * 1 = 001 (the 3rd col), 6 = 110 (the 4th col) \r\n       **/</pre> `)\r\n\r\nexport let teachers = [teacher_a_or_baStar, teacher_b_bStar_a__b_aOrb_star, binaryAddition, teacherA3fromLast, teacherEvenAandThreeB, teacherNotAfourthPos, teacherPairZeroAndOne, teacher_bStar_a_or_aStart_bStar]"],"file":"Teacher.js"}