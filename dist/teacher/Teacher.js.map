{"version":3,"sources":["../../src/teacher/Teacher.ts"],"names":["TeacherAutomatonStr","TeacherRegex","teacher_a_or_baStar","teacherPairZeroAndOne","teacherA3fromLast","teacherEvenAandThreeB","teacherNotAfourthPos","teacher_bStar_a_or_aStart_bStar","alphabet","regex","counter_examples","teacher_b_bStar_a__b_aOrb_star","teachers"],"mappings":"AACA,OAASA,mBAAT,KAAoC,0BAApC,CACA,OAASC,YAAT,KAA6B,mBAA7B,CAwBA,MAAO,IAAIC,CAAAA,mBAAmB,CAAG,GAAIF,CAAAA,mBAAJ,CAAwB,SAAxB,CAA1B,CAMP,MAAO,IAAIG,CAAAA,qBAAqB,CAAG,GAAIH,CAAAA,mBAAJ,CACjC,iCADiC,CAEhC,iIAFgC,CAA5B,CASP,MAAO,IAAII,CAAAA,iBAAiB,CAAG,GAAIJ,CAAAA,mBAAJ,CAC7B,mBAD6B,CAE5B;AACH,gDAH+B,CAAxB,CASP,MAAO,IAAIK,CAAAA,qBAAqB,CAAG,GAAIL,CAAAA,mBAAJ,CACjC,kCADiC,CAEhC;AACH,wDAHmC,CAA5B,CAWP,MAAO,IAAIM,CAAAA,oBAAoB,CAAG,GAAIN,CAAAA,mBAAJ,CAChC,0CADgC,CAE/B;AACH,qDAHkC,CAA3B,CAQP,MAAO,IAAIO,CAAAA,+BAA+B,CAAG,GAAIN,CAAAA,YAAJ,CAC3C,CAAEO,QAAQ,CAAE,IAAZ,CAAkBC,KAAK,CAAE,iBAAzB,CAA4CC,gBAAgB,CAAE,CAAC,KAAD,CAAQ,GAAR,CAAa,MAAb,CAAqB,KAArB,CAA4B,IAA5B,CAAkC,MAAlC,CAA9D,CAD2C,CAE1C,yCAF0C,CAAtC,CAOP,MAAO,IAAIC,CAAAA,8BAA8B,CAAG,GAAIX,CAAAA,mBAAJ,CAAwB,mBAAxB,CAArC,CAqFP,MAAO,IAAIY,CAAAA,QAAQ,CAAG,CAACV,mBAAD,CAAsBK,+BAAtB,CAAuDD,oBAAvD,CAA6ED,qBAA7E,CAAoGD,iBAApG,CAAuHD,qBAAvH,CAAf","sourcesContent":["import { Automaton, State } from \"../automaton/Automaton.js\";\r\nimport { TeacherAutomatonStr } from \"./TeacherAutomatonStr.js\";\r\nimport { TeacherRegex } from \"./TeacherRegex.js\";\r\nimport { allStringFromAlphabet } from \"../tools/Utilities.js\";\r\nimport { TeacherAutomaton } from \"./TeacherAutomaton.js\";\r\n\r\nexport interface Teacher {\r\n  description: string;\r\n  alphabet: string[];\r\n  counter_examples?: string[];\r\n  regex: string;\r\n  automaton?: Automaton;\r\n  /**\r\n   * @param sentence the sentence to test the membership\r\n   * @returns the string \"0\" if the sentence is accepted else \"1\"\r\n   */\r\n  member(sentence: string): string;\r\n  /**\r\n   * @param automaton\r\n   * @returns undefined if the automaton recognizes the teacher's language, a counter-example otherwise\r\n   */\r\n  equiv(automaton: Automaton): string | undefined;\r\n}\r\n/** \r\n * a teacher accepting a + (ba)*\r\n */\r\nexport let teacher_a_or_baStar = new TeacherAutomatonStr(\"a+(ba)*\");\r\n\r\n/** \r\n * a teacher accepting the language over {0, 1}\r\n * of strings with even number of 0 and even number of 1\r\n */\r\nexport let teacherPairZeroAndOne = new TeacherAutomatonStr(\r\n  \"(00+11+(01+10)(00+11)*(01+10))*\",\r\n  `Automaton accepting L = {w in (0, 1)* | #(w_0) % 2 = 0 and #(w_1) % 2 = 0} <br/> → words with even nb of '0' and even nb of '1'`);\r\n\r\n/**\r\n * a teacher accepting the language over {a, b}\r\n * of strings with an \"a\" in the third letter from end\r\n * (exemple abb, baab, bbabbaab)\r\n */\r\nexport let teacherA3fromLast = new TeacherAutomatonStr(\r\n  \"(a+b)*a(a+b)(a+b)\",\r\n  `Automaton accepting L = {w in (a, b)* | w[-3] = a} <br/>\r\n    → words with an 'a' in the 3rd pos from end`,\r\n)\r\n/**\r\n * a teacher accepting the language over {a, b}\r\n * of strings with any even number of \"a\" or at least three \"b\"\r\n */\r\nexport let teacherEvenAandThreeB = new TeacherAutomatonStr(\r\n  \"b*a(b+ab*a)*+(a+b)*ba*ba*b(a+b)*\",\r\n  `Automaton accepting L = {w in (a, b)* | #(w_b) ≥ 3 or #(w_a) % 2 = 1}\r\n  <br/> → words with at least 3 'b' or an odd nb of 'a'`\r\n);\r\n\r\n/**\r\n * a teacher accepting the language over {a, b}\r\n * of strings not having an a in a position multiple\r\n * of 4 \r\n */\r\nexport let teacherNotAfourthPos = new TeacherAutomatonStr(\r\n  \"((a+b)(a+b)(a+b)b)*(a+b+$)(a+b+$)(a+b+$)\",\r\n  `Automaton accepting L = {w ∈ (a,b)* and i ∈ 4ℕ | w[i] ≠ a and i ≤ len(w)} <br/>\r\n  → words without an 'a' in a position multiple of 4`)\r\n\r\n/**\r\n * a teacher accepting the regex bb*a + a*b*\r\n */\r\nexport let teacher_bStar_a_or_aStart_bStar = new TeacherRegex(\r\n  { alphabet: \"ab\", regex: \"((bb*a)|(a*b*))\", counter_examples: [\"bba\", \"b\", \"aabb\", \"aba\", \"aa\", \"bbaa\"] },\r\n  `Automaton accepting L = (bb*a) + (a*b*)`)\r\n\r\n/**\r\n * a teacher accepting the regex bb*($ + a(b(a+b))*)\r\n */\r\nexport let teacher_b_bStar_a__b_aOrb_star = new TeacherAutomatonStr(\"bb*($+a(b(a+b))*)\")\r\n\r\n// export let binaryAddition = new TeacherRegex(\r\n//   {\r\n//     alphabet: \"012345678\",\r\n//     regex: sentence => {\r\n//       let charToBin = (char: string) =>\r\n//         (parseInt(char) >>> 0).toString(2).padStart(3, \"0\")\r\n//       let sentenceAr = Array.from(sentence).map(e => charToBin(e))\r\n//       let fst_term = parseInt(sentenceAr.map(e => e[0]).join(''), 2);\r\n//       let snd_term = parseInt(sentenceAr.map(e => e[1]).join(''), 2);\r\n//       let trd_term = parseInt(sentenceAr.map(e => e[2]).join(''), 2);\r\n//       return fst_term + snd_term == trd_term;\r\n//     },\r\n//     counter_examples: allStringFromAlphabet({ alphabet: '012345678', maxLength: 3 })\r\n//   }, `  <pre>\r\n//        /**\r\n//        *  Automaton calculating addition between binary integers: \r\n//        * exemple : \r\n//        * 0101 + \r\n//        * 1001 =\r\n//        * 1110\r\n//        * is a valid exemple that can be sent to the automaton with the encoding 3516\r\n//        * 3 = 011 (the 1st col), 5 = 101 (the 2nd col), \r\n//        * 1 = 001 (the 3rd col), 6 = 110 (the 4th col) \r\n//        **/</pre> `)\r\n\r\n// let t1 = new TeacherAutomaton({\r\n//   automaton: Automaton.strToAutomaton(`\r\n// [0]\r\n// a1,[14]->[9]\r\n// a1,[14]->[7]\r\n// a0,[13]->[8]\r\n// a0,[12]->[8]\r\n// a0,[12]->[5]\r\n// a1,[12]->[0]\r\n// a0,[11]->[14]\r\n// a0,[11]->[9]\r\n// a1,[11]->[3]\r\n// a0,[10]->[9]\r\n// a0,[10]->[7]\r\n// a1,[10]->[8]\r\n// a1,[10]->[5]\r\n// a0,[9]->[5]\r\n// a1,[9]->[6]\r\n// a1,[8]->[13]\r\n// a1,[8]->[9]\r\n// a0,[7]->[13]\r\n// a1,[7]->[12]\r\n// a1,[7]->[10]\r\n// a1,[7]->[2]\r\n// a1,[7]->[1]\r\n// a0,[6]->[7]\r\n// a0,[6]->[1]\r\n// a0,[5]->[13]\r\n// a0,[5]->[2]\r\n// a0,[5]->[0]\r\n// a0,[4]->[14]\r\n// a0,[4]->[11]\r\n// a1,[4]->[7]\r\n// a0,[3]->[11]\r\n// a0,[3]->[8]\r\n// a1,[3]->[10]\r\n// a1,[3]->[2]\r\n// a1,[2]->[7]\r\n// a1,[2]->[6]\r\n// a1,[2]->[2]\r\n// a0,[1]->[9]\r\n// a0,[1]->[0]\r\n// a1,[1]->[4]\r\n// a0,[0]->[10]\r\n// a0,[0]->[4]\r\n// a0,[0]->[0]\r\n// a1,[0]->[14]\r\n// a1,[0]->[9]\r\n// a1,[0]->[8]\r\n// [10]\r\n// [7]\r\n// [0]\r\n\r\n// `)\r\n// })\r\n\r\n// export let teachers = [t1, teacher_a_or_baStar, teacher_b_bStar_a__b_aOrb_star, binaryAddition, teacherA3fromLast, teacherEvenAandThreeB, teacherNotAfourthPos, teacherPairZeroAndOne, teacher_bStar_a_or_aStart_bStar]\r\n\r\nexport let teachers = [teacher_a_or_baStar, teacher_bStar_a_or_aStart_bStar, teacherNotAfourthPos, teacherEvenAandThreeB, teacherA3fromLast, teacherPairZeroAndOne]"],"file":"Teacher.js"}