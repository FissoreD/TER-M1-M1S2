import{differenceAutomata,minimizeAutomaton,MyAutomatonToHis,regexToAutomaton}from"../automaton/automaton_type.js";import{boolToString}from"../tools/Utilities.js";export class TeacherAutomaton{constructor(regex,description){this.automaton=regexToAutomaton(regex);this.alphabet=this.automaton.alphabet;this.regex=regex;this.description=description||`Automaton accepting \\(regex(${regex})\\)`}member(sentence){return boolToString(this.automaton.accept_word_nfa(sentence))}equiv(automaton){let counterExemple=automatonDiff=>{let stateList=Array.from(automatonDiff.states).map(e=>e[1]);if(automatonDiff.acceptingStates.length==0)return undefined;let toExplore=[automatonDiff.initialStates[0]];let explored=[];let parent=new Array(stateList.length).fill({parent:undefined,symbol:""});while(toExplore.length>0){let current=toExplore.shift();if(explored.includes(current))continue;explored.push(current);for(const state of stateList){let transition=Array.from(state.transitions);for(const[symbol,states]of transition){if(!explored.includes(states[0])&&state==current){parent[stateList.indexOf(states[0])]={parent:state,symbol:symbol};toExplore.push(states[0])}}}if(automatonDiff.acceptingStates.includes(current)){let id=stateList.indexOf(current);let res=[parent[id].symbol];while(parent[id].parent){id=stateList.indexOf(parent[id].parent);res.push(parent[id].symbol)}return res.reverse().join("")}}return""};let automMinimized=minimizeAutomaton(MyAutomatonToHis(automaton));let diff1=differenceAutomata(this.automaton,automMinimized);let diff2=differenceAutomata(automMinimized,this.automaton);let counterEx1=counterExemple(diff1);let counterEx2=counterExemple(diff2);if(counterEx1==undefined)return counterEx2;if(counterEx2==undefined)return counterEx1;return counterEx1<counterEx2?counterEx1:counterEx2}}
//# sourceMappingURL=TeacherAutomaton.js.map