{"version":3,"sources":["../../src/teacher/TeacherUser.ts"],"names":["boolToString","TeacherUser","constructor","alphabet","Array","from","notNullPrompt","description","join","regex","member","sentence","confirm","length","equiv","_automaton","isValid","undefined","str","defaultValue","alp","prompt"],"mappings":"AAAA,OAASA,YAAT,KAA6B,uBAA7B,CAIA,MAAO,MAAMC,CAAAA,WAA+B,CAO1CC,WAAW,EAAG,CACZ,KAAKC,QAAL,CAAgBC,KAAK,CAACC,IAAN,CAAW,KAAKC,aAAL,CAAmB,qBAAnB,CAA0C,IAA1C,CAAX,CAAhB,CACA,KAAKC,WAAL,CAAmB,4CAA8C,KAAKJ,QAAL,CAAcK,IAAd,CAAmB,GAAnB,CAA9C,CAAwE,GAA3F,CACA,KAAKC,KAAL,CAAa,EACd,CAEDC,MAAM,CAACC,QAAD,CAA2B,CAC/B,MAAOX,CAAAA,YAAY,CAACY,OAAO,CAAE,QAAOD,QAAQ,CAACE,MAAT,CAAkB,CAAlB,CAAsBF,QAAtB,CAAiC,QAAI,6BAA9C,CAAR,CACpB,CACDG,KAAK,CAACC,UAAD,CAA4C,CAC/C,GAAIC,CAAAA,OAAO,CAAGJ,OAAO,CAAE,wDAAF,CAArB,CACA,MAAOI,CAAAA,OAAO,CAAGC,SAAH,CAAe,KAAKX,aAAL,CAAmB,yBAAnB,CAC9B,CAEDA,aAAa,CAACY,GAAD,CAAcC,YAAd,CAAqC,CAChD,GAAIC,CAAAA,GAAkB,CAAGC,MAAM,CAACH,GAAD,CAAMC,YAAN,CAA/B,CACA,MAAOC,GAAG,EAAI,IAAd,CAAoB,CAClBA,GAAG,CAAGC,MAAM,CAAC,qCAAD,CAAwCF,YAAxC,CACb,CACD,MAAOC,CAAAA,GACR,CA3ByC","sourcesContent":["import { boolToString } from \"../tools/Utilities.js\";\r\nimport { Automaton } from \"../automaton/Automaton.js\";\r\nimport { Teacher } from \"./Teacher.js\";\r\n\r\nexport class TeacherUser implements Teacher {\r\n  description: string;\r\n  alphabet: string[];\r\n  counter_examples?: string[] | undefined;\r\n  regex: string;\r\n  automaton?: Automaton | undefined;\r\n\r\n  constructor() {\r\n    this.alphabet = Array.from(this.notNullPrompt(\"Enter your alphabet\", \"01\"));\r\n    this.description = \"The teacher is the User and alphabet is [\" + this.alphabet.join(',') + ']'\r\n    this.regex = \"\";\r\n  }\r\n\r\n  member(sentence: string): string {\r\n    return boolToString(confirm(`Does ${sentence.length > 0 ? sentence : 'Îµ'} belongs to your language ?`))\r\n  }\r\n  equiv(_automaton: Automaton): string | undefined {\r\n    let isValid = confirm(`Does the displayed automaton recognize your language ?`)\r\n    return isValid ? undefined : this.notNullPrompt(\"Enter a counter-exemple\")\r\n  }\r\n\r\n  notNullPrompt(str: string, defaultValue?: string) {\r\n    let alp: string | null = prompt(str, defaultValue);\r\n    while (alp == null) {\r\n      alp = prompt(\"You can't send empty string. Redo :\", defaultValue);\r\n    }\r\n    return alp;\r\n  }\r\n\r\n}"],"file":"TeacherUser.js"}