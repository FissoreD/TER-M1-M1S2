{"version":3,"sources":["../../src/teacher/Equiv.ts"],"names":["differenceAutomata","MyAutomatonToHis","minimizeAutomaton","boolToString","equivalenceFunction","teacher","automaton","counter_examples","counter_example","member","accept_word_nfa","counterExemple","automatonDiff","stateList","allStates","acceptingStates","length","undefined","toExplore","Array","from","initialStates","explored","parent","fill","symbol","current","shift","includes","push","states","outTransitions","indexOf","id","res","reverse","join","automMinimized","console","log","diff1","diff2","counterEx1","counterEx2","state_number"],"mappings":"AAAA,OAASA,kBAAT,KAAmC,gCAAnC,CACA,OAASC,gBAAT,KAAiC,gCAAjC,CACA,OAASC,iBAAT,KAAkC,gCAAlC,CAGA,OAASC,YAAT,KAA6B,uBAA7B,CAEA,MAAO,IAAIC,CAAAA,mBAAmB,CAAG,CAACC,OAAD,CAAmBC,SAAnB,GAAgE,CAC/F,GAAID,OAAO,CAACE,gBAAZ,CAA8B,CAC5B,IAAK,KAAMC,CAAAA,eAAX,GAA8BH,CAAAA,OAAO,CAACE,gBAAtC,CAAwD,CACtD,GAAIF,OAAO,CAACI,MAAR,CAAeD,eAAf,GACFL,YAAY,CAACG,SAAS,CAACI,eAAV,CAA0BF,eAA1B,CAAD,CADd,CAEE,MAAOA,CAAAA,eACV,CACF,CAND,IAMO,CACL,GAAIG,CAAAA,cAAc,CAAIC,aAAD,EAAkD,CACrE,GAAIC,CAAAA,SAAS,CAAGD,aAAa,CAACE,SAA9B,CACA,GAAIF,aAAa,CAACG,eAAd,CAA8BC,MAA9B,EAAwC,CAA5C,CAA+C,MAAOC,CAAAA,SAAP,CAC/C,GAAIC,CAAAA,SAAS,CAAGC,KAAK,CAACC,IAAN,CAAWR,aAAa,CAACS,aAAzB,CAAhB,CACA,GAAIC,CAAAA,QAAiB,CAAG,EAAxB,CAEA,GAAIC,CAAAA,MAAqB,CAAG,GAAIJ,CAAAA,KAAJ,CAAUN,SAAS,CAACG,MAApB,EAA4BQ,IAA5B,CAAiC,CAAED,MAAM,CAAEN,SAAV,CAAqBQ,MAAM,CAAE,EAA7B,CAAjC,CAA5B,CACA,MAAOP,SAAS,CAACF,MAAV,CAAmB,CAA1B,CAA6B,CAC3B,KAAMU,CAAAA,OAAO,CAAGR,SAAS,CAACS,KAAV,EAAhB,CACA,GAAIL,QAAQ,CAACM,QAAT,CAAkBF,OAAlB,CAAJ,CAAgC,SAChCJ,QAAQ,CAACO,IAAT,CAAcH,OAAd,EACA,IAAK,KAAM,CAACD,MAAD,CAASK,MAAT,CAAX,EAA+BJ,CAAAA,OAAO,CAACK,cAAvC,CAAuD,CACrD,GAAI,CAACT,QAAQ,CAACM,QAAT,CAAkBE,MAAM,CAAC,CAAD,CAAxB,CAAL,CAAmC,CACjCP,MAAM,CAACV,SAAS,CAACmB,OAAV,CAAkBF,MAAM,CAAC,CAAD,CAAxB,CAAD,CAAN,CACE,CAAEP,MAAM,CAAEG,OAAV,CAAmBD,MAAM,CAAEA,MAA3B,CADF,CAEA,GAAI,CAACP,SAAS,CAACU,QAAV,CAAmBE,MAAM,CAAC,CAAD,CAAzB,CAAL,CAAoCZ,SAAS,CAACW,IAAV,CAAeC,MAAM,CAAC,CAAD,CAArB,CACrC,CACF,CAGD,GAAIlB,aAAa,CAACG,eAAd,CAA8Ba,QAA9B,CAAuCF,OAAvC,CAAJ,CAAqD,CACnD,GAAIO,CAAAA,EAAE,CAAGpB,SAAS,CAACmB,OAAV,CAAkBN,OAAlB,CAAT,CACA,GAAIQ,CAAAA,GAAa,CAAG,CAACX,MAAM,CAACU,EAAD,CAAN,CAAWR,MAAZ,CAApB,CACA,MAAOF,MAAM,CAACU,EAAD,CAAN,CAAWV,MAAlB,CAA0B,CACxBU,EAAE,CAAGpB,SAAS,CAACmB,OAAV,CAAkBT,MAAM,CAACU,EAAD,CAAN,CAAWV,MAA7B,CAAL,CACAW,GAAG,CAACL,IAAJ,CAASN,MAAM,CAACU,EAAD,CAAN,CAAWR,MAApB,CACD,CACD,MAAOS,CAAAA,GAAG,CAACC,OAAJ,GAAcC,IAAd,CAAmB,EAAnB,CACR,CACF,CACD,MAAO,EACR,CA/BD,CAgCA,GAAIC,CAAAA,cAAc,CAAGnC,iBAAiB,CAACD,gBAAgB,CAACK,SAAD,CAAjB,CAAtC,CACAgC,OAAO,CAACC,GAAR,CAAY,OAAZ,EACA,GAAIC,CAAAA,KAAK,CAAGxC,kBAAkB,CAACK,OAAO,CAACC,SAAT,CAAqB+B,cAArB,CAA9B,CACAC,OAAO,CAACC,GAAR,CAAY,OAAZ,EACA,GAAIE,CAAAA,KAAK,CAAGzC,kBAAkB,CAACqC,cAAD,CAAiBhC,OAAO,CAACC,SAAzB,CAA9B,CAIA,GAAIoC,CAAAA,UAAU,CAAG/B,cAAc,CAAC6B,KAAD,CAA/B,CACA,GAAIG,CAAAA,UAAU,CAAGhC,cAAc,CAAC8B,KAAD,CAA/B,CAEAH,OAAO,CAACC,GAAR,CAAa,UAASG,UAAW,cAAaC,UAAW,IAAzD,CAA8DrC,SAAS,CAACsC,YAAV,EAA9D,EAEA,GAAIF,UAAU,EAAIzB,SAAlB,CAA6B,MAAO0B,CAAAA,UAAP,CAC7B,GAAIA,UAAU,EAAI1B,SAAlB,CAA6B,MAAOyB,CAAAA,UAAP,CAC7B,MAAOA,CAAAA,UAAU,CAAGC,UAAb,CAA0BD,UAA1B,CAAuCC,UAC/C,CACF,CAzDM","sourcesContent":["import { differenceAutomata } from \"../automaton/automaton_type.js\";\r\nimport { MyAutomatonToHis } from \"../automaton/automaton_type.js\";\r\nimport { minimizeAutomaton } from \"../automaton/automaton_type.js\";\r\nimport { Automaton, State } from \"../automaton/Automaton.js\";\r\nimport { Teacher } from \"./Teacher.js\";\r\nimport { boolToString } from \"../tools/Utilities.js\";\r\n\r\nexport let equivalenceFunction = (teacher: Teacher, automaton: Automaton): string | undefined => {\r\n  if (teacher.counter_examples) {\r\n    for (const counter_example of teacher.counter_examples) {\r\n      if (teacher.member(counter_example) !=\r\n        boolToString(automaton.accept_word_nfa(counter_example)))\r\n        return counter_example;\r\n    }\r\n  } else {\r\n    let counterExemple = (automatonDiff: Automaton): string | undefined => {\r\n      let stateList = automatonDiff.allStates\r\n      if (automatonDiff.acceptingStates.length == 0) return undefined;\r\n      let toExplore = Array.from(automatonDiff.initialStates)\r\n      let explored: State[] = []\r\n      type parentChild = { parent: State | undefined, symbol: string }\r\n      let parent: parentChild[] = new Array(stateList.length).fill({ parent: undefined, symbol: \"\" });\r\n      while (toExplore.length > 0) {\r\n        const current = toExplore.shift()!\r\n        if (explored.includes(current)) continue;\r\n        explored.push(current)\r\n        for (const [symbol, states] of current.outTransitions) {\r\n          if (!explored.includes(states[0])) {\r\n            parent[stateList.indexOf(states[0])] =\r\n              { parent: current, symbol: symbol }\r\n            if (!toExplore.includes(states[0])) toExplore.push(states[0])\r\n          }\r\n        }\r\n\r\n\r\n        if (automatonDiff.acceptingStates.includes(current)) {\r\n          let id = stateList.indexOf(current);\r\n          let res: string[] = [parent[id].symbol]\r\n          while (parent[id].parent) {\r\n            id = stateList.indexOf(parent[id].parent!)\r\n            res.push(parent[id].symbol)\r\n          }\r\n          return res.reverse().join(\"\");\r\n        }\r\n      }\r\n      return \"\";\r\n    }\r\n    let automMinimized = minimizeAutomaton(MyAutomatonToHis(automaton));\r\n    console.log(\"Diff1\");\r\n    let diff1 = differenceAutomata(teacher.automaton!, automMinimized);\r\n    console.log(\"Diff2\");\r\n    let diff2 = differenceAutomata(automMinimized, teacher.automaton!);\r\n    // BREAKPOINT AFTER DIFF \r\n    // console.log(\"Counter * Exemples\");\r\n\r\n    let counterEx1 = counterExemple(diff1);\r\n    let counterEx2 = counterExemple(diff2);\r\n    // AFTER COUNTEREXEMPLE\r\n    console.log(`C1 = { ${counterEx1} }, C2 = { ${counterEx2} }`, automaton.state_number());\r\n\r\n    if (counterEx1 == undefined) return counterEx2;\r\n    if (counterEx2 == undefined) return counterEx1;\r\n    return counterEx1 < counterEx2 ? counterEx1 : counterEx2;\r\n  }\r\n}"],"file":"Equiv.js"}