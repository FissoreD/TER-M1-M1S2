{"version":3,"sources":["../../src/test_nodejs/Test_wrost_RFSA.ts"],"names":["clearFile","csvHead","printCsvCompare","writeToFile","L_star","NL_star","TeacherAutomaton","Automaton","State","minimizeAutomaton","MyAutomatonToHis","allStringFromAlphabet","myLog","toWrite","fileName","automatonList","counter_examples","alphabet","maxLength","N","maxN","n","a","states","Array","fill","map","_","i","addTransition","push","Set","printInfo","algo","algoName","member_number","equiv_number","automaton","state_number","transition_number","length","teacher","description","L","NL","repeat","make_all_queries"],"mappings":"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","sourcesContent":["import { LearnerBase } from \"../learners/LearnerBase.js\";\r\nimport { clearFile, csvHead, printCsvCompare, writeToFile } from \"./PrintFunction.js\";\r\nimport { L_star } from \"../learners/L_star.js\";\r\nimport { NL_star } from \"../learners/NL_star.js\";\r\nimport { TeacherAutomaton } from \"../teacher/TeacherAutomaton.js\";\r\nimport { Automaton, State } from \"../automaton/Automaton.js\";\r\nimport { minimizeAutomaton, MyAutomatonToHis } from \"../automaton/automaton_type.js\";\r\nimport { allStringFromAlphabet, myLog } from \"../tools/Utilities.js\";\r\n\r\n/**\r\n * About this file : \r\n * The goal here is to compare L and NL algo in term\r\n * of the number of queries and equiv function that \r\n * the learner will ask to the teacher.\r\n * We measure in this way a particular kind of \r\n * complexity of these algorithms and will try to \r\n * test which one of the two algorithms will perform less\r\n * interactions with the teacher.\r\n */\r\n\r\nlet toWrite = true\r\n\r\nlet fileName = \"wrostRFSA\";\r\nif (toWrite) {\r\n  clearFile(fileName)\r\n  writeToFile(fileName, csvHead)\r\n}\r\n\r\nlet automatonList: Automaton[] = []\r\nlet counter_examples = allStringFromAlphabet({ alphabet: \"ab\", maxLength: 14 })\r\nconst N = 2, maxN = 11;\r\nfor (let n = N; n < maxN; n++) {\r\n  myLog({ a: [\"Creating test with\", n, \"power\"] });\r\n\r\n  let states: State[] = new Array(n).fill(0).map((_, i) => new State(i + \"\", i == 0, i < n / 2, ['a', 'b']));\r\n\r\n  for (let i = 0; i < n - 1; i++)\r\n    states[i].addTransition('a', states[i + 1])\r\n  states[n - 1].addTransition('a', states[0]);\r\n  states[0].addTransition('b', states[0]);\r\n  for (let i = 2; i < n; i++)\r\n    states[i].addTransition('b', states[i - 1])\r\n  states[1].addTransition('b', states[n - 1])\r\n  automatonList.push(minimizeAutomaton(MyAutomatonToHis(new Automaton(new Set(states)))));\r\n}\r\n\r\n\r\nlet printInfo = (algo: LearnerBase, algoName: string) => {\r\n  return `${algoName} : queries = ${algo.member_number}, equiv = ${algo.equiv_number}, states = ${algo.automaton?.state_number()}, transitions = ${algo.automaton?.transition_number()}`;\r\n}\r\n\r\nfor (let i = 0; i < automatonList.length; i++) {\r\n  let automaton = automatonList[i]\r\n  let teacher = new TeacherAutomaton({\r\n    automaton: automaton,\r\n    description: (N + i) + \"\",\r\n    counter_examples: counter_examples\r\n  })\r\n\r\n  let L = new L_star(teacher)\r\n  let NL = new NL_star(teacher)\r\n\r\n  myLog({ a: [\"=\".repeat(100)] });\r\n  myLog({ a: [\"Current n : \", N + i] });\r\n\r\n  myLog({ a: [\"In L*\"] });\r\n  L.make_all_queries();\r\n  myLog({ a: [printInfo(L, \"L*\")] });\r\n\r\n  myLog({ a: [\"In NL*\"] });\r\n  NL.make_all_queries();\r\n  myLog({ a: [printInfo(NL, \"NL*\")] });\r\n\r\n  if (toWrite) writeToFile(fileName, printCsvCompare(L, NL))\r\n}\r\n"],"file":"Test_wrost_RFSA.js"}