{"version":3,"sources":["../../src/test_nodejs/LernerCompare.ts"],"names":["NL_star","L_star","teachers","LernerTester","assert","compare","a","b","printInfo","algoName","algo","query_number","equiv_number","automaton","states","length","teacher","console","log","lernerL","lernerNL","regex","finish","next_step","lerner"],"mappings":"AAAA,OAASA,OAAT,KAAwB,uBAAxB,CACA,OAASC,MAAT,KAAuB,sBAAvB,CACA,OAASC,QAAT,KAAyB,eAAzB,CACA,OAASC,YAAT,KAA6B,iBAA7B,CACA,MAAOC,CAAAA,MAAP,KAAmB,eAAnB,CAaA,GAAIC,CAAAA,OAAO,CAAG,CAACC,CAAD,CAAYC,CAAZ,GAA2B,CACvC,GAAIC,CAAAA,SAAS,CAAG,CAACC,QAAD,CAAmBC,IAAnB,GAAwC,CACtD,MAAQ,GAAED,QAAS,gBAAeC,IAAI,CAACC,YAAa,aAAYD,IAAI,CAACE,YAAa,cAAaF,IAAI,CAACG,SAAL,EAAgBC,MAAhB,CAAuBC,MAAO,EAC9H,CAFD,CAGAX,MAAM,CAACE,CAAC,CAACU,OAAF,EAAaT,CAAC,CAACS,OAAhB,CAAN,CAEAC,OAAO,CAACC,GAAR,CAAYV,SAAS,CAAC,QAAD,CAAWF,CAAX,CAArB,EACAW,OAAO,CAACC,GAAR,CAAYV,SAAS,CAAC,SAAD,CAAYD,CAAZ,CAArB,CACD,CARD,CAUA,IAAK,KAAMS,CAAAA,OAAX,GAAsBd,CAAAA,QAAtB,CAAgC,CAC9B,GAAIiB,CAAAA,OAAO,CAAG,GAAIhB,CAAAA,YAAJ,CAAiB,GAAIF,CAAAA,MAAJ,CAAWe,OAAX,CAAjB,CAAd,CACA,GAAII,CAAAA,QAAQ,CAAG,GAAIjB,CAAAA,YAAJ,CAAiB,GAAIH,CAAAA,OAAJ,CAAYgB,OAAZ,CAAjB,CAAf,CAEAC,OAAO,CAACC,GAAR,CAAY,gCAAZ,EACAD,OAAO,CAACC,GAAR,CAAY,mBAAZ,CAAiCF,OAAO,CAACK,KAAzC,EAEA,MAAO,CAACF,OAAO,CAACG,MAAR,EAAR,CACEH,OAAO,CAACI,SAAR,GAEF,MAAO,CAACH,QAAQ,CAACE,MAAT,EAAR,CACEF,QAAQ,CAACG,SAAT,GAEFlB,OAAO,CAACc,OAAO,CAACK,MAAT,CAA2BJ,QAAQ,CAACI,MAApC,CACR","sourcesContent":["import { NL_star } from \"../lerners/NL_star.js\";\r\nimport { L_star } from \"../lerners/L_star.js\";\r\nimport { teachers } from \"../Teacher.js\";\r\nimport { LernerTester } from \"./AlgoTester.js\";\r\nimport assert from 'assert/strict';\r\nimport { LernerBase } from \"../lerners/LernerBase.js\";\r\n/**\r\n * About this file : \r\n * The goal here is to compare L and NL algo in term\r\n * of the number of queries and equiv function that \r\n * the lerner will ask to the teacher.\r\n * We measure in this way a particular kind of \r\n * complexity of these algorithms and will try to \r\n * test which one of the two algorithms will perform less\r\n * interactions with the teacher.\r\n */\r\n\r\nlet compare = (a: L_star, b: NL_star) => {\r\n  let printInfo = (algoName: string, algo: LernerBase) => {\r\n    return `${algoName} : queries = ${algo.query_number}, equiv = ${algo.equiv_number}, states = ${algo.automaton?.states.length}`;\r\n  }\r\n  assert(a.teacher == b.teacher)\r\n\r\n  console.log(printInfo(\"L Star\", a));\r\n  console.log(printInfo(\"NL Star\", b));\r\n}\r\n\r\nfor (const teacher of teachers) {\r\n  let lernerL = new LernerTester(new L_star(teacher))\r\n  let lernerNL = new LernerTester(new NL_star(teacher))\r\n\r\n  console.log(\"==============================\");\r\n  console.log(\"Current regexp : \", teacher.regex);\r\n\r\n  while (!lernerL.finish())\r\n    lernerL.next_step()\r\n\r\n  while (!lernerNL.finish())\r\n    lernerNL.next_step()\r\n\r\n  compare(lernerL.lerner as L_star, lernerNL.lerner as NL_star)\r\n}"],"file":"LernerCompare.js"}