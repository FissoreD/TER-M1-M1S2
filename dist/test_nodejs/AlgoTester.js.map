{"version":3,"sources":["../../src/test_nodejs/AlgoTester.ts"],"names":["NL_star","LernerTester","constructor","lerner","next_step","finish","close_action","consistence_action","send_automaton_action","close_rep","is_close","undefined","add_elt_in_S","consistence_rep","is_consistent","s1","s2","new_col","add_column","automaton","make_automaton","answer","make_member","table_to_update_after_equiv","add_elt_in_E"],"mappings":"AAAA,OAASA,OAAT,KAAwB,uBAAxB,CAGA,MAAO,MAAMC,CAAAA,YAAa,CAGxBC,WAAW,CAACC,MAAD,CAA2B,CACpC,KAAKA,MAAL,CAAcA,MACf,CAEDC,SAAS,EAAG,CACV,GAAI,KAAKD,MAAL,CAAYE,MAAhB,CAAwB,CAAG,CAA3B,IACK,IAAI,CAAC,KAAKC,YAAL,EAAL,CAA0B,CAAG,CAA7B,IACA,IAAI,CAAC,KAAKC,kBAAL,EAAL,CAAgC,CAAG,CAAnC,IACA,MAAKC,qBAAL,EACN,CAEDF,YAAY,EAAY,CACtB,KAAMG,CAAAA,SAAS,CAAG,KAAKN,MAAL,CAAYO,QAAZ,EAAlB,CACA,GAAID,SAAS,EAAIE,SAAjB,CAA4B,CAC1B,KAAKR,MAAL,CAAYS,YAAZ,CAAyBH,SAAzB,EACA,MAAO,MACR,CACD,MAAO,KACR,CAEDF,kBAAkB,EAAY,CAC5B,KAAMM,CAAAA,eAAe,CAAG,KAAKV,MAAL,CAAYW,aAAZ,EAAxB,CACA,GAAID,eAAe,EAAIF,SAAvB,CAAkC,CAChC,GAAII,CAAAA,EAAE,CAAGF,eAAe,CAAC,CAAD,CAAxB,CACA,GAAIG,CAAAA,EAAE,CAAGH,eAAe,CAAC,CAAD,CAAxB,CACA,GAAII,CAAAA,OAAO,CAAGJ,eAAe,CAAC,CAAD,CAA7B,CACA,KAAKV,MAAL,CAAYe,UAAZ,CAAuBD,OAAvB,EACA,MAAO,MACR,CACD,MAAO,KACR,CAEDT,qBAAqB,EAAG,CACtB,GAAIW,CAAAA,SAAS,CAAG,KAAKhB,MAAL,CAAYiB,cAAZ,EAAhB,CACA,KAAKjB,MAAL,CAAYgB,SAAZ,CAAwBA,SAAxB,CACA,GAAIE,CAAAA,MAAM,CAAG,KAAKlB,MAAL,CAAYmB,WAAZ,CAAwBH,SAAxB,CAAb,CACA,GAAIE,MAAM,EAAIV,SAAd,CAAyB,CACvB,KAAKY,2BAAL,CAAiCF,MAAjC,EACA,MACD,CACD,KAAKlB,MAAL,CAAYE,MAAZ,CAAqB,IACtB,CAEDkB,2BAA2B,CAACF,MAAD,CAAiB,CAC1C,GAAI,eAAgBrB,CAAAA,OAApB,CAA8B,IAAD,CAAkBwB,YAAlB,CAA+BH,MAA/B,EAA7B,IACK,MAAKlB,MAAL,CAAYS,YAAZ,CAAyBS,MAAzB,CACN,CAEDhB,MAAM,EAAG,CAAE,MAAO,MAAKF,MAAL,CAAYE,MAAQ,CAnDd","sourcesContent":["import { NL_star } from \"../lerners/NL_star.js\";\r\nimport { L_star } from \"../lerners/L_star.js\";\r\n\r\nexport class LernerTester {\r\n  lerner: L_star | NL_star;\r\n\r\n  constructor(lerner: L_star | NL_star) {\r\n    this.lerner = lerner;\r\n  }\r\n\r\n  next_step() {\r\n    if (this.lerner.finish) { }\r\n    else if (!this.close_action()) { }\r\n    else if (!this.consistence_action()) { }\r\n    else this.send_automaton_action()\r\n  }\r\n\r\n  close_action(): boolean {\r\n    const close_rep = this.lerner.is_close();\r\n    if (close_rep != undefined) {\r\n      this.lerner.add_elt_in_S(close_rep);\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  consistence_action(): boolean {\r\n    const consistence_rep = this.lerner.is_consistent()\r\n    if (consistence_rep != undefined) {\r\n      let s1 = consistence_rep[0];\r\n      let s2 = consistence_rep[1];\r\n      let new_col = consistence_rep[2]\r\n      this.lerner.add_column(new_col);\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  send_automaton_action() {\r\n    let automaton = this.lerner.make_automaton();\r\n    this.lerner.automaton = automaton;\r\n    let answer = this.lerner.make_member(automaton);\r\n    if (answer != undefined) {\r\n      this.table_to_update_after_equiv(answer!)\r\n      return;\r\n    }\r\n    this.lerner.finish = true;\r\n  }\r\n\r\n  table_to_update_after_equiv(answer: string) {\r\n    if (this instanceof NL_star) (this as NL_star).add_elt_in_E(answer);\r\n    else this.lerner.add_elt_in_S(answer)\r\n  }\r\n\r\n  finish() { return this.lerner.finish };\r\n}"],"file":"AlgoTester.js"}