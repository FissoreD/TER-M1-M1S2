{"version":3,"sources":["../../src/test_nodejs/ReadBenchMark.ts"],"names":["readdirSync","readFileSync","txtToAutomaton","TeacherTakingAut","L_star","NL_star","clearFile","csvHead","printCsvCompare","printInfo","writeToFile","path","files","automata","toWrite","file","content","toString","automaton","push","fileName","index","length","teacher","description","L","NL","console","log","repeat","make_all_queries"],"mappings":"AACA,OAASA,WAAT,CAAsBC,YAAtB,KAA0C,IAA1C,CACA,OAASC,cAAT,KAA+B,uBAA/B,CACA,OAASC,gBAAT,KAAiC,gCAAjC,CACA,OAASC,MAAT,KAAuB,uBAAvB,CACA,OAASC,OAAT,KAAwB,wBAAxB,CACA,OAASC,SAAT,CAAoBC,OAApB,CAA6BC,eAA7B,CAA8CC,SAA9C,CAAyDC,WAAzD,KAA4E,oBAA5E,CAEA,GAAIC,CAAAA,IAAI,CAAG,yBAAX,CACEC,KAAK,CAAGZ,WAAW,CAACW,IAAD,CADrB,CAEEE,QAAqB,CAAG,EAF1B,CAGEC,OAAO,CAAG,IAHZ,CAMA,IAAK,KAAMC,CAAAA,IAAX,GAAmBH,CAAAA,KAAnB,CAA0B,CACxB,GAAII,CAAAA,OAAO,CAAGf,YAAY,CAACU,IAAI,CAAGI,IAAR,CAAZ,CAA0BE,QAA1B,EAAd,CACA,GAAIC,CAAAA,SAAS,CAAGhB,cAAc,CAACc,OAAD,CAA9B,CACAH,QAAQ,CAACM,IAAT,CAAcD,SAAd,CACD,CAED,GAAIE,CAAAA,QAAQ,CAAG,WAAf,CACA,GAAIN,OAAJ,CAAa,CACXR,SAAS,CAACc,QAAD,CAAT,CACAV,WAAW,CAACU,QAAD,CAAWb,OAAX,CACZ,CAED,IAAK,GAAIc,CAAAA,KAAK,CAAG,CAAjB,CAAoBA,KAAK,CAAGR,QAAQ,CAACS,MAArC,CAA6CD,KAAK,EAAlD,CAAsD,CACpD,KAAMH,CAAAA,SAAS,CAAGL,QAAQ,CAACQ,KAAD,CAA1B,CAEA,GAAIE,CAAAA,OAAO,CAAG,GAAIpB,CAAAA,gBAAJ,CAAqB,CAAEe,SAAS,CAAEA,SAAb,CAAwBM,WAAW,CAAEH,KAAK,CAAG,EAA7C,CAArB,CAAd,CACA,GAAII,CAAAA,CAAC,CAAG,GAAIrB,CAAAA,MAAJ,CAAWmB,OAAX,CAAR,CACEG,EAAE,CAAG,GAAIrB,CAAAA,OAAJ,CAAYkB,OAAZ,CADP,CAGAI,OAAO,CAACC,GAAR,CAAY,IAAIC,MAAJ,CAAW,EAAX,CAAZ,EACAF,OAAO,CAACC,GAAR,CAAY,sBAAZ,CAAoCP,KAApC,EAEAM,OAAO,CAACC,GAAR,CAAY,OAAZ,EAEAH,CAAC,CAACK,gBAAF,GACAH,OAAO,CAACC,GAAR,CAAYnB,SAAS,CAACgB,CAAD,CAAI,IAAJ,CAArB,EACAE,OAAO,CAACC,GAAR,CAAY,IAAIC,MAAJ,CAAW,EAAX,CAAZ,EACAF,OAAO,CAACC,GAAR,CAAY,QAAZ,EACAF,EAAE,CAACI,gBAAH,GACAH,OAAO,CAACC,GAAR,CAAYnB,SAAS,CAACiB,EAAD,CAAK,KAAL,CAArB,EAEA,GAAIZ,OAAJ,CAAaJ,WAAW,CAACU,QAAD,CAAWZ,eAAe,CAACiB,CAAD,CAAIC,EAAJ,CAA1B,CACzB","sourcesContent":["import { Automaton } from \"../automaton/Automaton.js\";\r\nimport { readdirSync, readFileSync } from \"fs\";\r\nimport { txtToAutomaton } from \"../tools/Utilities.js\";\r\nimport { TeacherTakingAut } from \"../teacher/TeacherTakingAut.js\";\r\nimport { L_star } from \"../learners/L_star.js\";\r\nimport { NL_star } from \"../learners/NL_star.js\";\r\nimport { clearFile, csvHead, printCsvCompare, printInfo, writeToFile } from \"./PrintFunction.js\";\r\n\r\nlet path = \"./statistics/benchMark/\",\r\n  files = readdirSync(path),\r\n  automata: Automaton[] = [],\r\n  toWrite = true;\r\n\r\n\r\nfor (const file of files) {\r\n  let content = readFileSync(path + file).toString();\r\n  let automaton = txtToAutomaton(content);\r\n  automata.push(automaton);\r\n}\r\n\r\nlet fileName = \"benchMark\";\r\nif (toWrite) {\r\n  clearFile(fileName)\r\n  writeToFile(fileName, csvHead)\r\n}\r\n\r\nfor (let index = 0; index < automata.length; index++) {\r\n  const automaton = automata[index];\r\n\r\n  let teacher = new TeacherTakingAut({ automaton: automaton, description: index + \"\" });\r\n  let L = new L_star(teacher),\r\n    NL = new NL_star(teacher);\r\n\r\n  console.log(\"=\".repeat(90))\r\n  console.log(\"Current benchmark : \", index);\r\n\r\n  console.log(\"In L*\");\r\n\r\n  L.make_all_queries();\r\n  console.log(printInfo(L, \"L*\"));\r\n  console.log(\"-\".repeat(80));\r\n  console.log(\"In NL*\");\r\n  NL.make_all_queries();\r\n  console.log(printInfo(NL, \"NL*\"));\r\n\r\n  if (toWrite) writeToFile(fileName, printCsvCompare(L, NL))\r\n}"],"file":"ReadBenchMark.js"}