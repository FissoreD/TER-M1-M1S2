{"version":3,"sources":["../../src/test_nodejs/PrintFunction.ts"],"names":["LearnerBase","strict","appendFileSync","writeFileSync","printInfo","algo","algoName","member_number","equiv_number","automaton","state_number","transition_number","closedness_counter","consistence_counter","printCsvCompare","L","NL","teacher","printProperty","propery","call","regex","alphabet","length","description","split","prototype","get_member_number","get_equiv_number","csvHead","fileNameToCsv","fileName","clearFile","writeToFile","content"],"mappings":"AAEA,OAASA,WAAT,KAA4B,4BAA5B,CACA,OAASC,MAAT,KAAuB,QAAvB,CACA,OAASC,cAAT,CAAyBC,aAAzB,KAA8C,IAA9C,CAGA,MAAO,IAAIC,CAAAA,SAAS,CAAG,CAACC,IAAD,CAAoBC,QAApB,GAAyC,CAC9D,MAAQ,GAAEA,QAAS,gBAAeD,IAAI,CAACE,aAAc,aAAYF,IAAI,CAACG,YAAa,cAAaH,IAAI,CAACI,SAAL,EAAgBC,YAAhB,EAA+B,mBAAkBL,IAAI,CAACI,SAAL,EAAgBE,iBAAhB,EAAoC,qBAAoBN,IAAI,CAACO,kBAAmB,sBAAqBP,IAAI,CAACQ,mBAAoB,EAChR,CAFM,CAIP,MAAO,IAAIC,CAAAA,eAAe,CAAG,CAACC,CAAD,CAAYC,EAAZ,GAA4B,CACvDf,MAAM,CAACc,CAAC,CAACE,OAAF,EAAaD,EAAE,CAACC,OAAjB,CAAN,CACA,GAAIC,CAAAA,aAAa,CAAIC,OAAD,EAA4B,GAAD,CAAGA,OAAO,CAACC,IAAR,CAAaL,CAAb,EAAiBI,OAAO,CAACC,IAAR,CAAaJ,EAAb,CAApB,CAAqC,EAApF,CACA,MAAQ,GAAED,CAAC,CAACE,OAAF,CAAUI,KAAM,IAAGN,CAAC,CAACE,OAAF,CAAUK,QAAV,CAAmBC,MAAO,IAAGR,CAAC,CAACE,OAAF,CAAUO,WAAV,CAAsBC,KAAtB,CAA4B,GAA5B,EAAiC,CAAjC,CAAoC,IAAGP,aAAa,CAAClB,WAAW,CAAC0B,SAAZ,CAAsBC,iBAAvB,CAA0C,IAAGT,aAAa,CAAClB,WAAW,CAAC0B,SAAZ,CAAsBE,gBAAvB,CAAyC,IAAGV,aAAa,CAAClB,WAAW,CAAC0B,SAAZ,CAAsBjB,SAAtB,CAAiCC,YAAlC,CAAgD,IAAGQ,aAAa,CAAClB,WAAW,CAAC0B,SAAZ,CAAsBjB,SAAtB,CAAiCE,iBAAlC,CAAqD,EACvV,CAJM,CAMP,MAAO,IAAIkB,CAAAA,OAAO,CAAG,uMAAd,CAEP,GAAIC,CAAAA,aAAa,CAAIC,QAAD,EAAsB,gBAAkBA,QAAlB,CAA6B,MAAvE,CAEA,MAAO,IAAIC,CAAAA,SAAS,CAAID,QAAD,EAAsB5B,aAAa,CAAC2B,aAAa,CAACC,QAAD,CAAd,CAA0B,EAA1B,CAAnD,CAEP,MAAO,IAAIE,CAAAA,WAAW,CAAG,CAACF,QAAD,CAAmBG,OAAnB,GAAuC,CAC9DhC,cAAc,CAAC4B,aAAa,CAACC,QAAD,CAAd,CAA0BG,OAAO,CAAG,IAApC,CACf,CAFM","sourcesContent":["import { L_star } from \"../learners/L_star.js\";\r\nimport { NL_star } from \"../learners/NL_star.js\";\r\nimport { LearnerBase } from \"../learners/LearnerBase.js\";\r\nimport { strict } from \"assert\";\r\nimport { appendFileSync, writeFileSync } from \"fs\";\r\n\r\n\r\nexport let printInfo = (algo: LearnerBase, algoName: string) => {\r\n  return `${algoName} : queries = ${algo.member_number}, equiv = ${algo.equiv_number}, states = ${algo.automaton?.state_number()}, transitions = ${algo.automaton?.transition_number()}, closedness pb = ${algo.closedness_counter}, consistence pb = ${algo.consistence_counter}`;\r\n}\r\n\r\nexport let printCsvCompare = (L: L_star, NL: NL_star) => {\r\n  strict(L.teacher == NL.teacher)\r\n  let printProperty = (propery: () => number) => `${propery.call(L), propery.call(NL)}`\r\n  return `${L.teacher.regex},${L.teacher.alphabet.length},${L.teacher.description.split(\",\")[0]},${printProperty(LearnerBase.prototype.get_member_number)},${printProperty(LearnerBase.prototype.get_equiv_number)},${printProperty(LearnerBase.prototype.automaton!.state_number)},${printProperty(LearnerBase.prototype.automaton!.transition_number)}`;\r\n}\r\n\r\nexport let csvHead = \"Regex,Length alphabet,Description,L Membership queries,NL Membership queries,L Equivalence queries,NL Equivalence queries,L State nb in A,NL State nb in A,L Transition nb in A,NL Transition nb in A\"\r\n\r\nlet fileNameToCsv = (fileName: string) => \"./statistics/\" + fileName + \".csv\"\r\n\r\nexport let clearFile = (fileName: string) => writeFileSync(fileNameToCsv(fileName), \"\")\r\n\r\nexport let writeToFile = (fileName: string, content: string) => {\r\n  appendFileSync(fileNameToCsv(fileName), content + \"\\n\")\r\n}"],"file":"PrintFunction.js"}