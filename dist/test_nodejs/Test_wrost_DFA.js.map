{"version":3,"sources":["../../src/test_nodejs/Test_wrost_DFA.ts"],"names":["clearFile","csvHead","printCsvCompare","writeToFile","L_star","NL_star","TeacherNoAutomaton","myLog","toWrite","fileName","regexList","minN","maxN","i","counter_examples","j","Math","max","push","repeat","printInfo","algo","algoName","member_number","equiv_number","automaton","state_number","transition_number","index","length","regex","teacher1","alphabet","replace","teacher","L","NL","a","make_all_queries"],"mappings":"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","sourcesContent":["import { LearnerBase } from \"../learners/LearnerBase.js\";\r\nimport { clearFile, csvHead, printCsvCompare, writeToFile } from \"./PrintFunction.js\";\r\nimport { L_star } from \"../learners/L_star.js\";\r\nimport { NL_star } from \"../learners/NL_star.js\";\r\nimport { TeacherNoAutomaton } from \"../teacher/TeacherNoAutomaton.js\";\r\nimport { myLog } from \"../tools/Utilities.js\";\r\n\r\n/**\r\n * About this file : \r\n * The goal here is to compare L and NL algo in term\r\n * of the number of queries and equiv function that \r\n * the learner will ask to the teacher.\r\n * We measure in this way a particular kind of \r\n * complexity of these algorithms and will try to \r\n * test which one of the two algorithms will perform less\r\n * interactions with the teacher.\r\n */\r\n\r\nlet toWrite = true\r\n\r\nlet fileName = \"wrostDFA\";\r\nif (toWrite) {\r\n  clearFile(fileName)\r\n  writeToFile(fileName, csvHead)\r\n}\r\nlet regexList: [string, string[]][] = []\r\nconst minN = 0, maxN = 10;\r\nfor (let i = minN; i < maxN; i++) {\r\n  let counter_examples: string[] = []\r\n  for (let j = Math.max(0, i - 3); j <= i + 3; j++) {\r\n    counter_examples.push(\"a\".repeat(j))\r\n    counter_examples.push(\"a\".repeat(j) + \"b\")\r\n    counter_examples.push(\"a\".repeat(j) + \"b\" + \"a\".repeat(i))\r\n    counter_examples.push(\"a\".repeat(j) + \"b\" + \"b\".repeat(i))\r\n    counter_examples.push(\"a\".repeat(j) + \"a\" + \"b\".repeat(i))\r\n  }\r\n  counter_examples.push(\"bbbbbbbbbbbbbbbabbbbbab\")\r\n  regexList.push([\"(a+b)*a\" + \"(a+b)\".repeat(i), counter_examples])\r\n}\r\n\r\n\r\nlet printInfo = (algo: LearnerBase, algoName: string) => {\r\n  return `${algoName} : queries = ${algo.member_number}, equiv = ${algo.equiv_number}, states = ${algo.automaton?.state_number()}, transitions = ${algo.automaton?.transition_number()}`;\r\n}\r\n\r\nfor (let index = 0; index < regexList.length; index++) {\r\n  const [regex, counter_examples] = regexList[index]\r\n  let teacher1 = new TeacherNoAutomaton({\r\n    alphabet: \"ab\",\r\n    regex: regex.replace(/\\+/g, \"|\"),\r\n    counter_examples: counter_examples,\r\n  }, (minN + index) + \"\")\r\n  // let teacher2 = new TeacherAutomaton(regex);\r\n  let teacher = teacher1;\r\n\r\n  let L = new L_star(teacher)\r\n  let NL = new NL_star(teacher)\r\n\r\n  myLog({ a: [\"==============================\"] });\r\n  myLog({ a: [\"Current regexp : \", regex] });\r\n\r\n  myLog({ a: [\"In L*\"] });\r\n\r\n  L.make_all_queries();\r\n  myLog({ a: [printInfo(L, \"L*\")] });\r\n  myLog({ a: [\"In NL*\"] });\r\n  NL.make_all_queries();\r\n  myLog({ a: [printInfo(NL, \"NL*\")] });\r\n\r\n  if (toWrite) writeToFile(fileName, printCsvCompare(L, NL))\r\n}\r\n"],"file":"Test_wrost_DFA.js"}