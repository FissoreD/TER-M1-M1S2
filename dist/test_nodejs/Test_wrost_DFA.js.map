{"version":3,"sources":["../../src/test_nodejs/Test_wrost_DFA.ts"],"names":["clearFile","csvHead","printCsvCompare","writeToFile","L_star","NL_star","TeacherNoAutomaton","toWrite","fileName","regexList","i","counter_exemples","j","Math","max","push","repeat","printInfo","algo","algoName","member_number","equiv_number","automaton","state_number","transition_number","regex","teacher1","alphabet","replace","teacher","L","NL","console","log","make_all_queries"],"mappings":"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","sourcesContent":["import { LearnerBase } from \"../learners/LearnerBase.js\";\r\nimport { clearFile, csvHead, printCsvCompare, writeToFile } from \"./PrintFunction.js\";\r\nimport { L_star } from \"../learners/L_star.js\";\r\nimport { NL_star } from \"../learners/NL_star.js\";\r\nimport { TeacherNoAutomaton } from \"../teacher/TeacherNoAutomaton.js\";\r\n\r\n/**\r\n * About this file : \r\n * The goal here is to compare L and NL algo in term\r\n * of the number of queries and equiv function that \r\n * the learner will ask to the teacher.\r\n * We measure in this way a particular kind of \r\n * complexity of these algorithms and will try to \r\n * test which one of the two algorithms will perform less\r\n * interactions with the teacher.\r\n */\r\n\r\nlet toWrite = false\r\n\r\nlet fileName = \"wrostDFA\";\r\nclearFile(fileName)\r\nwriteToFile(fileName, csvHead)\r\n\r\nlet regexList: [string, string[]][] = []\r\nfor (let i = 8; i < 10; i++) {\r\n  let counter_exemples: string[] = []\r\n  for (let j = Math.max(0, i - 3); j <= i + 3; j++) {\r\n    counter_exemples.push(\"a\".repeat(j))\r\n    counter_exemples.push(\"a\".repeat(j) + \"b\")\r\n    counter_exemples.push(\"a\".repeat(j) + \"b\" + \"a\".repeat(i))\r\n    counter_exemples.push(\"a\".repeat(j) + \"b\" + \"b\".repeat(i))\r\n    counter_exemples.push(\"a\".repeat(j) + \"a\" + \"b\".repeat(i))\r\n  }\r\n  counter_exemples.push(\"bbbbbbbbbbbbbbbabbbbbab\")\r\n  regexList.push([\"(a+b)*a\" + \"(a+b)\".repeat(i), counter_exemples])\r\n}\r\n\r\n\r\nlet printInfo = (algo: LearnerBase, algoName: string) => {\r\n  return `${algoName} : queries = ${algo.member_number}, equiv = ${algo.equiv_number}, states = ${algo.automaton?.state_number()}, transitions = ${algo.automaton?.transition_number()}`;\r\n}\r\n\r\nfor (const [regex, counter_exemples] of regexList) {\r\n  let teacher1 = new TeacherNoAutomaton({\r\n    alphabet: \"ab\",\r\n    regex: regex.replace(/\\+/g, \"|\"),\r\n    counter_exemples: counter_exemples\r\n  })\r\n  // let teacher2 = new TeacherAutomaton(regex);\r\n  let teacher = teacher1;\r\n\r\n  let L = new L_star(teacher)\r\n  let NL = new NL_star(teacher)\r\n\r\n  console.log(\"==============================\");\r\n  console.log(\"Current regexp : \", regex);\r\n\r\n  console.log(\"In L*\");\r\n\r\n  L.make_all_queries();\r\n  console.log(printInfo(L, \"L*\"));\r\n  console.log(\"In NL*\");\r\n  NL.make_all_queries();\r\n  console.log(printInfo(NL, \"NL*\"));\r\n\r\n  if (toWrite) writeToFile(fileName, printCsvCompare(L, NL))\r\n}\r\n"],"file":"Test_wrost_DFA.js"}