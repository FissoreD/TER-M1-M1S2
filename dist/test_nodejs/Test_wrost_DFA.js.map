{"version":3,"sources":["../../src/test_nodejs/Test_wrost_DFA.ts"],"names":["clearFile","csvHead","printCsvCompare","writeToFile","Teacher","L_star","NL_star","fileName","regexList","i","push","repeat","printInfo","algo","algoName","member_number","equiv_number","automaton","state_number","transition_number","regex","teacher","L","NL","make_all_queries","console","log"],"mappings":"AACA,OAASA,SAAT,CAAoBC,OAApB,CAA6BC,eAA7B,CAA8CC,WAA9C,KAAiE,oBAAjE,CACA,OAASC,OAAT,KAAwB,eAAxB,CACA,OAASC,MAAT,KAAuB,sBAAvB,CACA,OAASC,OAAT,KAAwB,uBAAxB,CAaA,GAAIC,CAAAA,QAAQ,CAAG,UAAf,CACAP,SAAS,CAACO,QAAD,CAAT,CACAJ,WAAW,CAACI,QAAD,CAAWN,OAAX,CAAX,CAEA,GAAIO,CAAAA,SAAmB,CAAG,EAA1B,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAG,CAApB,CAAuBA,CAAC,EAAxB,CAA4B,CAC1BD,SAAS,CAACE,IAAV,CAAe,UAAY,QAAQC,MAAR,CAAeF,CAAf,CAA3B,CACD,CAED,GAAIG,CAAAA,SAAS,CAAG,CAACC,IAAD,CAAmBC,QAAnB,GAAwC,CACtD,MAAQ,GAAEA,QAAS,gBAAeD,IAAI,CAACE,aAAc,aAAYF,IAAI,CAACG,YAAa,cAAaH,IAAI,CAACI,SAAL,EAAgBC,YAAhB,EAA+B,mBAAkBL,IAAI,CAACI,SAAL,EAAgBE,iBAAhB,EAAoC,EACtL,CAFD,CAIA,IAAK,KAAMC,CAAAA,KAAX,GAAoBZ,CAAAA,SAApB,CAA+B,CAE7B,GAAIa,CAAAA,OAAO,CAAG,GAAIjB,CAAAA,OAAJ,CAAY,EAAZ,CAAgBgB,KAAhB,CAAd,CACA,GAAIE,CAAAA,CAAC,CAAG,GAAIjB,CAAAA,MAAJ,CAAWgB,OAAX,CAAR,CACA,GAAIE,CAAAA,EAAE,CAAG,GAAIjB,CAAAA,OAAJ,CAAYe,OAAZ,CAAT,CAKAC,CAAC,CAACE,gBAAF,GACAC,OAAO,CAACC,GAAR,CAAYd,SAAS,CAACU,CAAD,CAAI,IAAJ,CAArB,EACAC,EAAE,CAACC,gBAAH,GACAC,OAAO,CAACC,GAAR,CAAYd,SAAS,CAACW,EAAD,CAAK,KAAL,CAArB,EAEApB,WAAW,CAACI,QAAD,CAAWL,eAAe,CAACoB,CAAD,CAAIC,EAAJ,CAA1B,CACZ","sourcesContent":["import { LernerBase } from \"../lerners/LernerBase.js\";\r\nimport { clearFile, csvHead, printCsvCompare, writeToFile } from \"./PrintFunction.js\";\r\nimport { Teacher } from \"../Teacher.js\";\r\nimport { L_star } from \"../lerners/L_star.js\";\r\nimport { NL_star } from \"../lerners/NL_star.js\";\r\n\r\n/**\r\n * About this file : \r\n * The goal here is to compare L and NL algo in term\r\n * of the number of queries and equiv function that \r\n * the lerner will ask to the teacher.\r\n * We measure in this way a particular kind of \r\n * complexity of these algorithms and will try to \r\n * test which one of the two algorithms will perform less\r\n * interactions with the teacher.\r\n */\r\n\r\nlet fileName = \"wrostDFA\";\r\nclearFile(fileName)\r\nwriteToFile(fileName, csvHead)\r\n\r\nlet regexList: string[] = []\r\nfor (let i = 0; i < 6; i++) {\r\n  regexList.push(\"(a+b)*a\" + \"(a+b)\".repeat(i))\r\n}\r\n\r\nlet printInfo = (algo: LernerBase, algoName: string) => {\r\n  return `${algoName} : queries = ${algo.member_number}, equiv = ${algo.equiv_number}, states = ${algo.automaton?.state_number()}, transitions = ${algo.automaton?.transition_number()}`;\r\n}\r\n\r\nfor (const regex of regexList) {\r\n\r\n  let teacher = new Teacher(\"\", regex)\r\n  let L = new L_star(teacher)\r\n  let NL = new NL_star(teacher)\r\n\r\n  // console.log(\"==============================\");\r\n  // console.log(\"Current regexp : \", regex);\r\n\r\n  L.make_all_queries();\r\n  console.log(printInfo(L, \"L*\"));\r\n  NL.make_all_queries();\r\n  console.log(printInfo(NL, \"NL*\"));\r\n\r\n  writeToFile(fileName, printCsvCompare(L, NL))\r\n}\r\n"],"file":"Test_wrost_DFA.js"}