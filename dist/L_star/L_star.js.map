{"version":3,"sources":["../../src/L_star/L_star.ts"],"names":["Automaton","generate_prefix_list","L_star","constructor","alphabet","teacher","Array","from","query_number","member_number","E","S","SA","observation_table","make_query","forEach","elt","update_observation_table","new_str","value","old_value","undefined","pref","suff","answer","query","make_member","a","member","add_elt_in_S","new_elt","prefix_list","console","log","prefix","includes","move_from_SA_to_S","new_word","e","push","index","indexOf","splice","find_suffix_not_compatible","consistence_error","find","_e","pos","cell","new_col","add_column","L","l","s","define_next_questions","close_rep","is_close","consistence_rep","is_consistent","make_automaton","states","first_state","keys","Object","end_states","filter","k","ar","map","t","some","same_row","s1_ind","length","s2_ind","s1","s2","first_unmacth","b"],"mappings":"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","sourcesContent":["import { Automaton } from \"../Automaton.js\";\r\nimport { Teacher } from \"../Teacher.js\";\r\nimport { generate_prefix_list } from \"../Utilities.js\";\r\nexport type Map_string_string = { [key: string]: string };\r\n\r\nexport class L_star {\r\n  alphabet: string[];\r\n  E: string[];\r\n  S: string[];\r\n  SA: string[];\r\n  observation_table: Map_string_string;\r\n  teacher: Teacher;\r\n  query_number: number;\r\n  member_number: number;\r\n\r\n  constructor(alphabet: string, teacher: Teacher) {\r\n    this.alphabet = Array.from(alphabet);\r\n    this.teacher = teacher;\r\n    this.query_number = 0;\r\n    this.member_number = 0;\r\n    this.E = [\"\"];\r\n    this.S = [\"\"];\r\n    this.SA = Array.from(alphabet);\r\n    this.observation_table = {};\r\n    this.make_query(\"\", \"\");\r\n    this.SA.forEach(elt => this.make_query(elt, \"\"));\r\n  }\r\n\r\n  update_observation_table(new_str: string, value: string) {\r\n    let old_value = this.observation_table[new_str];\r\n    if (old_value != undefined) value = old_value + value\r\n    this.observation_table[new_str] = value;\r\n  }\r\n\r\n  /**\r\n   * 1. Takes a string in parameter and s in {@link S} and e in {@link E}  \r\n   * 2. Asks to the {@link teacher} if question is accepted  \r\n   * 3. Updates {@link observation_table} wrt the answer\r\n   */\r\n  make_query(pref: string, suff: string) {\r\n    var answer = this.teacher.query(pref + suff);\r\n    this.update_observation_table(pref, answer)\r\n    this.query_number++;\r\n  }\r\n\r\n  /**\r\n   * Takes in parameter an {@link Automaton} and ask \r\n   * to the teacher if the automaton knows the language.\r\n   * If so : the Lerner has learnt the language\r\n   * Else : it appends the counter-exemple to {@link S}\r\n   * @param a an Automaton\r\n   */\r\n  make_member(a: Automaton) {\r\n    let answer = this.teacher.member(a);\r\n    this.member_number++;\r\n    return answer;\r\n  }\r\n\r\n  /**\r\n   * For all prefix p of {@link new_elt} if p is not in {@link S} :\r\n   * remove p from {@link SA} and add it to {@link S}\r\n   * @param new_elt the {@link new_elt} to add in {@link S}\r\n   */\r\n  add_elt_in_S(new_elt: string) {\r\n    let prefix_list = generate_prefix_list(new_elt);\r\n    console.log(new_elt, \"is going to be added in S, it has\", prefix_list);\r\n\r\n    for (const prefix of prefix_list) {\r\n      if (this.S.includes(prefix)) return;\r\n      if (this.SA.includes(prefix)) {\r\n        this.move_from_SA_to_S(prefix);\r\n        this.alphabet.forEach(a => {\r\n          const new_word = prefix + a;\r\n          if (!this.SA.includes(new_word) && !this.S.includes(new_word)) {\r\n            this.E.forEach(e => this.make_query(new_word, e));\r\n            this.SA.push(new_word);\r\n          }\r\n        })\r\n      } else {\r\n        this.E.forEach(e => this.make_query(prefix, e));\r\n        this.S.push(prefix)\r\n        this.alphabet.forEach(a => {\r\n          let new_word = prefix + a;\r\n          if (!this.SA.includes(new_word) && !this.S.includes(new_word)) {\r\n            this.SA.push(prefix + a);\r\n            this.E.forEach(e => this.make_query(prefix + a, e));\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  move_from_SA_to_S(elt: string) {\r\n    const index = this.SA.indexOf(elt);\r\n    if (index != -1) this.SA.splice(index, 1);\r\n    this.S.push(elt);\r\n  }\r\n\r\n  find_suffix_not_compatible(consistence_error: string[]) {\r\n    let e = this.E.find((_e, pos) => {\r\n      let cell = (value: number) =>\r\n        this.observation_table[consistence_error[value] + consistence_error[2]][pos];\r\n      return cell(0) != cell(1);\r\n    });\r\n    let new_col = consistence_error[2] + e;\r\n    return new_col;\r\n  }\r\n\r\n  add_column(new_col: string) {\r\n    let L = [this.SA, this.S];\r\n    L.forEach(l => l.forEach(s => this.make_query(s, new_col)));\r\n    this.E.push(new_col);\r\n  }\r\n\r\n  define_next_questions() {\r\n    const close_rep = this.is_close();\r\n    const consistence_rep = this.is_consistent()\r\n    if (close_rep != undefined) {\r\n      this.add_elt_in_S(close_rep);\r\n    } else if (consistence_rep != undefined) {\r\n      let new_col = this.find_suffix_not_compatible(consistence_rep)\r\n      this.add_column(new_col);\r\n    } else {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  make_automaton() {\r\n    let states: Map_string_string = {}\r\n    this.S.forEach(e => states[this.observation_table[e]] = e);\r\n    let first_state = this.observation_table[\"\"];\r\n    let keys = Object.keys(states);\r\n    let end_states: string[] = keys.filter(k => k[0] == '1');\r\n    let ar = keys.map(\r\n      (k) => this.alphabet.map(a => {\r\n        return this.observation_table[states[k] + a]\r\n      }));\r\n    return new Automaton({\r\n      \"alphabet\": this.alphabet,\r\n      \"endNodes\": end_states,\r\n      \"startNode\": first_state,\r\n      \"states\": keys,\r\n      \"transitions\": ar\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * @returns the first t in SA st it dows not exist s in S st row(s) == row (s.a)\r\n   */\r\n  is_close(): string | undefined {\r\n    return this.SA.find(t => !this.S.some(s => this.same_row(s, t)));\r\n  }\r\n\r\n  /**\r\n   * @returns if the {@link observation_table} is consistent\r\n   */\r\n  is_consistent(): string[] | undefined {\r\n    for (let s1_ind = 0; s1_ind < this.S.length; s1_ind++) {\r\n      for (let s2_ind = s1_ind + 1; s2_ind < this.S.length; s2_ind++) {\r\n        let s1 = this.S[s1_ind];\r\n        let s2 = this.S[s2_ind];\r\n        if (this.same_row(s1, s2)) {\r\n          let first_unmacth = this.alphabet.find(a => !this.same_row(s1 + a, s2 + a));\r\n          if (first_unmacth != undefined)\r\n            return [s1, s2, first_unmacth]\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  same_row(a: string, b: string) {\r\n    return this.observation_table[a] == this.observation_table[b];\r\n  }\r\n}"],"file":"L_star.js"}