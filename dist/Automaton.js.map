{"version":3,"sources":["../src/Automaton.ts"],"names":["Automaton","constructor","json","transitions","startNode","endNodes","currentNode","alphabet","Array","from","nodes","states","next_step","next_char","x","indexOf","y","restart","draw_next_step","color_node","initiate_graph","automatonHTML","document","getElementById","removeAttribute","innerHTML","matrix_to_mermaid","mermaid","init","querySelectorAll","forEach","n","circle","get_current_graph_node","smaller_circle","cloneNode","attributes","value","parentNode","insertBefore","nextSibling","node","elts","values","next","getElementsByClassName","firstChild","res","concat","create_entering_arrow","i","length","j","create_triple","console","log","toFill","current_circle","next_circle","includes","style","fill","A","transition","B"],"mappings":"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","sourcesContent":["\r\nexport type AutomatonJson =\r\n  {\r\n    transitions: string[][],\r\n    startNode: string,\r\n    endNodes: string[],\r\n    alphabet: string[] | string,\r\n    states: string[]\r\n  };\r\nexport class Automaton {\r\n  transitions: string[][];\r\n  startNode: string;\r\n  endNodes: string[];\r\n  currentNode: string;\r\n  alphabet: string[];\r\n  nodes: string[];\r\n\r\n  constructor(json: AutomatonJson) {\r\n    this.transitions = json.transitions;\r\n    this.startNode = json.startNode;\r\n    this.endNodes = json.endNodes;\r\n    this.currentNode = this.startNode;\r\n    this.alphabet = Array.from(json.alphabet);\r\n    this.nodes = json.states;\r\n  }\r\n\r\n  next_step(next_char: string) {\r\n    let x = this.nodes.indexOf(this.currentNode);\r\n    let y = this.alphabet.indexOf(next_char);\r\n    this.currentNode = this.transitions[x][y];\r\n  }\r\n\r\n\r\n  restart() {\r\n    this.currentNode = this.startNode;\r\n  }\r\n\r\n  /** GRAPHIC PART */\r\n\r\n  draw_next_step(next_char: string) {\r\n    this.color_node(false);\r\n    this.next_step(next_char);\r\n    this.color_node(true);\r\n  }\r\n\r\n  initiate_graph() {\r\n    let automatonHTML = document.getElementById(\"automaton-mermaid\") as HTMLDivElement;\r\n    automatonHTML.removeAttribute('data-processed')\r\n    automatonHTML.innerHTML = this.matrix_to_mermaid();\r\n\r\n    // @ts-ignore\r\n    mermaid.init(document.querySelectorAll(\".mermaid\"));\r\n\r\n    // Mark end nodes\r\n    this.endNodes.forEach(n => {\r\n      let circle = this.get_current_graph_node(n);\r\n      let smaller_circle = circle.cloneNode() as HTMLElement;\r\n      // @ts-ignore\r\n      (smaller_circle).attributes['r'].value -= 3\r\n      circle.parentNode!.insertBefore(smaller_circle, circle.nextSibling)\r\n    });\r\n\r\n    // Mark current node = initial state\r\n    this.color_node(true);\r\n  }\r\n\r\n  get_current_graph_node(node: string) {\r\n    let elts = document.querySelectorAll('.node').values();\r\n    let currentNode = elts.next();\r\n\r\n    while (elts) {\r\n      if (currentNode.value.getElementsByClassName('nodeLabel')[0].innerHTML == node)\r\n        break;\r\n      currentNode = elts.next();\r\n    }\r\n    return currentNode.value.firstChild! as HTMLElement;\r\n  }\r\n\r\n  matrix_to_mermaid(): string {\r\n    let res = \"flowchart LR\";\r\n    res = res.concat(\"\\n\" + this.create_entering_arrow());\r\n    for (let i = 0; i < this.nodes.length; i++) {\r\n      for (let j = 0; j < this.alphabet.length; j++) {\r\n        res = res.concat(\"\\n\");\r\n        res = res.concat(\r\n          this.create_triple(\r\n            this.nodes[i],\r\n            this.alphabet[j],\r\n            this.transitions[i][j]));\r\n      }\r\n    }\r\n    res = res.concat(\"\\nstyle START fill:#FFFFFF, stroke:#FFFFFF;\")\r\n    console.log(res);\r\n\r\n    return res;\r\n  }\r\n\r\n\r\n  color_node(toFill: boolean) {\r\n    let current_circle = this.get_current_graph_node(this.currentNode) as HTMLElement;\r\n    let next_circle = current_circle.nextSibling as HTMLElement;\r\n    if (toFill) {\r\n      if (this.endNodes.includes(this.currentNode))\r\n        next_circle.style.fill = '#009879';\r\n      else current_circle.style.fill = '#009879';\r\n    } else {\r\n      if (this.endNodes.includes(this.currentNode))\r\n        next_circle.removeAttribute('style');\r\n      else current_circle.removeAttribute('style');\r\n    }\r\n  }\r\n\r\n  create_triple(A: string, transition: string, B: string): string {\r\n    return `${A}((${A})) -->| ${transition} | ${B}((${B}))`;\r\n  }\r\n\r\n  create_entering_arrow(): string {\r\n    return `START[ ]--> ${this.startNode}`\r\n  }\r\n}"],"file":"Automaton.js"}