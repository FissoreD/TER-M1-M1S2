{"version":3,"sources":["../src/Teacher.ts"],"names":["differenceAutomata","minimizeAutomaton","MyAutomatonToHis","regexToAutomaton","boolToString","count_str_occurrences","Teacher","max_word_length","constructor","description","param","check_function","f","counter_exemples","counter","automaton","regexForAutomaton","undefined","alphabet","Array","from","regex","initiate_mapping","res","sort","level","length","res1","forEach","e","a","push","member","sentence","accept_word_nfa","equiv","acceptedByTeacher","filter","acceptedByLerner","symetricDifference","includes","concat","counterExemple","automatonDiff","acceptingStates","toExplore","startState","explored","parent","states","fill","symbol","current","shift","transition","transitions","toStates","fromState","indexOf","id","reverse","join","automMinimized","diff1","diff2","counterEx1","counterEx2","teacher_a_or_baStar","parity","teacherPairZeroAndOne","teacherA3fromLast","teacherEvenAandThreeB","teacherNotAfourthPos","i","charAt","teacher_bStar_a_or_aStart_bStar","match","teacher_b_bStar_a__b_aOrb_star","binaryAddition","charToBin","char","parseInt","toString","padStart","sentenceAr","map","fst_term","snd_term","trd_term","teachers"],"mappings":"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","sourcesContent":["import { Automaton } from \"./automaton/Automaton.js\";\r\nimport { differenceAutomata, minimizeAutomaton, MyAutomatonToHis, regexToAutomaton } from \"./automaton/automaton_type.js\";\r\nimport { boolToString, count_str_occurrences, myFunction } from \"./tools/Utilities.js\";\r\n\r\ntype teacherConstructor = {\r\n  regexForAutomaton?: string, f?: myFunction<string, boolean>, counter_exemples?: string[], alphabet?: string\r\n}\r\n\r\nexport class Teacher {\r\n  check_function?: myFunction<string, boolean>;\r\n  counter_exemples?: string[];\r\n  counter: number;\r\n  description: string;\r\n  alphabet: string[];\r\n  max_word_length = 8;\r\n  regex: string;\r\n  automaton?: Automaton;\r\n\r\n  constructor(description: string, param: teacherConstructor) {\r\n    this.check_function = param.f;\r\n    this.counter_exemples = param.counter_exemples;\r\n    this.counter = 0;\r\n    this.description = description;\r\n    this.automaton = param.regexForAutomaton ? regexToAutomaton(param.regexForAutomaton) : undefined;\r\n    this.alphabet = Array.from(this.automaton ? this.automaton.alphabet : param.alphabet!);\r\n    this.regex = param.regexForAutomaton || \"\";\r\n    // this.word_apperencance = initiate_mapping ? initiate_mapping : this.initiate_mapping();\r\n    // this.initiate_mapping()\r\n    // this.word_apperencance = this.word_apperencance.sort((a, b) => a[0].length - b[0].length);\r\n  }\r\n\r\n  initiate_mapping() {\r\n    let res: [string, boolean][] = [[\"\", this.check_function!(\"\")]]\r\n    let alphabet = Array.from(this.alphabet).sort()\r\n    let level = [\"\"]\r\n    while (res[res.length - 1][0].length < this.max_word_length) {\r\n      let res1: string[] = []\r\n      level.forEach(e => alphabet.forEach(a => {\r\n        res.push([e + a, this.check_function!(e + a)])\r\n        res1.push(e + a)\r\n      }))\r\n      level = res1\r\n    }\r\n    return res;\r\n  }\r\n\r\n  /*\r\n   * @param sentence the sentence to test the appartenance\r\n   * @returns the string \"0\" if the sentence is accepted else \"1\"\r\n   */\r\n  member(sentence: string): string {\r\n    if (this.check_function) return boolToString(this.check_function(sentence));\r\n    return boolToString(this.automaton!.accept_word_nfa(sentence)[0]);\r\n  }\r\n\r\n  equiv(automaton: Automaton): string | undefined {\r\n    if (this.counter_exemples) {\r\n      let acceptedByTeacher = this.counter_exemples.filter(e => this.check_function!(e))\r\n      let acceptedByLerner = this.counter_exemples.filter(e => automaton.accept_word_nfa(e)[0])\r\n      let symetricDifference = acceptedByLerner.filter(e => !acceptedByTeacher.includes(e)).\r\n        concat(acceptedByTeacher.filter(e => !acceptedByLerner.includes(e)))\r\n      return symetricDifference.length == 0 ? undefined : symetricDifference[0];\r\n    }\r\n    let counterExemple = (automatonDiff: Automaton): string | undefined => {\r\n      if (automatonDiff.acceptingStates.length == 0) return undefined;\r\n      let toExplore = [automatonDiff.startState[0]]\r\n      let explored: string[] = []\r\n      type parentChild = { parent: string, symbol: string }\r\n      let parent: parentChild[] = new Array(automatonDiff.states.length).fill({ parent: \"\", symbol: \"\" });\r\n      while (toExplore.length > 0) {\r\n        let current = toExplore.shift()!\r\n        if (explored.includes(current)) continue;\r\n        explored.push(current)\r\n        for (const transition of automatonDiff.transitions) {\r\n          if (!explored.includes(transition.toStates[0]) && transition.fromState == current) {\r\n            parent[automatonDiff.states.indexOf(transition.toStates[0])] =\r\n              { parent: transition.fromState, symbol: transition.symbol }\r\n            toExplore.push(transition.toStates[0])\r\n          }\r\n        }\r\n\r\n        if (automatonDiff.acceptingStates.includes(current)) {\r\n          let id = automatonDiff.states.indexOf(current);\r\n          let res: string[] = [parent[id].symbol]\r\n          while (parent[id].parent != \"\") {\r\n            id = automatonDiff.states.indexOf(parent[id].parent)\r\n            res.push(parent[id].symbol)\r\n          }\r\n          return res.reverse().join(\"\");\r\n        }\r\n      }\r\n      return \"\";\r\n    }\r\n    let automMinimized = minimizeAutomaton(MyAutomatonToHis(automaton));\r\n    let diff1 = differenceAutomata(this.automaton!, automMinimized);\r\n    let diff2 = differenceAutomata(automMinimized, this.automaton!);\r\n    // BREAKPOINT AFTER DIFF \r\n    let counterEx1 = counterExemple(diff1);\r\n    let counterEx2 = counterExemple(diff2);\r\n    // AFTER COUNTEREXEMPLE\r\n    // console.log(`C1 = { ${counterEx1} }, C2 = { ${counterEx2} }`);\r\n\r\n    if (counterEx1 == undefined) return counterEx2;\r\n    if (counterEx2 == undefined) return counterEx1;\r\n    return counterEx1! < counterEx2! ? counterEx1 : counterEx2;\r\n  }\r\n}\r\n\r\n/** \r\n * a teacher accepting a + (ba)*\r\n */\r\nexport let teacher_a_or_baStar = new Teacher(\r\n  `Automata accepting \\\\(regex(a + (ba)*)\\\\)`,\r\n  {\r\n    regexForAutomaton: \"a+(ba)*\",\r\n    alphabet: \"ab\", f: sentence => {\r\n      let parity = count_str_occurrences(sentence, \"0\");\r\n      return parity % 2 == 0 && sentence.length % 2 == 0;\r\n    }\r\n  });\r\n\r\n/** \r\n * a teacher accepting the language over {0, 1}\r\n * of strings with even number of 0 and even number of 1\r\n */\r\nexport let teacherPairZeroAndOne = new Teacher(\r\n  `Automata accepting \\\\(L = \\\\{w \\\\in (0, 1)^* | \\\\#(w_0) \\\\% 2 = 0 \\\\land \\\\#(w_1) \\\\% 2 = 0\\\\}\\\\) <br/> → words with even nb of '0' and even nb of '1'`,\r\n  {\r\n    alphabet: \"(00+11+(01+10)(00+11)*(01+10))*\",\r\n    f: sentence => {\r\n      let parity = count_str_occurrences(sentence, \"0\");\r\n      return parity % 2 == 0 && sentence.length % 2 == 0;\r\n    }, counter_exemples: [\"11\", \"011\"]\r\n  });\r\n\r\n/**\r\n * a teacher accepting the language over {a, b}\r\n * of strings with an \"a\" in the third letter from end\r\n * (exemple abb, baab, bbabbaab)\r\n */\r\nexport let teacherA3fromLast = new Teacher(\r\n  `Automata accepting \\\\(L = \\\\{w \\\\in (a, b)^* | w[-3] = a\\\\}\\\\) <br/>\r\n    → words with an 'a' in the 3rd pos from end`,\r\n  {\r\n    regexForAutomaton: \"(a+b)*a(a+b)(a+b)\",\r\n    f: sentence => sentence.length >= 3 && sentence[sentence.length - 3] == 'a'\r\n  }\r\n)\r\n/**\r\n * a teacher accepting the language over {a, b}\r\n * of strings with any even number of \"a\" or at least three \"b\"\r\n */\r\nexport let teacherEvenAandThreeB = new Teacher(\r\n  `Automata accepting \\\\(L = \\\\{w \\\\in (a, b)^* | \\\\#(w_b) \\\\geq 3 \\\\lor \\\\#(w_a) \\\\% 2 = 1\\\\}\\\\)\r\n  <br/> → words with at least 3 'b' or an odd nb of 'a'`,\r\n  {\r\n    regexForAutomaton: \"b*a(b+ab*a)*+(a+b)*ba*ba*b(a+b)*\",\r\n    f: sentence => count_str_occurrences(sentence, \"b\") >= 3 || count_str_occurrences(sentence, \"a\") % 2 == 1\r\n  }\r\n);\r\n\r\n/**\r\n * a teacher accepting the language over {a, b}\r\n * of strings not having an a in a position multiple\r\n * of 4 \r\n */\r\nexport let teacherNotAfourthPos = new Teacher(\r\n  `Automata accepting \\\\(L = \\\\{w \\\\in (a,b)^* \\\\land i \\\\in 4\\\\mathbb{N} | w[i] \\\\neq a \\\\land i \\\\leq len(w)\\\\}\\\\) <br/>\r\n  → words without an 'a' in a position multiple of 4`,\r\n  {\r\n    regexForAutomaton: \"((a+b)(a+b)(a+b)b)*(a+b+$)(a+b+$)(a+b+$)\",\r\n    f: sentence => {\r\n      for (let i = 3; i < sentence.length; i += 4) {\r\n        if (sentence.charAt(i) == \"a\") return false;\r\n      }\r\n      return true;\r\n    }\r\n  })\r\n\r\n/**\r\n * a teacher accepting the regex bb*a + a*b*\r\n */\r\nexport let teacher_bStar_a_or_aStart_bStar = new Teacher(\r\n  `Automata accepting \\\\(L = regex((bb^*a) + (a^*b^*))\\\\)`,\r\n  {\r\n    regexForAutomaton: \"(bb*a)+(a*b*)\",\r\n    f: sentence => {\r\n      return sentence.match(/^((b+a)|(a*b*))$/g) != undefined\r\n    }\r\n  })\r\n\r\n/**\r\n * a teacher accepting the regex bb*($ + a(b(a+b))*)\r\n */\r\nexport let teacher_b_bStar_a__b_aOrb_star = new Teacher(\r\n  `Automata accepting \\\\(L = regex(bb^*($+a(b(a+b))^*)\\\\)`,\r\n  { regexForAutomaton: \"bb*($+a(b(a+b))*)\" }\r\n)\r\n\r\nexport let binaryAddition = new Teacher(\r\n  `Automata accepting the sum between binary words, exemple : <br>\r\n  <pre>\r\n  0101 + \r\n  1001 = \r\n  1110 </pre>\r\n  we encode this sum as the concatenation of vectors of size 3 : <br>\r\n  <pre>\r\n  fst column 011 = 3\r\n  snd column 101 = 5 \r\n  trd column 001 = 1 \r\n  fth column 110 = 6 </pre>\r\n  so 3516 which is a valid word for the sum <br>\r\n  <input class=\"sum-calc sum-calc-style\" onkeyup=\"update_input()\"> + <br>\r\n  <input class=\"sum-calc sum-calc-style\" onkeyup=\"update_input()\"> = <br>\r\n  <input class=\"sum-calc sum-calc-style\" onkeyup=\"update_input()\"><br>\r\n  <button id=\"calc\" onclick=\"send_calc_button()\">Send</button>\r\n  <span class=\"sum-calc-style\" id=\"add-res\"></span>\r\n  `,\r\n  {\r\n    regexForAutomaton: \"((0+3+5)+1(7+4+2)*6)*\",\r\n    f: sentence => {\r\n      let charToBin = (char: string) =>\r\n        (parseInt(char) >>> 0).toString(2).padStart(3, \"0\")\r\n      let sentenceAr = Array.from(sentence).map(e => charToBin(e))\r\n      // console.log(sentence)\r\n      let fst_term = parseInt(sentenceAr.map(e => e[0]).join(''), 2);\r\n      let snd_term = parseInt(sentenceAr.map(e => e[1]).join(''), 2);\r\n      let trd_term = parseInt(sentenceAr.map(e => e[2]).join(''), 2);\r\n      // console.log(fst_term, snd_term, trd_term);\r\n      return fst_term + snd_term == trd_term;\r\n    }\r\n  }\r\n)\r\n\r\nexport let teachers = [teacher_a_or_baStar, teacher_b_bStar_a__b_aOrb_star, binaryAddition, teacherA3fromLast, teacherEvenAandThreeB, teacherNotAfourthPos, teacherPairZeroAndOne, teacher_bStar_a_or_aStart_bStar]"],"file":"Teacher.js"}