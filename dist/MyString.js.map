{"version":3,"sources":["../src/MyString.ts"],"names":["MyString","String","constructor","entry","prefix_list","generate_prefix_list","toString","suffix_list","generate_suffix_list","str","Array","length","fill","map","_","i","substring","is_prefix","is_suffix"],"mappings":"AAKA,MAAO,MAAMA,CAAAA,QAAN,QAAuBC,CAAAA,MAAO,CAInCC,WAAW,CAACC,KAAD,CAAgB,CACzB,MAAMA,KAAN,EACA,KAAKC,WAAL,CAAmBJ,QAAQ,CAACK,oBAAT,CAA8B,KAAKC,QAAL,EAA9B,CAAnB,CACA,KAAKC,WAAL,CAAmBP,QAAQ,CAACQ,oBAAT,CAA8B,KAAKF,QAAL,EAA9B,CACpB,CAM0B,MAApBD,CAAAA,oBAAoB,CAAII,GAAD,EAC5BC,KAAK,CAACD,GAAG,CAACE,MAAJ,CAAa,CAAd,CAAL,CAAsBC,IAAtB,CAA2B,CAA3B,EAA8BC,GAA9B,CAAkC,CAACC,CAAD,CAAIC,CAAJ,GAAUN,GAAG,CAACO,SAAJ,CAAc,CAAd,CAAiBD,CAAjB,CAA5C,CADyB,CAOA,MAApBP,CAAAA,oBAAoB,CAAIC,GAAD,EAC5BC,KAAK,CAACD,GAAG,CAACE,MAAJ,CAAa,CAAd,CAAL,CAAsBC,IAAtB,CAA2B,EAA3B,EAA+BC,GAA/B,CAAmC,CAACC,CAAD,CAAIC,CAAJ,GAAUN,GAAG,CAACO,SAAJ,CAAcD,CAAd,CAAiBN,GAAG,CAACE,MAAJ,CAAa,CAA9B,CAA7C,CADyB,CAM3BM,SAAS,CAACR,GAAD,CAAuB,CAC9B,MAAOA,CAAAA,GAAG,CAACO,SAAJ,CAAc,CAAd,CAAiBP,GAAG,CAACE,MAArB,GAAgC,KAAKL,QAAL,EACxC,CAKDY,SAAS,CAACT,GAAD,CAAuB,CAC9B,MAAOA,CAAAA,GAAG,CAACO,SAAJ,CAAc,KAAKL,MAAL,CAAcF,GAAG,CAACE,MAAhC,GAA2C,KAAKL,QAAL,EACnD,CApCkC","sourcesContent":["/**\r\n * This utilitary class aims\r\n * return prefix and suffix\r\n * of a string s\r\n */\r\nexport class MyString extends String {\r\n  private prefix_list: string[];\r\n  private suffix_list: string[];\r\n\r\n  constructor(entry: string) {\r\n    super(entry);\r\n    this.prefix_list = MyString.generate_prefix_list(this.toString());\r\n    this.suffix_list = MyString.generate_suffix_list(this.toString());\r\n  }\r\n\r\n  /**\r\n   * creates all generate_prefix_list from the str passed in input :\r\n   * exemple for hello : ['', 'h', 'he', 'hel', 'hell', 'hello']\r\n   */\r\n  static generate_prefix_list = (str: string) =>\r\n    Array(str.length + 1).fill(0).map((_, i) => str.substring(0, i));\r\n\r\n  /**\r\n   * creates all suffix from the str passed in input :\r\n   * exemple for hello : ['hello', 'ello', 'llo', 'lo', 'o', '']\r\n   */\r\n  static generate_suffix_list = (str: string) =>\r\n    Array(str.length + 1).fill(\"\").map((_, i) => str.substring(i, str.length + 1));\r\n\r\n  /** \r\n   * @returns {boolean} if this is a prefix of str\r\n   */\r\n  is_prefix(str: String): boolean {\r\n    return str.substring(0, str.length) == this.toString();\r\n  }\r\n\r\n  /** \r\n   * @returns {boolean} if str is a suffix of this\r\n   */\r\n  is_suffix(str: String): boolean {\r\n    return str.substring(this.length - str.length) == this.toString();\r\n  }\r\n}"],"file":"MyString.js"}