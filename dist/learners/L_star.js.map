{"version":3,"sources":["../../src/learners/L_star.ts"],"names":["Automaton","State","LearnerBase","L_star","constructor","teacher","make_automaton","wordForState","statesMap","Map","acceptingStates","initialStates","statesSet","Set","S","forEach","s","name","observation_table","get","state","alphabet","push","isAccepting","isInitial","set","add","word","symbol","outTransitions","automaton","is_close","res","SA","find","t","some","same_row","closedness_counter","undefined","is_consistent","s1_ind","length","s2_ind","s1","s2","a","i","E","includes","consistence_counter","table_to_update_after_equiv","answer","add_elt_in_S"],"mappings":"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","sourcesContent":["import { Automaton, State } from \"../automaton/Automaton.js\";\r\nimport { Teacher } from \"../teacher/Teacher.js\";\r\nimport { LearnerBase } from \"./LearnerBase.js\";\r\n\r\nexport class L_star extends LearnerBase {\r\n\r\n  constructor(teacher: Teacher) {\r\n    super(teacher)\r\n  }\r\n\r\n  make_automaton(): Automaton {\r\n    let wordForState: string[] = [], statesMap: Map<string, State> = new Map(),\r\n      acceptingStates: State[] = [], initialStates: State[] = [], statesSet: Set<State> = new Set();\r\n    this.S.forEach(s => {\r\n      let name = this.observation_table[s];\r\n      if (!statesMap.get(name)) {\r\n        let state = new State(name, name[0] == \"1\", s == \"\", this.alphabet);\r\n        wordForState.push(s);\r\n        if (state.isAccepting) acceptingStates.push(state)\r\n        if (state.isInitial) initialStates.push(state)\r\n        statesMap.set(name, state);\r\n        statesSet.add(state)\r\n      }\r\n    })\r\n\r\n    for (const word of wordForState) {\r\n      let name = this.observation_table[word]\r\n      for (const symbol of this.alphabet) {\r\n        statesMap.get(name)!.outTransitions.get(symbol)!.push(statesMap.get(this.observation_table[word + symbol])!)\r\n      }\r\n    }\r\n\r\n    this.automaton = new Automaton(statesSet)\r\n    return this.automaton;\r\n  }\r\n\r\n\r\n  /**\r\n   * @returns the first t in SA st it does not exist s in S st row(s) == row (t)\r\n   */\r\n  is_close(): string | undefined {\r\n    let res = this.SA.find(t => !this.S.some(s => this.same_row(s, t)));\r\n    this.closedness_counter += res == undefined ? 0 : 1;\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * @returns a list of 3 elements, \r\n   * the first two are s1, s2 in {@link S} st row(s1) == row(s2)\r\n   * and there is an \"a\" in alphabet st row(s1 + a) != row(s2 + a)\r\n   */\r\n  is_consistent(): string[] | undefined {\r\n    for (let s1_ind = 0; s1_ind < this.S.length; s1_ind++) {\r\n      for (let s2_ind = s1_ind + 1; s2_ind < this.S.length; s2_ind++) {\r\n        let s1 = this.S[s1_ind];\r\n        let s2 = this.S[s2_ind];\r\n        if (this.same_row(s1, s2)) {\r\n          for (const a of this.alphabet) {\r\n            for (let i = 0; i < this.E.length; i++) {\r\n              if (this.observation_table[s1 + a][i] !=\r\n                this.observation_table[s2 + a][i] && !this.E.includes(a + this.E[i])) {\r\n                this.consistence_counter++;\r\n                return [s1, s2, a + this.E[i]]\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  table_to_update_after_equiv(answer: string): void {\r\n    this.add_elt_in_S(answer, true);\r\n  }\r\n}"],"file":"L_star.js"}