{"version":3,"sources":["../../src/html_interactions/HTML_L_star.ts"],"names":["L_star","HTML_LearnerBase","HTML_L_star","constructor","teacher","close_message","close_rep","learner","observation_table","consistent_message","s1","s2","new_col","table_to_update_after_equiv","answer","add_elt_in_S"],"mappings":"AACA,OAASA,MAAT,KAAuB,uBAAvB,CACA,OAASC,gBAAT,KAAiC,uBAAjC,CAEA,MAAO,MAAMC,CAAAA,WAAN,QAA0BD,CAAAA,gBAAyB,CACxDE,WAAW,CAACC,OAAD,CAAmB,CAC5B,MAAM,GAAIJ,CAAAA,MAAJ,CAAWI,OAAX,CAAN,CACD,CAEDC,aAAa,CAACC,SAAD,CAAoB,CAC/B,MAAQ;AACZ,oBAAoBA,SAAU,OAAM,KAAKC,OAAL,CAAaC,iBAAb,CAA+BF,SAA/B,CAA0C,mEAAkE,KAAKC,OAAL,CAAaC,iBAAb,CAA+BF,SAA/B,CAA0C;AAC1L,4BAA4BA,SAAU,eACnC,CAEDG,kBAAkB,CAACC,EAAD,CAAaC,EAAb,CAAyBC,OAAzB,CAA0C,CAC1D,MAAQ;AACZ,oBAAoBF,EAAE,CAAGA,EAAH,CAAQ,QAAI,WAAUC,EAAE,CAAGA,EAAH,CAAQ,QAAI,aAAYD,EAAE,CAAGA,EAAH,CAAQ,QAAI,KAAIC,EAAE,CAAGA,EAAH,CAAQ,QAAI;AACtG,wBAAwBD,EAAE,CAAGE,OAAO,CAAC,CAAD,CAAI,eAAcD,EAAE,CAAGC,OAAO,CAAC,CAAD,CAAI,aAAYF,EAAE,CAAGA,EAAH,CAAQ,QAAI,KAAIC,EAAE,CAAGA,EAAH,CAAQ,QAAI,mBAAkBC,OAAO,CAAC,CAAD,CAAI;AAC/I,uCAAuCA,OAAQ,gBAAeF,EAAE,CAAGE,OAAQ,aAAYD,EAAE,CAAGC,OAAQ,MACjG,CAEDC,2BAA2B,CAACC,MAAD,CAAiB,CAC1C,KAAKP,OAAL,CAAaQ,YAAb,CAA0BD,MAA1B,CAAmC,IAAnC,CACD,CApBuD","sourcesContent":["import { Teacher } from \"../teacher/Teacher.js\";\r\nimport { L_star } from \"../learners/L_star.js\";\r\nimport { HTML_LearnerBase } from \"./HTML_LearnerBase.js\";\r\n\r\nexport class HTML_L_star extends HTML_LearnerBase<L_star> {\r\n  constructor(teacher: Teacher) {\r\n    super(new L_star(teacher));\r\n  }\r\n\r\n  close_message(close_rep: string) {\r\n    return `The table is not closed since\r\n        \\\\(\\\\{row(${close_rep}) = ${this.learner.observation_table[close_rep]} \\\\land 0 \\\\in SA\\\\}\\\\) but \\\\(\\\\{\\\\nexists s \\\\in S | row(s) = ${this.learner.observation_table[close_rep]}\\\\}\\\\)\r\n        I'm going to move ${close_rep} from SA to S`\r\n  }\r\n\r\n  consistent_message(s1: string, s2: string, new_col: string) {\r\n    return `The table is not consistent : \r\n        \\\\(\\\\{row(${s1 ? s1 : \"ε\"}) = row(${s2 ? s2 : \"ε\"}) \\\\land (${s1 ? s1 : \"ε\"}, ${s2 ? s2 : \"ε\"}) \\\\in S\\\\}\\\\)\r\n        but \\\\(\\\\{row(${s1 + new_col[0]}) \\\\neq row(${s2 + new_col[0]}) \\\\land (${s1 ? s1 : \"ε\"}, ${s2 ? s2 : \"ε\"}) \\\\in S \\\\land ${new_col[0]} \\\\in \\\\Sigma\\\\}\\\\)\r\n        I'm going to add the column \"${new_col}\" since \\\\(T(${s1 + new_col}) \\\\neq T(${s2 + new_col})\\\\)`\r\n  }\r\n\r\n  table_to_update_after_equiv(answer: string) {\r\n    this.learner.add_elt_in_S(answer!, true);\r\n  }\r\n}"],"file":"HTML_L_star.js"}